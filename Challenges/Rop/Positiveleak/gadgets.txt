


Gadgets
=======


0x0000000000001123: adc al, 0x48; mov eax, dword ptr [rip + 0x2ec5]; test rax, rax; je 0x1138; jmp rax; 
0x0000000000001163: adc eax, 0x2e90; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x00000000000010e2: adc eax, 0xee058b48; add byte ptr cs:[rax], al; test rax, rax; je 0x10f8; jmp rax; 
0x0000000000001161: add bh, bh; adc eax, 0x2e90; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x000000000000112a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000010e9: add byte ptr [rax - 0x7b], cl; sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x000000000000100e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000000010f3: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000000153c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x00000000000010f4: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000000137b: add byte ptr [rax], al; add byte ptr [rbp + rax - 0x18], dh; mov ebx, 0xc9fffffc; ret; 
0x00000000000013cc: add byte ptr [rax], al; add byte ptr [rsi - 0x39], bh; nop; nop; leave; ret; 
0x000000000000140e: add byte ptr [rax], al; call 0x1030; nop; pop rbp; ret; 
0x0000000000001166: add byte ptr [rax], al; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x0000000000001160: add byte ptr [rax], al; call qword ptr [rip + 0x2e90]; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x000000000000153e: add byte ptr [rax], al; endbr64; ret; 
0x0000000000001546: add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x00000000000011e6: add byte ptr [rax], al; je 0x11ef; call 0x1040; leave; ret; 
0x000000000000137c: add byte ptr [rax], al; je 0x1385; call 0x1040; leave; ret; 
0x00000000000013cd: add byte ptr [rax], al; jle 0x1398; nop; nop; leave; ret; 
0x00000000000010f6: add byte ptr [rax], al; ret; 
0x000000000000100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000000100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x00000000000010e8: add byte ptr [rax], al; test rax, rax; je 0x10f8; jmp rax; 
0x0000000000001129: add byte ptr [rax], al; test rax, rax; je 0x1138; jmp rax; 
0x0000000000001135: add byte ptr [rax], r8b; ret; 
0x000000000000137d: add byte ptr [rbp + rax - 0x18], dh; mov ebx, 0xc9fffffc; ret; 
0x0000000000001172: add byte ptr [rcx], al; pop rbp; ret; 
0x00000000000013ce: add byte ptr [rsi - 0x39], bh; nop; nop; leave; ret; 
0x0000000000001165: add byte ptr cs:[rax], al; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x000000000000115f: add byte ptr cs:[rax], al; call qword ptr [rip + 0x2e90]; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x00000000000010e7: add byte ptr cs:[rax], al; test rax, rax; je 0x10f8; jmp rax; 
0x0000000000001128: add byte ptr cs:[rax], al; test rax, rax; je 0x1138; jmp rax; 
0x0000000000001126: add eax, 0x2ec5; test rax, rax; je 0x1138; jmp rax; 
0x00000000000010e5: add eax, 0x2eee; test rax, rax; je 0x10f8; jmp rax; 
0x000000000000100a: add eax, 0x2fd9; test rax, rax; je 0x1016; call rax; 
0x000000000000137f: add eax, 0xfffcbbe8; dec ecx; ret; 
0x00000000000011e9: add eax, 0xfffe51e8; dec ecx; ret; 
0x0000000000001017: add esp, 8; ret; 
0x0000000000001016: add rsp, 8; ret; 
0x00000000000011e3: and eax, 0x28; je 0x11ef; call 0x1040; leave; ret; 
0x0000000000001379: and eax, 0x28; je 0x1385; call 0x1040; leave; ret; 
0x0000000000001404: call 0x1030; lea rdi, [rip + 0xc5e]; call 0x1030; nop; pop rbp; ret; 
0x0000000000001410: call 0x1030; nop; pop rbp; ret; 
0x00000000000011ea: call 0x1040; leave; ret; 
0x0000000000001168: call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x0000000000001198: call qword ptr [rbp + 0x48]; 
0x0000000000001162: call qword ptr [rip + 0x2e90]; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x0000000000001014: call rax; 
0x0000000000001014: call rax; add rsp, 8; ret; 
0x00000000000010e0: clc; je 0x10f8; mov rax, qword ptr [rip + 0x2eee]; test rax, rax; je 0x10f8; jmp rax; 
0x00000000000013ca: cld; mov dword ptr [rax], 0xc77e0000; nop; nop; leave; ret; 
0x0000000000001543: cli; ret; 
0x000000000000154b: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000001003: cli; sub rsp, 8; mov rax, qword ptr [rip + 0x2fd9]; test rax, rax; je 0x1016; call rax; 
0x00000000000013c8: cmp dword ptr [rbp - 4], 0xc7; jle 0x1398; nop; nop; leave; ret; 
0x000000000000140b: cmp eax, 0xc5e; call 0x1030; nop; pop rbp; ret; 
0x00000000000010df: cmp eax, edi; je 0x10f8; mov rax, qword ptr [rip + 0x2eee]; test rax, rax; je 0x10f8; jmp rax; 
0x00000000000010de: cmp rax, rdi; je 0x10f8; mov rax, qword ptr [rip + 0x2eee]; test rax, rax; je 0x10f8; jmp rax; 
0x0000000000001408: dec dword ptr [rax - 0x73]; cmp eax, 0xc5e; call 0x1030; nop; pop rbp; ret; 
0x00000000000011ee: dec ecx; ret; 
0x0000000000001540: endbr64; ret; 
0x0000000000001548: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000001000: endbr64; sub rsp, 8; mov rax, qword ptr [rip + 0x2fd9]; test rax, rax; je 0x1016; call rax; 
0x000000000000100b: fldcw word ptr [rdi]; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000000151c: fmul qword ptr [rax - 0x7d]; ret; 
0x0000000000001006: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x2fd9; test rax, rax; je 0x1016; call rax; 
0x0000000000001012: je 0x1016; call rax; 
0x0000000000001012: je 0x1016; call rax; add rsp, 8; ret; 
0x00000000000010ed: je 0x10f8; jmp rax; 
0x00000000000010e1: je 0x10f8; mov rax, qword ptr [rip + 0x2eee]; test rax, rax; je 0x10f8; jmp rax; 
0x000000000000112e: je 0x1138; jmp rax; 
0x0000000000001122: je 0x1138; mov rax, qword ptr [rip + 0x2ec5]; test rax, rax; je 0x1138; jmp rax; 
0x00000000000011e8: je 0x11ef; call 0x1040; leave; ret; 
0x000000000000137e: je 0x1385; call 0x1040; leave; ret; 
0x00000000000013c9: jge 0x13c7; mov dword ptr [rax], 0xc77e0000; nop; nop; leave; ret; 
0x00000000000013cf: jle 0x1398; nop; nop; leave; ret; 
0x00000000000010ef: jmp rax; 
0x000000000000140a: lea edi, [rip + 0xc5e]; call 0x1030; nop; pop rbp; ret; 
0x0000000000001409: lea rdi, [rip + 0xc5e]; call 0x1030; nop; pop rbp; ret; 
0x00000000000011ef: leave; ret; 
0x000000000000116d: mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x00000000000013cb: mov dword ptr [rax], 0xc77e0000; nop; nop; leave; ret; 
0x0000000000001125: mov eax, dword ptr [rip + 0x2ec5]; test rax, rax; je 0x1138; jmp rax; 
0x00000000000010e4: mov eax, dword ptr [rip + 0x2eee]; test rax, rax; je 0x10f8; jmp rax; 
0x0000000000001009: mov eax, dword ptr [rip + 0x2fd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000001381: mov ebx, 0xc9fffffc; ret; 
0x0000000000001124: mov rax, qword ptr [rip + 0x2ec5]; test rax, rax; je 0x1138; jmp rax; 
0x00000000000010e3: mov rax, qword ptr [rip + 0x2eee]; test rax, rax; je 0x10f8; jmp rax; 
0x0000000000001008: mov rax, qword ptr [rip + 0x2fd9]; test rax, rax; je 0x1016; call rax; 
0x0000000000001538: nop dword ptr [rax + rax]; endbr64; ret; 
0x0000000000001133: nop dword ptr [rax + rax]; ret; 
0x00000000000010f1: nop dword ptr [rax]; ret; 
0x0000000000001537: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000001177: nop dword ptr cs:[rax + rax]; ret; 
0x0000000000001132: nop word ptr [rax + rax]; ret; 
0x0000000000001536: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000001176: nop word ptr cs:[rax + rax]; ret; 
0x0000000000001164: nop; add byte ptr cs:[rax], al; call 0x10d0; mov byte ptr [rip + 0x2f14], 1; pop rbp; ret; 
0x00000000000013d2: nop; leave; ret; 
0x00000000000013d1: nop; nop; leave; ret; 
0x0000000000001415: nop; pop rbp; ret; 
0x0000000000001007: or byte ptr [rax - 0x75], cl; add eax, 0x2fd9; test rax, rax; je 0x1016; call rax; 
0x00000000000010e6: out dx, al; add byte ptr cs:[rax], al; test rax, rax; je 0x10f8; jmp rax; 
0x000000000000152c: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000000152e: pop r13; pop r14; pop r15; ret; 
0x0000000000001530: pop r14; pop r15; ret; 
0x0000000000001532: pop r15; ret; 
0x000000000000152b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000000152f: pop rbp; pop r14; pop r15; ret; 
0x0000000000001174: pop rbp; ret; 
0x0000000000001533: pop rdi; ret; 
0x0000000000001531: pop rsi; pop r15; ret; 
0x000000000000152d: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000001072: ret 0x2f; 
0x00000000000012d2: ret 0x8b48; 
0x000000000000101a: ret; 
0x000000000000112d: sal byte ptr [rax + rcx - 1], 0xe0; nop word ptr [rax + rax]; ret; 
0x00000000000010ec: sal byte ptr [rcx + rcx - 1], 0xe0; nop dword ptr [rax]; ret; 
0x0000000000001011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000001120: sar esi, 1; je 0x1138; mov rax, qword ptr [rip + 0x2ec5]; test rax, rax; je 0x1138; jmp rax; 
0x000000000000111f: sar rsi, 1; je 0x1138; mov rax, qword ptr [rip + 0x2ec5]; test rax, rax; je 0x1138; jmp rax; 
0x00000000000011e4: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x11ef; call 0x1040; leave; ret; 
0x000000000000137a: sub byte ptr [rax], al; add byte ptr [rax], al; je 0x1385; call 0x1040; leave; ret; 
0x000000000000154d: sub esp, 8; add rsp, 8; ret; 
0x0000000000001005: sub esp, 8; mov rax, qword ptr [rip + 0x2fd9]; test rax, rax; je 0x1016; call rax; 
0x000000000000154c: sub rsp, 8; add rsp, 8; ret; 
0x0000000000001004: sub rsp, 8; mov rax, qword ptr [rip + 0x2fd9]; test rax, rax; je 0x1016; call rax; 
0x000000000000153a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000000117a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000001010: test eax, eax; je 0x1016; call rax; 
0x0000000000001010: test eax, eax; je 0x1016; call rax; add rsp, 8; ret; 
0x00000000000010eb: test eax, eax; je 0x10f8; jmp rax; 
0x000000000000112c: test eax, eax; je 0x1138; jmp rax; 
0x000000000000100f: test rax, rax; je 0x1016; call rax; 
0x000000000000100f: test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x00000000000010ea: test rax, rax; je 0x10f8; jmp rax; 
0x000000000000112b: test rax, rax; je 0x1138; jmp rax; 

138 gadgets found
