


Gadgets
=======


0x00000000004948ec: adc ah, bh; stc; call qword ptr [rax - 0x1a]; 
0x000000000042d7dd: adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000043d53f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d5a9: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004b2b18: adc al, 0; add byte ptr [rax], al; add byte ptr [rax + rax], dh; mov al, 0xfc; sti; jmp qword ptr [rbx]; 
0x000000000048d0bd: adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004b2b00: adc al, 0; add byte ptr [rax], al; call 0xffffffff980b2b7c; cld; sti; jmp qword ptr [rbx]; 
0x00000000004b51d0: adc al, 0; add byte ptr [rax], al; mov eax, 0xd800009a; pop rsp; std; jmp qword ptr [rcx]; 
0x00000000004af130: adc al, 0; add byte ptr [rax], al; sbb byte ptr [rdx], bh; add byte ptr [rax], al; cmp byte ptr [rdx - 9], dl; jmp qword ptr [rbx]; 
0x00000000004af640: adc al, 0; add byte ptr [rax], al; sub byte ptr [rdi], bh; add byte ptr [rax], al; mov byte ptr [rbp - 7], cl; jmp qword ptr [rdi + 6]; 
0x00000000004b0448: adc al, 0; add byte ptr [rax], al; xor byte ptr [rbp], cl; add byte ptr [rax - 0x46], dh; stc; call qword ptr [rcx]; 
0x00000000004af5b0: adc al, 0; add byte ptr [rax], al; cwde; add byte ptr ds:[rax], al; fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x000000000047deaa: adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000046033b: adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x00000000004acb89: adc al, 0; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x000000000044bf37: adc al, 0x11; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000042d985: adc al, 0x13; jmp rdx; 
0x0000000000425c45: adc al, 0x16; sub eax, edx; ret; 
0x000000000042b055: adc al, 0x16; test r8d, r8d; je 0x2b05d; xchg edx, eax; sub eax, edx; ret; 
0x000000000048cdda: adc al, 0x24; mov edi, 1; call rax; 
0x000000000048d48d: adc al, 0x24; mov esi, 1; mov edi, 1; call rax; 
0x0000000000449a37: adc al, 0x24; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000449531: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49549; add rsp, 0x28; ret; 
0x000000000044a460: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4a477; add rsp, 0x28; ret; 
0x0000000000484ec7: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484faa: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84fc4; add rsp, 0x38; ret; 
0x000000000040e911: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040e9fd: adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000419658: adc al, 0x27; sub al, byte ptr [rax]; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x000000000049735c: adc al, 0x2e; cld; call rsp; 
0x0000000000495940: adc al, 0x3f; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004afa30: adc al, 0x43; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x0000000000444910: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x00000000004165ab: adc al, 0x48; mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000048d06b: adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0x8d090; add rsp, 0x18; ret; 
0x000000000043e9d0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d0fe: adc al, 0x91; sub eax, edx; ret; 
0x000000000042d981: adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040d2c0: adc al, 0x97; add rdx, rdi; jmp rdx; 
0x0000000000425db3: adc al, 0xa; sub eax, edx; ret; 
0x00000000004ac230: adc al, 0xb; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x0000000000446e8f: adc al, 0xe; cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043ec21: adc al, 0xe; lea rcx, [rip + 0x59756]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d0f1: adc al, 0xe; lea rcx, [rip + 0x5b286]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042a22a: adc al, 0xe; sub eax, edx; ret; 
0x000000000042befa: adc al, 0xe; sub eax, edx; vzeroupper; ret; 
0x00000000004af52c: adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x00000000004128bb: adc al, 0xf6; ret 0x7420; 
0x000000000048d15d: adc al, 0xf7; ret; 
0x00000000004af5b9: adc al, 0xf9; call qword ptr [rax + 1]; 
0x0000000000494475: adc al, 0xfa; call qword ptr [rsi + 0x26fffa13]; adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494435: adc al, 0xfa; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x00000000004b2ea1: adc al, 0xfc; jmp qword ptr [rax]; 
0x000000000048c001: adc al, 1; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x0000000000422db2: adc al, 1; cmp dl, r8b; jne 0x22da0; sub rax, 0x10; ret; 
0x0000000000432fae: adc al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494380: adc al, ah; stc; jmp rax; 
0x000000000049501c: adc al, bh; cli; push qword ptr [rax]; clc; cli; call qword ptr [rax - 8]; 
0x000000000046a17f: adc al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000043d6e7: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d751: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000040107a: adc al, byte ptr [rdx]; add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x000000000041965f: adc bh, al; add eax, 0x2a2706; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048ca2d: adc bh, al; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000494645: adc bh, dl; call qword ptr [rax + 0x20fffa11]; adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494485: adc bh, dl; call rsi; 
0x0000000000494485: adc bh, dl; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x0000000000494481: adc bh, dl; inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x0000000000494481: adc bh, dl; inc dword ptr [rsi + 0x12]; cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x0000000000494505: adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494505: adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494441: adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494501: adc bh, dl; push qword ptr [rdx]; adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004942e4: adc bl, ah; stc; call qword ptr [rax]; 
0x00000000004825b2: adc bl, ch; int 0xe8; jbe 0x82550; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000482ce2: adc bl, ch; jno 0x82d2f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004351c0: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c16: adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004448e6: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444906: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444256: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444246: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444967: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444987: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442d7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004448a7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444217: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444a68: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004443b8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004351bf: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004448e5: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444905: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444255: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444245: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444966: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444986: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442d6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004448a6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444216: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000047f17a: adc byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000419145: adc byte ptr [r11 + 0x5d], r11b; ret; 
0x0000000000411809: adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000489df5: adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000042b32f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000483f63: adc byte ptr [r15], cl; xchg ebx, eax; ret 0x3949; 
0x000000000048374e: adc byte ptr [r15], cl; sahf; ret 0x3948; 
0x000000000045bf89: adc byte ptr [r15], cl; sahf; ret 0x894c; 
0x0000000000446fc2: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000045b1a5: adc byte ptr [r15], r9b; xchg ebx, eax; ret 0x3948; 
0x000000000045b986: adc byte ptr [r15], r9b; xchg ebx, eax; ret 0x3949; 
0x0000000000481c3f: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000411542: adc byte ptr [r8 + 1], r9b; ret; 
0x0000000000484da3: adc byte ptr [r8 - 0x73], cl; adc eax, 0x25a00; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000041872f: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x000000000041646c: adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000045bf82: adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000047c27f: adc byte ptr [r8 - 0x7d], cl; ret; 
0x000000000041156d: adc byte ptr [r9 + 0x2b], r9b; or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000044468a: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x5095b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044406a: adc byte ptr [rax + 0x29], cl; retf 0x8d4c; sbb eax, 0x50efb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041e9b3: adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041acec: adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000041b068: adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x00000000004239a6: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x0000000000483f5d: adc byte ptr [rax + 0x39], cl; ret; 
0x000000000048806f: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000481c40: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000410947: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000411543: adc byte ptr [rax + 1], cl; ret; 
0x000000000044bfcb: adc byte ptr [rax + rbp*8 + 0x48], bh; cmp ecx, dword ptr [rax + 0x18]; jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfca: adc byte ptr [rax + rbp*8 + 0x48], dil; cmp ecx, dword ptr [rax + 0x18]; jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000400eae: adc byte ptr [rax - 0x39], cl; ret 0; 
0x000000000045bf7f: adc byte ptr [rax - 0x73], cl; adc byte ptr [r8 - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000485066: adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004237c6: adc byte ptr [rax - 0x73], cl; adc eax, 0x23282; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000484da4: adc byte ptr [rax - 0x73], cl; adc eax, 0x25a00; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424356: adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffa62; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x000000000047f21f: adc byte ptr [rax - 0x73], cl; add dword ptr [rax - 0x77], r9d; add eax, 0x23d185; ret; 
0x0000000000416c97: adc byte ptr [rax - 0x75], cl; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000488c5f: adc byte ptr [rax - 0x75], cl; cmp cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000047422b: adc byte ptr [rax - 0x75], cl; je 0x74254; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000041c94d: adc byte ptr [rax - 0x77], cl; and al, 8; call rcx; 
0x000000000044bfa5: adc byte ptr [rax - 0x77], cl; and sil, al; sub byte ptr [rcx], al; ret; 
0x00000000004588a8: adc byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000470a17: adc byte ptr [rax - 0x77], cl; jo 0x70a2c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000047f437: adc byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000040e089: adc byte ptr [rax - 0x77], cl; out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000471a12: adc byte ptr [rax - 0x77], cl; push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000042215f: adc byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000041dd21: adc byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000418730: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x000000000041646d: adc byte ptr [rax - 0x77], cl; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416f0f: adc byte ptr [rax - 0x78], al; jl 0x16f29; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004846bb: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x0000000000490ce6: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x0000000000411393: adc byte ptr [rax - 0x7b], cl; push qword ptr [rsp + rcx - 0x18]; ret 0xec; 
0x000000000045bf83: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x0000000000440fb7: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000440ff3: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x000000000040aaf5: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000407666: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x00000000004197e3: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000455588: adc byte ptr [rax - 0x7d], cl; ret 0x4902; 
0x0000000000401080: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000411ed0: adc byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493f28: adc byte ptr [rax - 7], ah; jmp qword ptr [rax]; 
0x000000000049f1f5: adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x0000000000473c60: adc byte ptr [rax], al; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd41d6; cmove rax, rdx; ret; 
0x000000000047fafe: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c495863; ret; 
0x000000000047fb1b: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c495880; ret; 
0x000000000047fb58: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c4958bd; ret; 
0x000000000042a28a: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000043d4d2: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000043ef9c: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d8f1: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004adc00: adc byte ptr [rax], al; add byte ptr [rax], al; call 0x480adc2d; mov ch, 0xf6; call qword ptr [rsi]; 
0x00000000004af498: adc byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rip - 0x69b00000], 0xf8; call qword ptr [rax]; 
0x00000000004ac1a0: adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdx], cl; add byte ptr [rax], al; mov byte ptr [rsi + rsi*8], ch; call qword ptr [rax]; 
0x0000000000449a03: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x00000000004acbd4: adc byte ptr [rax], al; add byte ptr [rax], al; mov esp, 0x4000014; push -0xa; call qword ptr [rax]; 
0x00000000004704f9: adc byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004af8a4: adc byte ptr [rax], al; add byte ptr [rax], al; mov word ptr [rcx], es; add byte ptr [rbx + rax*4], ah; stc; jmp rbx; 
0x000000000044816c: adc byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b1980: adc byte ptr [rax], al; add byte ptr [rax], al; push 0x78000062; mov al, 0xfa; call qword ptr [rax]; 
0x00000000004b56d8: adc byte ptr [rax], al; add byte ptr [rax], al; rcr byte ptr [rdi - 0x7af00000], 0xfd; call qword ptr [rbx]; 
0x00000000004af4e8: adc byte ptr [rax], al; add byte ptr [rax], al; sar byte ptr [rip - 0x26700000], 1; clc; call qword ptr [rax]; 
0x00000000004af930: adc byte ptr [rax], al; add byte ptr [rax], al; sbb byte ptr [rdx], al; add byte ptr [rax - 0x7b], ch; stc; call qword ptr [rbx]; 
0x00000000004af4ac: adc byte ptr [rax], al; add byte ptr [rax], al; xchg esp, eax; cmp eax, 0x964c0000; clc; jmp qword ptr [rsi]; 
0x00000000004af510: adc byte ptr [rax], al; add byte ptr [rax], al; clc; cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x00000000004adc14: adc byte ptr [rax], al; add byte ptr [rax], al; cld; and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x000000000046c775: adc byte ptr [rax], al; add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x0000000000469936: adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000049f1ed: adc byte ptr [rax], al; add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000043b1a8: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000473c54: adc byte ptr [rax], al; lea rax, [rip - 0x2bf9d]; cmp edx, 0x1000; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x0000000000484470: adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000493ea4: adc byte ptr [rax], dh; stc; push qword ptr [rax]; xor ecx, edi; call rax; 
0x000000000048e088: adc byte ptr [rbp + 0x13], dh; xor eax, eax; ret; 
0x000000000048aee8: adc byte ptr [rbp + 0x1d], dh; xor eax, eax; ret; 
0x00000000004b4c9c: adc byte ptr [rbp + 0x2e600000], 0xfd; jmp qword ptr [rax + 1]; 
0x00000000004446cf: adc byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rcx], ecx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041180a: adc byte ptr [rbp + rcx*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000489df6: adc byte ptr [rbp - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004b3740: adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x000000000047b62c: adc byte ptr [rbp - 8], ah; call qword ptr [rbp + 0x53]; 
0x000000000040118d: adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000413bf4: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000004107b3: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000419146: adc byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000444317: adc byte ptr [rbx + 0xff3174e], cl; jg 0x44326; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004449c7: adc byte ptr [rbx + 0xff3174e], cl; jg 0x449d6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444337: adc byte ptr [rbx + 0xff3184e], cl; jg 0x44346; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449e7: adc byte ptr [rbx + 0xff3184e], cl; jg 0x449f6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000041199b: adc byte ptr [rbx + rcx*4 + 0x44], cl; and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000418312: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000470f0e: adc byte ptr [rbx - 0x3b7cb7fa], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004756cd: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000493eec: adc byte ptr [rbx], dh; stc; push rax; stc; jmp qword ptr [rax + 0x4d]; 
0x000000000041156e: adc byte ptr [rcx + 0x2b], cl; or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000044cf7b: adc byte ptr [rcx + 0xf480004], 0x44; ret; 
0x0000000000446adb: adc byte ptr [rcx + rbp - 0x40], al; cmp eax, ecx; jle 0x46b18; movsxd rax, ecx; ret; 
0x0000000000472013: adc byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x000000000040dff4: adc byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000493f7c: adc byte ptr [rcx - 0x71be0007], dl; stc; call qword ptr [rax]; 
0x000000000044af12: adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000044b00a: adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x00000000004198df: adc byte ptr [rcx - 0x75], cl; sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000048aaef: adc byte ptr [rcx - 0x77], cl; ret; 
0x0000000000419097: adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000042a2bd: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000045bf21: adc byte ptr [rcx - 0x7d], cl; ret; 
0x000000000049444c: adc byte ptr [rcx], 0xfa; call qword ptr [rax]; 
0x000000000048259a: adc byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000448ac9: adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004b282c: adc byte ptr [rcx], dh; add byte ptr [rax], al; cmc; sti; jmp qword ptr [rdx]; 
0x0000000000458925: adc byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000411eb7: adc byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000049413c: adc byte ptr [rdi - 0x470f0007], dh; stc; call rax; 
0x0000000000494eec: adc byte ptr [rdi - 0x774f0006], al; cli; call qword ptr [rax - 0x76]; 
0x0000000000493e84: adc byte ptr [rdi], ah; stc; push qword ptr [rax]; sub cl, bh; call qword ptr [rax + 0x29]; 
0x00000000004af62c: adc byte ptr [rdi], bh; add byte ptr [rax], al; jo 0xaf679; stc; jmp qword ptr [rbx]; 
0x00000000004470dd: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000446fc3: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000444b23: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000042a6a1: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a791: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a5b1: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042aff9: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000042ab51: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042a2e1: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000042ad31: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a4c1: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000042af11: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042ae21: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a763: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a853: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a673: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3d1: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x000000000042a583: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3a3: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a493: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a2b3: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000045b1a6: adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3948; 
0x000000000045b987: adc byte ptr [rdi], cl; xchg ebx, eax; ret 0x3949; 
0x0000000000449e99: adc byte ptr [rdi], cl; xchg esp, eax; ret 0x2044; 
0x000000000048374f: adc byte ptr [rdi], cl; sahf; ret 0x3948; 
0x000000000045bf8a: adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x000000000048314d: adc byte ptr [rdi], r9b; xchg ebx, eax; ret 0x3948; 
0x0000000000483e11: adc byte ptr [rdi], r9b; sahf; ret 0x3948; 
0x000000000044bf9d: adc byte ptr [rdx + 0x40], dh; cmp rcx, qword ptr [rax + 0x18]; ja 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bf9c: adc byte ptr [rdx + 0x40], sil; cmp rcx, qword ptr [rax + 0x18]; ja 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004b20f1: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add byte ptr [rax + rax], cl; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004acff3: adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x00000000004acb7e: adc byte ptr [rdx + 0xe], al; or byte ptr [rcx + 0xb], al; add byte ptr [rax], r8b; add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x00000000004b009e: adc byte ptr [rdx + 0xe], al; or byte ptr [rsi + 0xb], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*2 - 0x596c0000], cl; stc; call rsi; 
0x0000000000473f5d: adc byte ptr [rdx + 1], ch; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000494f0c: adc byte ptr [rdx + rdi*8 - 0x56a4f01], dl; call qword ptr [rax - 0x69]; 
0x00000000004941a4: adc byte ptr [rdx - 0x43ef0007], bh; stc; call qword ptr [rax]; mov esi, 0xb0a0fff9; stc; jmp qword ptr [rax - 0x4e]; 
0x00000000004465f6: adc byte ptr [rdx], al; jne 0x46610; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x465f0; ret; 
0x00000000004466a6: adc byte ptr [rdx], al; jne 0x466c0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x466a0; ret; 
0x000000000042cdbb: adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004465f5: adc byte ptr [rdx], r8b; jne 0x46610; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x465f0; ret; 
0x00000000004466a5: adc byte ptr [rdx], r8b; jne 0x466c0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x466a0; ret; 
0x0000000000494b94: adc byte ptr [rip + 0x2c90fffa], ch; cli; call qword ptr [rax]; 
0x0000000000494860: adc byte ptr [rip + 0x480fffa], al; cli; push rax; add edi, edx; jmp qword ptr [rax + 3]; 
0x000000000048d1ec: adc byte ptr [rip - 0x7ab80000], ah; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000042c265: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cc6a: adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret; 
0x000000000042c260: adc byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000424995: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000438ebb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000042b330: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000446e3b: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446fb9: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004941bc: adc byte ptr [rsi - 0x47ff0007], dh; stc; call rax; 
0x00000000004941ac: adc byte ptr [rsi - 0x4f5f0007], bh; stc; jmp qword ptr [rax - 0x4e]; 
0x0000000000444af3: adc byte ptr [rsi - 0x70], ah; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000043850a: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004442f7: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004a4d28: adc byte ptr [rsi - 3], dh; jmp rbx; 
0x0000000000433427: adc byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446e38: adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004942e8: adc ch, ah; stc; call qword ptr [rax]; 
0x00000000004b4ad5: adc ch, bh; call qword ptr [rax]; 
0x0000000000494318: adc ch, bl; stc; push rax; fdivp st(1); call rax; 
0x00000000004a9539: adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000495040: adc cl, bh; cli; push qword ptr [rax]; stc; cli; call qword ptr [rax - 7]; 
0x000000000045d46f: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x0000000000418745: adc cl, byte ptr [rax - 0x75]; or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000044c56a: adc cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000440ce5: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000047c78d: adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000045d472: adc cl, byte ptr [rbx + rcx*4 + 0x6c]; ret 0x4c40; 
0x0000000000485e3a: adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x000000000045c245: adc cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000049441c: adc cl, dl; stc; jmp qword ptr [rax - 0x2e]; 
0x00000000004ab669: adc dh, bh; call rcx; 
0x00000000004ab65d: adc dh, bh; call rsp; 
0x00000000004ab65d: adc dh, bh; call rsp; adc dh, bh; jmp rdi; 
0x00000000004ab659: adc dh, bh; inc ecx; adc dh, bh; call rsp; 
0x00000000004ab659: adc dh, bh; inc ecx; adc dh, bh; call rsp; adc dh, bh; jmp rdi; 
0x00000000004ab661: adc dh, bh; jmp rdi; 
0x0000000000485219: adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x000000000041c39e: adc dh, dh; ret 0xf0f; 
0x000000000048ca2c: adc dil, al; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004945d1: adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000494495: adc dl, bh; call qword ptr [rsi]; 
0x0000000000494655: adc dl, bh; call rax; 
0x0000000000494651: adc dl, bh; inc dword ptr [rax + 0x10]; cli; call rax; 
0x00000000004945d5: adc dl, bh; jmp rsp; 
0x0000000000495060: adc dl, bh; cli; push qword ptr [rax]; cli; cli; call qword ptr [rax - 6]; 
0x0000000000494290: adc dl, bl; stc; call rax; 
0x00000000004b44a0: adc dl, ch; cld; jmp qword ptr [rcx]; 
0x00000000004943c8: adc dl, cl; stc; jmp qword ptr [rax - 0x35]; 
0x0000000000494f90: adc dl, dh; cli; jmp qword ptr [rax]; 
0x0000000000494654: adc dl, dil; call rax; 
0x000000000046ff8b: adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x0000000000413ce1: adc dword ptr [rax + 0x48000000], -0x77; call 0x5c429a48; ret; 
0x000000000040e90d: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000040e9f9: adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000040e9d3: adc dword ptr [rax + rcx*2 + 0x33], esp; add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000045ab4d: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x000000000041155f: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x000000000044bf38: adc dword ptr [rax - 0x73], ecx; or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004715a4: adc dword ptr [rax - 0x7d], ecx; ret 0x4110; 
0x00000000004051af: adc dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000470f2e: adc dword ptr [rax - 1], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043ef9b: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x000000000043d887: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee9f: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045e460: adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045b1b5: adc dword ptr [rax], eax; add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x00000000004727aa: adc dword ptr [rax], eax; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x0000000000471cf7: adc dword ptr [rbp + 0x16], esi; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000042bea6: adc dword ptr [rbp + 0x31000002], -0x40; vzeroupper; ret; 
0x0000000000435886: adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x5f09e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a79f7: adc dword ptr [rbp - 0x1f57cada], ebp; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000493fd0: adc dword ptr [rbx - 0x6bfe0007], 0x9491fff9; stc; jmp qword ptr [rcx]; 
0x00000000004470e8: adc dword ptr [rbx], eax; ret; 
0x0000000000447061: adc dword ptr [rbx], esp; ret; 
0x00000000004387d9: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387e0: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387e7: adc dword ptr [rcx + 7], edi; ret; 
0x0000000000447053: adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447057: adc dword ptr [rcx - 0x20], edi; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044705c: adc dword ptr [rcx - 0x30], eax; movups xmmword ptr [r11], xmm4; ret; 
0x00000000004897a6: adc dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000438482: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000438446: adc dword ptr [rcx - 1], edi; ret; 
0x000000000043847b: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438679: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043843f: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438672: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438438: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043866b: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438431: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004334e9: adc dword ptr [rcx], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000447050: adc dword ptr [rcx], ebp; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000418786: adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004470db: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000446fc1: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004470df: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004470e3: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000438474: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446c21: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446e43: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x0000000000446fc5: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446f98: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446f9d: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446fca: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x0000000000446fa2: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446fa7: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000438934: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043893b: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438942: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438949: adc dword ptr [rdi - 8], edi; ret; 
0x0000000000446fbe: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446e40: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043846e: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446120: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000446c1b: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c3c: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004470d8: adc dword ptr [rdi], esp; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000446d61: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d68: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d6f: adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446dfe: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e05: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e0c: adc dword ptr [rsi + 7], edx; ret; 
0x00000000004331e9: adc dword ptr [rsi + rax], 0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000400b8f: adc dword ptr [rsi - 0x24], edi; nop; pop rbp; ret; 
0x0000000000446c0e: adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446c07: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c00: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446bf9: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004332a7: adc dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000446d5b: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043d886: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000485069: adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424798: adc eax, 0x1bf63; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000490ceb: adc eax, 0x20478b48; test rax, rax; je 0x90cfc; call rax; 
0x00000000004246e2: adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004245a2: adc eax, 0x22909; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000424442: adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424749: adc eax, 0x22ac2; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000424609: adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244a9: adc eax, 0x22d62; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000048d0f7: adc eax, 0x22f0a4; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000424728: adc eax, 0x22f23; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245e8: adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004237c9: adc eax, 0x23282; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000484d37: adc eax, 0x235e24; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004852e5: adc eax, 0x236e8e; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004244f7: adc eax, 0x23834; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000424548: adc eax, 0x23973; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000047ba8f: adc eax, 0x23e78c; xor eax, eax; add rsp, 8; ret; 
0x0000000000484da7: adc eax, 0x25a00; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d387: adc eax, 0x26b72c; pop rbx; ret; 
0x00000000004186a3: adc eax, 0x2a3670; add dword ptr [rip + 0x2a3665], 1; ret; 
0x0000000000401184: adc eax, 0x2bac1f; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000048e06a: adc eax, 0x30ff8040; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eeca: adc eax, 0x30ff8040; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000046f236: adc eax, 0x34b2d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047baa2: adc eax, 0x4000003; xor eax, eax; ret; 
0x000000000047bb52: adc eax, 0x4000003; ret; 
0x00000000004a645e: adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000435675: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435670: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004491de: adc eax, 0x4c399; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000440088: adc eax, 0x582f3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044006e: adc eax, 0x5830d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ea18: adc eax, 0x59963; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9fe: adc eax, 0x5997d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce68: adc eax, 0x5b513; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce4e: adc eax, 0x5b52d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ad18: adc eax, 0x5d663; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043acfe: adc eax, 0x5d67d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000432c9b: adc eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000465e3a: adc eax, 0x6be0f44; cmp edi, r8d; ja 0x65e20; mov eax, r9d; ret; 
0x000000000042316f: adc eax, 0x70bfc; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424768: adc eax, 0x7133; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000043d411: adc eax, 0x83480000; ret 0xe910; 
0x0000000000469605: adc eax, 0x83fffffd; ret; 
0x0000000000478c51: adc eax, 0x89000003; ret 0xe8c0; 
0x0000000000469e46: adc eax, 0x8b480000; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x00000000004022e1: adc eax, 0x90392; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402114: adc eax, 0x90507; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000401f90: adc eax, 0x9065f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473be8: adc eax, 0xcd3; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727d8: adc eax, 0xcf3; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000425c3a: adc eax, 0xd0bc0f48; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004747fa: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000480fb3: adc eax, 0xf000000; add eax, 0x940fc085; ret 0x3d; 
0x0000000000447c94: adc eax, 0xf880272; ret; 
0x0000000000473c65: adc eax, 0xfffd41d6; cmove rax, rdx; ret; 
0x0000000000424359: adc eax, 0xfffffa62; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000447c8f: adc eax, dword ptr [rax + 0x157701fa]; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x000000000047c093: adc eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x28c63; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000043ecfe: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000433127: adc eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004842c9: adc eax, eax; ret; 
0x0000000000484406: adc eax, edx; pop rbp; pop rbx; ret; 
0x000000000047f2d8: adc eax, esi; add eax, 0x23d4e8; add byte ptr [rax - 0x77], cl; add eax, 0x23d0c9; add rsp, 8; ret; 
0x0000000000423459: adc ebp, dword ptr [rax + 0x1f0ffffe]; add byte ptr [rax + 0x16], bh; ret; 
0x00000000004a7885: adc ebp, dword ptr [rbx]; fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x0000000000412be7: adc ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x00000000004759fc: adc ebx, esi; ret; 
0x000000000041712a: adc ecx, dword ptr [rax - 0x7b]; push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x000000000040ead1: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000457874: adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x0000000000417141: adc edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f01e: adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000047f0bb: adc edi, dword ptr [rcx]; ret 0xc74; 
0x0000000000494635: adc edi, edx; call qword ptr [rax + 0x13]; 
0x0000000000494635: adc edi, edx; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x00000000004944f9: adc edi, edx; call qword ptr [rdx]; 
0x000000000049443d: adc edi, edx; call rax; 
0x000000000049443d: adc edi, edx; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494439: adc edi, edx; inc dword ptr [rax + 0x13]; cli; call rax; 
0x0000000000494439: adc edi, edx; inc dword ptr [rax + 0x13]; cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494479: adc edi, edx; jmp qword ptr [rsi]; 
0x0000000000494639: adc edi, edx; jmp rax; 
0x000000000049447d: adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x00000000004833ea: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004880e1: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000049444d: adc edx, edi; call qword ptr [rax]; 
0x0000000000494509: adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494509: adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x00000000004945cd: adc edx, edi; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000494649: adc edx, edi; jmp qword ptr [rax]; 
0x0000000000494489: adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000049450d: adc edx, edi; jmp rdx; 
0x000000000049464d: adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x000000000043ce69: adc esi, dword ptr [rbp + 0xc8b0005]; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000004a8d9e: adc esi, dword ptr [rbp - 0x60001a67]; mov dh, 0xc7; ret 0xe71f; 
0x00000000004164f3: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048defc: adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004128b9: adc esi, dword ptr [rsp + rdx - 0xa]; ret 0x7420; 
0x00000000004ab2a9: adc esi, edi; jmp rsp; 
0x000000000042db99: adc esp, dword ptr [rbp + 6]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004387d8: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387df: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387e6: adc qword ptr [rcx + 7], rdi; ret; 
0x0000000000438481: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000438445: adc qword ptr [rcx - 1], rdi; ret; 
0x000000000043847a: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438678: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043843e: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438671: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438437: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043866a: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438430: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438473: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446c20: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000438933: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043893a: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438941: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438948: adc qword ptr [rdi - 8], rdi; ret; 
0x000000000043846d: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446c1a: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c3b: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d60: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d67: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d6e: adc qword ptr [rsi + 3], rdx; ret; 
0x0000000000446dfd: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e04: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e0b: adc qword ptr [rsi + 7], rdx; ret; 
0x0000000000446c0d: adc qword ptr [rsi - 1], rdx; ret; 
0x0000000000446c06: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446bff: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446bf8: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d5a: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x00000000004880e0: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000447c15: adc r11b, r14b; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000494484: adc r15b, dl; call rsi; 
0x0000000000494484: adc r15b, dl; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000047c092: adc r8, qword ptr [r8]; add byte ptr [rax - 0x73], cl; or eax, 0x28c63; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x0000000000484405: adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004833e9: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004ac4cb: add ah, ah; cmp al, 0xf6; call qword ptr [rdi]; 
0x00000000004abbdb: add ah, ah; xchg esp, eax; cmc; call rsp; 
0x00000000004af7df: add ah, al; add byte ptr [rax], al; sub al, 0x7a; stc; call rsp; 
0x00000000004ae06b: add ah, al; sal esi, cl; call qword ptr [rax]; 
0x00000000004480d9: add ah, bh; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x00000000004480be: add ah, bh; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000004adc17: add ah, bh; and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x000000000044819b: add ah, bh; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000448109: add ah, bh; inc dword ptr [rbx]; pop rbx; ret; 
0x00000000004b4e17: add ah, bh; xchg esi, eax; add byte ptr [rax], al; and al, 0x35; std; jmp qword ptr [rdx]; 
0x000000000047572a: add ah, byte ptr [rdi - 3]; jmp qword ptr [rsi - 0x70]; 
0x0000000000447990: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x4799b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447b36: add ah, byte ptr [rdx - 0xf]; dec byte ptr [rax + 0x7f]; jg 0x47b41; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000446d6a: add ah, byte ptr [rdx - 0xf]; jl 0x46db7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000443c93: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000004424d3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004abdd3: add ah, ch; movsd dword ptr [rdi], dword ptr [rsi]; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004b4ee7: add ah, cl; xchg edi, eax; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; std; jmp rsp; 
0x0000000000494fe4: add ah, dh; cli; jmp qword ptr [rax]; 
0x00000000004b130b: add ah, dl; jae 0xb1309; call qword ptr [rdx]; 
0x00000000004b0def: add ah, dl; push rsi; add byte ptr [rax], al; or al, 0x17; cli; call rcx; 
0x00000000004abbd9: add al, 0; add ah, ah; xchg esp, eax; cmc; call rsp; 
0x00000000004abbc5: add al, 0; add al, bl; xchg esp, eax; cmc; call qword ptr [rdx]; 
0x000000000048c116: add al, 0; add al, ch; push rdx; sbb edi, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000004531b3: add al, 0; add bh, dh; ret 0; 
0x00000000004531a7: add al, 0; add bh, dh; ret 0xf800; 
0x0000000000456eaf: add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x00000000004110e0: add al, 0; add byte ptr [rax + 1], cl; ret; 
0x000000000042ac17: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046f2a6: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000043fbbf: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ac45: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000474883: add al, 0; add byte ptr [rax], al; ret; 
0x000000000044955f: add al, 0; add byte ptr [rax], al; syscall; 
0x000000000045319f: add al, 0; add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x00000000004725a0: add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000040a071: add al, 0; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000409f27: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000040ac74: add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000409f30: add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000045e86f: add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004243b5: add al, 0; add byte ptr [rsi + riz - 9], dh; ret 0; 
0x00000000004a2895: add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000401553: add al, 0; cmp eax, -1; je 0x162b; add rsp, 0x98; ret; 
0x000000000044c012: add al, 0; mov eax, 0x15; syscall; 
0x00000000004491e1: add al, 0; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000448065: add al, 0; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000448087: add al, 0; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004846ba: add al, 0x10; test rdi, rdi; mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x0000000000448154: add al, 0x12; pop rbx; and eax, 0x7ff80000; ret; 
0x000000000044006a: add al, 0x17; lea rdx, [rip + 0x5830d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9fa: add al, 0x17; lea rdx, [rip + 0x5997d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce4a: add al, 0x17; lea rdx, [rip + 0x5b52d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043acfa: add al, 0x17; lea rdx, [rip + 0x5d67d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000425c41: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425bda: add al, 0x17; sub eax, ecx; ret; 
0x0000000000486c30: add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048ac67: add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a96b: add al, 0x24; add rsp, 0x38; ret; 
0x000000000048a962: add al, 0x24; call 0x8ace0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000489bb6: add al, 0x24; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489b64: add al, 0x24; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000413f84: add al, 0x24; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000045ab8a: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045ac69: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5ac76; add rsp, 0x18; ret; 
0x000000000048421b: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8425e; leave; ret; 
0x000000000040e9d7: add al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x00000000004733ce: add al, 0x31; ret; 
0x00000000004732ca: add al, 0x37; ret; 
0x000000000048473e: add al, 0x38; mov rdi, rdx; mov byte ptr [rsi], al; jne 0x84720; mov rax, rsi; ret; 
0x00000000004179af: add al, 0x3a; ret; 
0x000000000044d450: add al, 0x48; cmp eax, 0x16; ja 0x4d4a0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000047f8f6: add al, 0x48; cmp ecx, dword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x000000000044477b: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000443c89: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000443c9b: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x000000000048d170: add al, 0x48; mov dword ptr [rax], edx; ret; 
0x000000000043538a: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000047f8a4: add al, 0x48; mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004424c9: add al, 0x48; mov eax, edi; ret; 
0x0000000000435383: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044bf34: add al, 0x48; mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000475385: add al, 0x48; sub esp, 0x80; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x00000000004736a4: add al, 0x48; xor eax, eax; ret; 
0x000000000047e686: add al, 0x4c; cmp ecx, eax; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000473f68: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000443c97: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000004424d7: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000457872: add al, 0x72; adc ecx, dword ptr [rcx + 0x29d231fb]; ret; 
0x00000000004384f7: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000447c8d: add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x000000000047bb43: add al, 0x74; or bh, bh; and eax, 0x23e6d4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x00000000004244f0: add al, 0x74; sbb eax, 0x8d48c085; adc eax, 0x23834; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x00000000004b138c: add al, 0x74; cli; jmp rax; 
0x000000000046ea88: add al, 0x81; add rax, rcx; jmp rax; 
0x000000000043d0fb: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043e9d3: add al, 0x81; sub eax, edx; ret; 
0x0000000000401f97: add al, 0x82; add rax, rdx; jmp rax; 
0x000000000043ad07: add al, 0x82; sub eax, ecx; ret; 
0x0000000000448ac6: add al, 0x83; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d459: add al, 0x83; add rax, rbx; jmp rax; 
0x00000000004021f1: add al, 0x83; call 0xaf8a4fb; ja 0x1e5f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000400b8b: add al, 0x83; jge 0xb8b; adc dword ptr [rsi - 0x24], edi; nop; pop rbp; ret; 
0x00000000004af85c: add al, 0x83; stc; call qword ptr [rdx]; 
0x000000000048c00a: add al, 0x84; add rax, r12; jmp rax; 
0x0000000000466bc9: add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x000000000048c90b: add al, 0x86; add rax, r14; jmp rax; 
0x000000000046e91c: add al, 0x86; add rax, rsi; jmp rax; 
0x000000000048afb9: add al, 0x87; add rax, r15; jmp rax; 
0x000000000046f0b8: add al, 0x87; add rax, rdi; jmp rax; 
0x0000000000443c86: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004424c6: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x00000000004b3f20: add al, 0x88; add byte ptr [rax], al; fmul st(2), st(0); cld; call rdx; 
0x000000000048ad93: add al, 0x88; add rax, r8; jmp rax; 
0x000000000047b5ce: add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000448123: add al, 0x96; add rax, rsi; jmp rax; 
0x000000000048c543: add al, 0x99; add rax, r9; jmp rax; 
0x00000000004491e5: add al, 0x9a; add rax, rdx; jmp rax; 
0x000000000047c09f: add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000047c9c7: add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000000448069: add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000040d2af: add al, 0xc3; ja 0xd935; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000046bc9d: add al, 0xc6; jmp rax; 
0x0000000000460e62: add al, 0xc6; mov esi, 1; jmp rax; 
0x00000000004614ba: add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000460e18: add al, 0xc7; jmp rax; 
0x000000000046bcd8: add al, 0xc8; mov ecx, 1; jmp rax; 
0x0000000000462ff9: add al, 0xd1; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045dc67: add al, 0xd8; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004194f9: add al, 0xe8; or dword ptr [rdi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000459161: add al, 0xe8; test rax, rax; je 0x5916a; call rax; 
0x0000000000459156: add al, 0xeb; lea rax, [rip + 0x25fae1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x0000000000484c28: add al, 0xf; mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042a226: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042bef6: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000446b7b: add al, 0xf; sub rax, rsi; ret; 
0x00000000004356f3: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000044985b: add al, 0xf3; ret; 
0x000000000048d169: add al, 0xf7; cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x00000000004608ce: add al, 0xf8; jmp rax; 
0x00000000004946e9: add al, 0xfa; call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; 
0x00000000004946e9: add al, 0xfa; call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x00000000004946a5: add al, 0xfa; call qword ptr [rax + 4]; 
0x0000000000494725: add al, 0xfa; jmp qword ptr [rdx]; 
0x00000000004948a5: add al, 0xfa; jmp rax; 
0x0000000000494865: add al, 0xfa; push rax; add edi, edx; jmp qword ptr [rax + 3]; 
0x000000000044ffb0: add al, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x00000000004b473d: add al, 0xfd; jmp qword ptr [rdx]; 
0x000000000040eff7: add al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047f8a7: add al, 2; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000042d4c7: add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004633e8: add al, 4; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000463411: add al, 4; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x00000000004b473c: add al, 4; std; jmp qword ptr [rdx]; 
0x0000000000434027: add al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004614af: add al, 6; lea rsi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e57: add al, 6; lea rsi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004400ed: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044054e: add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000460e0d: add al, 7; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046bc99: add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000440308: add al, 7; ret; 
0x0000000000425daf: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004b20fb: add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004b2cfb: add al, ah; jne 0xb2cff; add al, al; or edi, esp; jmp qword ptr [rax]; 
0x00000000004b3b1f: add al, ah; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004b53df: add al, al; jns 0xb53e0; jmp qword ptr [rsi]; 
0x00000000004b2cff: add al, al; or edi, esp; jmp qword ptr [rax]; 
0x000000000049f0a7: add al, al; sldt word ptr [rax]; ret; 
0x00000000004b0a6f: add al, al; cli; std; jmp qword ptr [rdx]; 
0x00000000004ae063: add al, bh; add byte ptr [rax], al; add byte ptr [rcx + rbp], cl; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x00000000004b0013: add al, bh; add byte ptr [rax], al; js 0xaffbf; stc; jmp qword ptr [rcx]; 
0x00000000004af513: add al, bh; cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x00000000004481b5: add al, bh; jg 0x481b0; int1; mov eax, eax; ret; 
0x00000000004b3113: add al, bh; jns 0xb3117; add al, bl; and edi, esp; jmp qword ptr [rcx]; 
0x00000000004b1113: add al, bh; pop rcx; add byte ptr [rax], al; sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x00000000004b5a67: add al, bh; cdq; std; call qword ptr [rdx]; 
0x00000000004af5b7: add al, bl; adc al, 0xf9; call qword ptr [rax + 1]; 
0x00000000004b3117: add al, bl; and edi, esp; jmp qword ptr [rcx]; 
0x00000000004b51d7: add al, bl; pop rsp; std; jmp qword ptr [rcx]; 
0x00000000004abbc7: add al, bl; xchg esp, eax; cmc; call qword ptr [rdx]; 
0x00000000004b2767: add al, bl; sti; jmp qword ptr [rbx]; 
0x0000000000440ce1: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x0000000000453cef: add al, byte ptr [rax]; add al, ch; fdivp st(2); jmp qword ptr [rsi + 0xf]; 
0x000000000040107b: add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047af00: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000004551ad: add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045f753: add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000048805e: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; ret 0x3a83; 
0x000000000042b122: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000045ac1d: add al, byte ptr [rax]; add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x0000000000468a94: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000423363: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x0000000000401065: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004491d9: add al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x4c399; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000047c27a: add al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004783b5: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004476a4: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047b601: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000042166a: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000045494b: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042adf7: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e791: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ae25: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045ab12: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000484458: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000484661: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000047db76: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000044a639: add al, byte ptr [rax]; add byte ptr [rax], al; jmp rax; 
0x000000000040dc1c: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000474614: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000446124: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000410b46: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000485964: add al, byte ptr [rax]; add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x00000000004111ad: add al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004633af: add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000041ad36: add al, byte ptr [rax]; add dh, dh; ret; 
0x0000000000424363: add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x00000000004237d3: add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000004247a0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000423840: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x0000000000424770: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x0000000000424380: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727e0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bf0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727b0: add al, byte ptr [rax]; cmp eax, 0xc00; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x00000000004246e5: add al, byte ptr [rax]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004245a5: add al, byte ptr [rax]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000424445: add al, byte ptr [rax]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000042474c: add al, byte ptr [rax]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x000000000042460c: add al, byte ptr [rax]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244ac: add al, byte ptr [rax]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000042472b: add al, byte ptr [rax]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245eb: add al, byte ptr [rax]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x000000000042448b: add al, byte ptr [rax]; lea rax, [rip + 0x2316c]; cmovne rax, rdx; ret; 
0x00000000004237cc: add al, byte ptr [rax]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x00000000004244fa: add al, byte ptr [rax]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000042454b: add al, byte ptr [rax]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000047d755: add al, byte ptr [rax]; mov eax, 0x15; syscall; 
0x0000000000423707: add al, byte ptr [rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000480fac: add al, byte ptr [rax]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000045874f: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047c09b: add al, byte ptr [rax]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047c9c3: add al, byte ptr [rax]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x0000000000484daa: add al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000048ad8c: add al, byte ptr [rax]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000044af15: add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x0000000000487cfa: add al, byte ptr [rbx - 0x6f990049]; add rsp, 8; ret; 
0x000000000044bd6e: add al, byte ptr [rcx + 0x39]; ret; 
0x000000000045f02c: add al, byte ptr [rcx - 5]; jg 0x5f043; test byte ptr [rip - 0x7c000011], al; ret; 
0x000000000048506a: add al, byte ptr [rcx]; add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004b42c4: add al, byte ptr [rdi + 0x45080e0a]; or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x20b40000], dh; cld; call qword ptr [rdi + 1]; 
0x00000000004747f6: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x74820; ret; 
0x00000000004abf7d: add al, byte ptr [rdx]; ret 0xb00e; 
0x000000000048454e: add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x00000000004341a7: add al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000424731: add al, byte ptr cs:[rax]; cmovne rax, rdx; ret; 
0x000000000047b62a: add al, ch; adc byte ptr [rbp - 8], ah; call qword ptr [rbp + 0x53]; 
0x000000000041ec0b: add al, ch; call rax; 
0x00000000004ac467: add al, ch; cmp esi, esi; call qword ptr [rax]; 
0x000000000044e85e: add al, ch; fdiv qword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000453ef1: add al, ch; fdiv st(2), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000453cf1: add al, ch; fdivp st(2); jmp qword ptr [rsi + 0xf]; 
0x000000000045ea5c: add al, ch; fidiv word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004557d1: add al, ch; imul eax, ebx, 0x8941fffa; ret 0x5be9; 
0x00000000004620b4: add al, ch; jbe 0x620bf; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000458eb0: add al, ch; jno 0x58e6f; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a51d: add al, ch; lea esp, [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045578e: add al, ch; lodsb al, byte ptr [rsi]; ret; 
0x0000000000454e7c: add al, ch; mov esi, 0x89fffacc; ret 0xe283; 
0x000000000045aacc: add al, ch; outsb dx, byte ptr [rsi]; jo 0x5aacb; jmp qword ptr [rsi + 0x2e]; 
0x0000000000487b6b: add al, ch; pop qword ptr [rdi + rsi*4 - 0x3b7cb701]; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004866df: add al, ch; pop rbx; mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x000000000046faab: add al, ch; pop rdi; ret 0xfffd; 
0x00000000004491ae: add al, ch; pop rsp; cmp byte ptr [rcx], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004794d0: add al, ch; push -0x7a; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000044b9d0: add al, ch; push 0x61; sti; jmp qword ptr [rsi + 0x2e]; 
0x00000000004524e9: add al, ch; push rcx; idiv dl; inc dword ptr [rcx - 0x77]; ret; 
0x000000000048c118: add al, ch; push rdx; sbb edi, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000421148: add al, ch; ret 0x2ab; 
0x000000000041e348: add al, ch; ret 0x2d9; 
0x000000000040e948: add al, ch; ret 0x3d3; 
0x000000000047af38: add al, ch; ret 0xb850; 
0x0000000000485cd8: add al, ch; ret 0xffc7; 
0x00000000004af2e7: add al, ch; ret 0xfff7; 
0x000000000040154f: add al, ch; sub eax, dword ptr [rsp + rax - 0x77d00]; je 0x162b; add rsp, 0x98; ret; 
0x000000000041f677: add al, ch; ret; 
0x000000000045576f: add al, ch; retf; ret; 
0x00000000004ac417: add al, cl; cmp dh, dh; jmp qword ptr [rcx + 1]; 
0x00000000004af2e3: add al, cl; cmp eax, dword ptr [rax]; add al, ch; ret 0xfff7; 
0x00000000004ac0e3: add al, cl; or dword ptr [rax], eax; add byte ptr [rax], ch; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004b2b37: add al, cl; cld; sti; jmp qword ptr [rsi]; 
0x00000000004b47e3: add al, cl; nop; add byte ptr [rax], al; test al, 5; std; jmp rdx; 
0x00000000004b3abf: add al, dh; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x00000000004af4eb: add al, dl; cmp eax, 0xd9900000; clc; call qword ptr [rax]; 
0x0000000000495e5f: add al, dl; imul edi, ebx, -1; hlt; push 0x6bb0fffb; sti; jmp rax; 
0x00000000004b3fef: add al, dl; int 0xfc; jmp qword ptr [rsi]; 
0x00000000004b3feb: add al, dl; mov byte ptr [rax], al; add al, dl; int 0xfc; jmp qword ptr [rsi]; 
0x00000000004b4ceb: add al, dl; xchg ebp, eax; add byte ptr [rax], al; mov al, 0x2f; std; jmp qword ptr [rbp]; 
0x00000000004afcff: add al, dl; xchg edi, eax; stc; jmp qword ptr [rcx]; 
0x00000000004b3e5e: add bh, ah; ret; 
0x000000000048454c: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x000000000044e7ef: add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041f78f: add bh, al; add eax, 0x29c5d6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000047e994: add bh, al; test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000045eaa7: add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040eacf: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040107d: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000048582f: add bh, bh; ror dword ptr [rax - 0x77], cl; ret; 
0x0000000000484499: add bh, byte ptr [rax + 1]; ret; 
0x00000000004845f6: add bh, byte ptr [rax + 2]; ret; 
0x000000000044957b: add bh, byte ptr [rax - 1]; ret; 
0x000000000047f8a8: add bh, byte ptr [rdx]; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000400e4a: add bh, dh; ret 0; 
0x00000000004531a9: add bh, dh; ret 0xf800; 
0x000000000040f10f: add bh, dh; ret 0xffef; 
0x00000000004943b4: add bl, 0xf9; call rax; 
0x00000000004a4cff: add bl, ah; xchg ch, bh; call ptr [rax]; je 0xa4d04; call rax; 
0x0000000000489f8b: add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x000000000047062f: add bl, ch; nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000423df4: add bl, ch; or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*8 - 0x7cb7dd8c], al; ret 0x4801; 
0x000000000040f3a8: add bl, ch; ret 0x1f0f; 
0x000000000042b97d: add bl, ch; sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000448f93: add bl, ch; sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x00000000004234b4: add bl, ch; iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000485af9: add bl, ch; ret; 
0x000000000042b84f: add bl, dh; bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440b8f: add bl, dh; bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b83f: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044420f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044422f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004442af: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044426f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044428f: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004443af: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044434f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044436f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044438f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044487f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044488f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004441ff: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000494fc4: add bl, dh; cli; jmp qword ptr [rax]; 
0x0000000000400a6f: add bl, dh; ret; 
0x00000000004631bc: add bl, dl; stc; dec dword ptr [rax + 0x29]; ret; 
0x000000000044420e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000041b02e: add bl, sil; ret; 
0x000000000046c77a: add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000046be2c: add byte ptr [r11 - 0x78f0d008], r8b; mov ebx, 0x89000025; ret 0x349; 
0x000000000046b8de: add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x0000000000481580: add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x000000000044973c: add byte ptr [r8 + rsi - 0x77], sil; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000472846: add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000455355: add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x00000000004181fa: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000040e1ca: add byte ptr [r8 - 0x7d], r9b; ret; 
0x00000000004af859: add byte ptr [r8], al; add al, 0x83; stc; call qword ptr [rdx]; 
0x00000000004af8a9: add byte ptr [r8], al; and al, 0x83; stc; jmp rbx; 
0x00000000004afa31: add byte ptr [r8], al; lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004b00a9: add byte ptr [r8], al; xchg esp, eax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x00000000004b002d: add byte ptr [r8], al; nop; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004b044d: add byte ptr [r8], r8b; jo 0xb040c; stc; call qword ptr [rcx]; 
0x000000000047575b: add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000047563b: add byte ptr [r9 + rdi - 0x75], sil; add eax, 0x2471c7; test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x000000000044c013: add byte ptr [rax + 0x15], bh; syscall; 
0x000000000042345f: add byte ptr [rax + 0x16], bh; ret; 
0x00000000004acfa3: add byte ptr [rax + 0x18000018], cl; test dh, dh; call qword ptr [rdi]; 
0x00000000004494cf: add byte ptr [rax + 0x18], bh; syscall; 
0x00000000004494cf: add byte ptr [rax + 0x18], bh; syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x00000000004494ce: add byte ptr [rax + 0x18], dil; syscall; 
0x00000000004494ce: add byte ptr [rax + 0x18], dil; syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x000000000044a5bf: add byte ptr [rax + 0x1c], bh; syscall; 
0x000000000044a5bf: add byte ptr [rax + 0x1c], bh; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x00000000004b0e87: add byte ptr [rax + 0x20], bl; cli; call qword ptr [rdi]; 
0x000000000047f30f: add byte ptr [rax + 0x23d4b13d], al; add byte ptr [rax], al; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x00000000004adb63: add byte ptr [rax + 0x24], cl; add byte ptr [rax], al; pop rax; mov ah, 0xf6; call qword ptr [rdx]; 
0x000000000048851f: add byte ptr [rax + 0x26], bh; syscall; 
0x000000000048851f: add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x88530; ret; 
0x0000000000452931: add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000453497: add byte ptr [rax + 0x29], cl; ret 0x8348; 
0x0000000000465dd8: add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000476cb8: add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000047a88a: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000412160: add byte ptr [rax + 0x29], cl; ret; 
0x00000000004b336f: add byte ptr [rax + 0x2b], al; cld; call qword ptr [rax + 5]; 
0x00000000004b4c9f: add byte ptr [rax + 0x2e], ah; std; jmp qword ptr [rax + 1]; 
0x00000000004afecb: add byte ptr [rax + 0x30000047], dh; popfq; stc; call qword ptr [rbx]; 
0x00000000004235e0: add byte ptr [rax + 0x31], dl; shr al, 0x57; ret; 
0x00000000004b4eb7: add byte ptr [rax + 0x36], ch; std; jmp qword ptr [rcx]; 
0x000000000048af63: add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000041a03f: add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000041313f: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000048aff8: add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000047af02: add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x000000000041cf00: add byte ptr [rax + 0x39], cl; ret 0xf275; 
0x000000000047825e: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x0000000000447fa3: add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000447de0: add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x000000000040eaaf: add byte ptr [rax + 0x39], cl; ret; 
0x00000000004af673: add byte ptr [rax + 0x3f], bl; add byte ptr [rax], al; sub byte ptr [rdi - 7], dl; jmp qword ptr [rbx + 0x17]; 
0x00000000004adabb: add byte ptr [rax + 0x40000023], ah; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004af8bb: add byte ptr [rax + 0x41], ah; test cl, bh; call qword ptr [rdx]; 
0x00000000004af62f: add byte ptr [rax + 0x47], dh; stc; jmp qword ptr [rbx]; 
0x00000000004b2ab3: add byte ptr [rax + 0x48000073], bl; sti; sti; call qword ptr [rsi + 1]; 
0x0000000000449a06: add byte ptr [rax + 0x48], bh; syscall; 
0x000000000045147c: add byte ptr [rax + 0x4c], dl; mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004af49b: add byte ptr [rax + 0x5000003d], al; xchg esi, eax; clc; call qword ptr [rax]; 
0x00000000004b3bbb: add byte ptr [rax + 0x50000084], ah; mov bh, 0xfc; jmp qword ptr [rdx]; 
0x00000000004b0a6b: add byte ptr [rax + 0x53], dl; add byte ptr [rax], al; sar dl, 0xfd; jmp qword ptr [rdx]; 
0x00000000004b0e83: add byte ptr [rax + 0x57], ch; add byte ptr [rax], al; pop rax; and dl, bh; call qword ptr [rdi]; 
0x00000000004b516f: add byte ptr [rax + 0x59], dl; std; call qword ptr [rdx]; 
0x00000000004963f7: add byte ptr [rax + 0x5efffb70], ch; jae 0x963fa; jmp qword ptr [rsi]; 
0x00000000004b4c9b: add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x00000000004b1983: add byte ptr [rax + 0x62], ch; add byte ptr [rax], al; js 0xb193a; cli; call qword ptr [rax]; 
0x00000000004b196b: add byte ptr [rax + 0x62], dl; add byte ptr [rax], al; jo 0xb1922; cli; call qword ptr [rbx]; 
0x000000000040d2bd: add byte ptr [rax + 0x63], cl; adc al, 0x97; add rdx, rdi; jmp rdx; 
0x000000000046ea85: add byte ptr [rax + 0x63], cl; add al, 0x81; add rax, rcx; jmp rax; 
0x0000000000401f94: add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000046f0b5: add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x00000000004491e2: add byte ptr [rax + 0x63], cl; add al, 0x9a; add rax, rdx; jmp rax; 
0x0000000000448066: add byte ptr [rax + 0x63], cl; add al, 0xbe; add rax, rsi; jmp rax; 
0x000000000048ca33: add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000046f583: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x000000000045dbd1: add byte ptr [rax + 0x63], cl; ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x00000000004596b7: add byte ptr [rax + 0x63], cl; ret; 
0x000000000047551f: add byte ptr [rax + 0x66], bh; syscall; 
0x000000000047551f: add byte ptr [rax + 0x66], bh; syscall; ret; 
0x00000000004b4eb3: add byte ptr [rax + 0x68000097], bl; std; jmp qword ptr [rcx]; 
0x000000000047553f: add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047553f: add byte ptr [rax + 0x68], bh; syscall; ret; 
0x000000000047552f: add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000047552f: add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047554f: add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047554f: add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004b5bab: add byte ptr [rax + 0x700000a4], dl; popfq; std; jmp qword ptr [rcx]; 
0x00000000004b2763: add byte ptr [rax + 0x70], cl; add byte ptr [rax], al; fdiv st(2); sti; jmp qword ptr [rbx]; 
0x00000000004897a3: add byte ptr [rax + 0x74], ah; adc dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000440cdf: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000048d068: add byte ptr [rax + 0x75], al; adc al, 0x49; cmp dword ptr [rcx + 0x38], 0; je 0x8d090; add rsp, 0x18; ret; 
0x000000000048776f: add byte ptr [rax + 0x75], al; jge 0x877bc; cmp dword ptr [rip + 0x2317fd], 0; jne 0x8777f; pop rbx; ret; 
0x000000000044471f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004b336b: add byte ptr [rax + 0x7c], dl; add byte ptr [rax], al; sub edi, esp; call qword ptr [rax + 5]; 
0x000000000041104e: add byte ptr [rax + 0x7f741], dl; or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004af6a3: add byte ptr [rax + 0x800003f], cl; jae 0xaf6a4; call qword ptr [rdi]; 
0x000000000044a58f: add byte ptr [rax + 0xa], bh; syscall; 
0x000000000044a58f: add byte ptr [rax + 0xa], bh; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a55f: add byte ptr [rax + 0xb], bh; syscall; 
0x000000000044a55f: add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x000000000044bdf8: add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000044bd51: add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044bd51: add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000048d10f: add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000449244: add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000040dc1f: add byte ptr [rax + 0xe], bh; syscall; 
0x00000000004154bf: add byte ptr [rax + 0xf], al; mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000450b3f: add byte ptr [rax + 0xf], al; mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000473235: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000044fbcf: add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000047480f: add byte ptr [rax + 0xfe580f5], cl; je 0x74830; add rax, 2; ret; 
0x000000000046fc36: add byte ptr [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048445c: add byte ptr [rax + 1], bh; ret; 
0x000000000044991f: add byte ptr [rax + 1], bh; syscall; 
0x0000000000483668: add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000488060: add byte ptr [rax + 1], cl; ret 0x3a83; 
0x0000000000473941: add byte ptr [rax + 1], cl; clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b124: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000042b651: add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x00000000004110e2: add byte ptr [rax + 1], cl; ret; 
0x0000000000484665: add byte ptr [rax + 2], bh; ret; 
0x0000000000449bcf: add byte ptr [rax + 3], bh; syscall; 
0x000000000044994f: add byte ptr [rax + 8], bh; syscall; 
0x000000000044994e: add byte ptr [rax + 8], dil; syscall; 
0x0000000000481581: add byte ptr [rax + 9], cl; ret 0x840f; 
0x0000000000476140: add byte ptr [rax + 9], cl; ret 0x850f; 
0x0000000000484609: add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000049e04b: add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004b3b1c: add byte ptr [rax + rax - 0x3532000], al; jmp qword ptr [rsi + 7]; 
0x0000000000450423: add byte ptr [rax + rax*8 - 0x76b3178b], al; ret 0x294c; 
0x00000000004b4617: add byte ptr [rax + rax], ah; add byte ptr [rax], al; add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x00000000004b483f: add byte ptr [rax + rax], ah; add byte ptr [rax], al; sub byte ptr [rcx + 0x6980000], dl; std; jmp qword ptr [rbp]; 
0x000000000047259f: add byte ptr [rax + rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004243b4: add byte ptr [rax + rax], al; add byte ptr [rsi + riz - 9], dh; ret 0; 
0x00000000004ab8bf: add byte ptr [rax + rax], bh; add byte ptr [rax], al; test al, 1; add byte ptr [rax], al; sbb byte ptr [rcx - 0xb], ah; call qword ptr [rbx + 1]; 
0x00000000004af69f: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov byte ptr [rdi], bh; add byte ptr [rax], al; or byte ptr [rbx - 7], dh; call qword ptr [rdi]; 
0x00000000004addd3: add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov esp, 0xf5000026; cmc; call qword ptr [rsi]; 
0x00000000004b3fe7: add byte ptr [rax + rax], bl; add byte ptr [rax], al; ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x00000000004abbd3: add byte ptr [rax + rax], ch; add byte ptr [rax], al; mov esp, 0xe4000004; xchg esp, eax; cmc; call rsp; 
0x00000000004b4497: add byte ptr [rax + rax], ch; add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x00000000004b20f7: add byte ptr [rax + rax], cl; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004afec7: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x30000047], dh; popfq; stc; call qword ptr [rbx]; 
0x00000000004b2aaf: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x48000073], bl; sti; sti; call qword ptr [rsi + 1]; 
0x00000000004b4c97: add byte ptr [rax + rax], cl; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x00000000004247a3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000423843: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1d0a2; cmove rax, rdx; ret; 
0x0000000000424773: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x6c52; cmove rax, rdx; ret; 
0x0000000000424383: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x6d12; cmove rax, rdx; ret; 
0x00000000004727e3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0x9f2; cmove rax, rdx; ret; 
0x0000000000473bf3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000004727b3: add byte ptr [rax + rax], cl; add byte ptr [rax - 0x73], cl; add eax, 0xee2; cmove rax, rdx; ret; 
0x00000000004b3737: add byte ptr [rax + rax], cl; add byte ptr [rax], ah; add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x0000000000475921: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041dc0b: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000473c47: add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004b2b1c: add byte ptr [rax + rax], dh; mov al, 0xfc; sti; jmp qword ptr [rbx]; 
0x00000000004b2b17: add byte ptr [rax + rax], dl; add byte ptr [rax], al; add byte ptr [rax + rax], dh; mov al, 0xfc; sti; jmp qword ptr [rbx]; 
0x00000000004b2aff: add byte ptr [rax + rax], dl; add byte ptr [rax], al; call 0xffffffff980b2b7c; cld; sti; jmp qword ptr [rbx]; 
0x00000000004b51cf: add byte ptr [rax + rax], dl; add byte ptr [rax], al; mov eax, 0xd800009a; pop rsp; std; jmp qword ptr [rcx]; 
0x00000000004af12f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sbb byte ptr [rdx], bh; add byte ptr [rax], al; cmp byte ptr [rdx - 9], dl; jmp qword ptr [rbx]; 
0x00000000004af63f: add byte ptr [rax + rax], dl; add byte ptr [rax], al; sub byte ptr [rdi], bh; add byte ptr [rax], al; mov byte ptr [rbp - 7], cl; jmp qword ptr [rdi + 6]; 
0x00000000004b0447: add byte ptr [rax + rax], dl; add byte ptr [rax], al; xor byte ptr [rbp], cl; add byte ptr [rax - 0x46], dh; stc; call qword ptr [rcx]; 
0x00000000004af5af: add byte ptr [rax + rax], dl; add byte ptr [rax], al; cwde; add byte ptr ds:[rax], al; fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x0000000000490f46: add byte ptr [rax + rbp*8 + 0x48], dh; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004194f8: add byte ptr [rax + rbp*8], al; or dword ptr [rdi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045ab2d: add byte ptr [rax + rcx - 0xd], dh; ret; 
0x000000000045ac1f: add byte ptr [rax + rcx*2 - 0x77], ah; adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x00000000004b3f1f: add byte ptr [rax + rcx*4], al; add byte ptr [rax], al; fmul st(2), st(0); cld; call rdx; 
0x000000000049f1f7: add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x00000000004b4737: add byte ptr [rax + rdx*4], bl; add byte ptr [rax], al; add al, 4; std; jmp qword ptr [rdx]; 
0x00000000004b4ad3: add byte ptr [rax + rdx], ch; std; call qword ptr [rax]; 
0x000000000044973d: add byte ptr [rax + rsi - 0x77], dh; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004ac233: add byte ptr [rax + rsi - 0xa], cl; jmp qword ptr [rcx + 2]; 
0x00000000004b199b: add byte ptr [rax + rsi*4 - 6], dh; call qword ptr [rdx]; 
0x0000000000463d84: add byte ptr [rax - 0x15343], al; jmp qword ptr [rsi + 0xf]; 
0x000000000047b954: add byte ptr [rax - 0x168b7f80], 0x89; ret 0xeac1; 
0x000000000041d11f: add byte ptr [rax - 0x17], dl; ret; 
0x00000000004b43d7: add byte ptr [rax - 0x1e], bl; cld; call qword ptr [rdx]; 
0x00000000004b06e7: add byte ptr [rax - 0x26], bl; stc; jmp qword ptr [rax]; 
0x00000000004b51d3: add byte ptr [rax - 0x27ffff66], bh; pop rsp; std; jmp qword ptr [rcx]; 
0x00000000004af5b3: add byte ptr [rax - 0x27ffffc2], bl; adc al, 0xf9; call qword ptr [rax + 1]; 
0x00000000004abbc3: add byte ptr [rax - 0x27fffffc], ch; xchg esp, eax; cmc; call qword ptr [rdx]; 
0x0000000000473735: add byte ptr [rax - 0x2d], cl; cli; test rdx, rdx; je 0x737e0; bsf rax, rdx; ret; 
0x00000000004b20ff: add byte ptr [rax - 0x31], dl; sti; jmp qword ptr [rbx + 8]; 
0x0000000000484548: add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x0000000000471a98: add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000041870a: add byte ptr [rax - 0x39], cl; add eax, 0x2a3602; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044f3c1: add byte ptr [rax - 0x39], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004173e3: add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000041655f: add byte ptr [rax - 0x39], cl; push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040fc93: add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000046517b: add byte ptr [rax - 0x39], cl; ret 0xb2c8; 
0x000000000045d45f: add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000040dc47: add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x0000000000423365: add byte ptr [rax - 0x39], cl; ret 0xffdf; 
0x0000000000468105: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000047486f: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000047484f: add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000004748af: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000047485f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047489f: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045ad1f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000401067: add byte ptr [rax - 0x39], cl; ret; 
0x000000000048af58: add byte ptr [rax - 0x3f], cl; call 0xffffffff850bf89f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000048afed: add byte ptr [rax - 0x3f], cl; call 0xffffffff850bf934; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x0000000000458879: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x0000000000458850: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000004581b0: add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x000000000048450a: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004a288f: add byte ptr [rax - 0x45fffffc], bh; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004941c0: add byte ptr [rax - 0x462f0007], bh; stc; call rax; mov ebx, 0xbdd0fff9; stc; jmp qword ptr [rax - 0x50]; 
0x00000000004b044f: add byte ptr [rax - 0x46], dh; stc; call qword ptr [rcx]; 
0x00000000004b035f: add byte ptr [rax - 0x47], al; stc; jmp qword ptr [rcx]; 
0x00000000004af4c7: add byte ptr [rax - 0x48], ch; clc; call qword ptr [rax]; 
0x000000000048aa3f: add byte ptr [rax - 0x48], cl; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000004b3bbf: add byte ptr [rax - 0x49], dl; cld; jmp qword ptr [rdx]; 
0x000000000046155f: add byte ptr [rax - 0x4f743], al; jmp qword ptr [rax]; 
0x00000000004b1987: add byte ptr [rax - 0x50], bh; cli; call qword ptr [rax]; 
0x00000000004a39bf: add byte ptr [rax - 0x50], dh; cld; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax - 0x50]; 
0x00000000004b196f: add byte ptr [rax - 0x50], dh; cli; call qword ptr [rbx]; 
0x00000000004affff: add byte ptr [rax - 0x5b], ah; stc; jmp qword ptr [rcx]; 
0x00000000004b0017: add byte ptr [rax - 0x5b], bh; stc; jmp qword ptr [rcx]; 
0x00000000004b5a63: add byte ptr [rax - 0x5d], cl; add byte ptr [rax], al; clc; cdq; std; call qword ptr [rdx]; 
0x00000000004b39ff: add byte ptr [rax - 0x5d], dh; cld; jmp qword ptr [rsi + 5]; 
0x00000000004b2e9b: add byte ptr [rax - 0x5fffff89], al; adc al, 0xfc; jmp qword ptr [rax]; 
0x00000000004b5baf: add byte ptr [rax - 0x63], dh; std; jmp qword ptr [rcx]; 
0x00000000004b516b: add byte ptr [rax - 0x66], dl; add byte ptr [rax], al; push rax; pop rcx; std; call qword ptr [rdx]; 
0x0000000000460e08: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x00000000004614aa: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e52: add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460db7: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461166: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461118: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461069: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046100d: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d6d: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d1f: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608be: add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004af49f: add byte ptr [rax - 0x6a], dl; clc; call qword ptr [rax]; 
0x00000000004b4973: add byte ptr [rax - 0x6e], bl; add byte ptr [rax], al; sub byte ptr [rcx], cl; std; call qword ptr [rax]; 
0x0000000000493f88: add byte ptr [rax - 0x6f0f0007], dl; stc; call qword ptr [rsi]; 
0x00000000004b58ab: add byte ptr [rax - 0x6fffff5f], dl; mov bh, ch; jmp qword ptr [rbx]; 
0x00000000004ac1cb: add byte ptr [rax - 0x6ffffff6], dh; sub al, 0xf6; jmp qword ptr [rax]; 
0x00000000004b4673: add byte ptr [rax - 0x71], bl; add byte ptr [rax], al; cwde; std; cld; call qword ptr [rax]; 
0x000000000046f233: add byte ptr [rax - 0x73], cl; adc eax, 0x34b2d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004491db: add byte ptr [rax - 0x73], cl; adc eax, 0x4c399; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000042316c: add byte ptr [rax - 0x73], cl; adc eax, 0x70bfc; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473c62: add byte ptr [rax - 0x73], cl; adc eax, 0xfffd41d6; cmove rax, rdx; ret; 
0x0000000000473f64: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x000000000047b5cb: add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004400ea: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000045514a: add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x00000000004572cd: add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004247a6: add byte ptr [rax - 0x73], cl; add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000423846: add byte ptr [rax - 0x73], cl; add eax, 0x1d0a2; cmove rax, rdx; ret; 
0x00000000004246e6: add byte ptr [rax - 0x73], cl; add eax, 0x22732; cmovne rax, rdx; ret; 
0x00000000004245a6: add byte ptr [rax - 0x73], cl; add eax, 0x22862; cmovne rax, rdx; ret; 
0x0000000000424446: add byte ptr [rax - 0x73], cl; add eax, 0x229d2; cmovne rax, rdx; ret; 
0x000000000042474d: add byte ptr [rax - 0x73], cl; add eax, 0x22a7b; cmovne rax, rdx; ret; 
0x000000000042460d: add byte ptr [rax - 0x73], cl; add eax, 0x22bab; cmovne rax, rdx; ret; 
0x00000000004244ad: add byte ptr [rax - 0x73], cl; add eax, 0x22d1b; cmovne rax, rdx; ret; 
0x000000000042472c: add byte ptr [rax - 0x73], cl; add eax, 0x22ecc; cmovne rax, rdx; ret; 
0x00000000004245ec: add byte ptr [rax - 0x73], cl; add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x000000000042448c: add byte ptr [rax - 0x73], cl; add eax, 0x2316c; cmovne rax, rdx; ret; 
0x00000000004237cd: add byte ptr [rax - 0x73], cl; add eax, 0x231db; cmovne rax, rdx; ret; 
0x00000000004848ef: add byte ptr [rax - 0x73], cl; add eax, 0x237789; mov qword ptr [rip + 0x23776a], rax; ret; 
0x00000000004244fb: add byte ptr [rax - 0x73], cl; add eax, 0x237dd; cmovne rax, rdx; ret; 
0x000000000042454c: add byte ptr [rax - 0x73], cl; add eax, 0x2390c; cmovne rax, rdx; ret; 
0x000000000044d34f: add byte ptr [rax - 0x73], cl; add eax, 0x26cfa9; ret; 
0x000000000048506d: add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x0000000000424776: add byte ptr [rax - 0x73], cl; add eax, 0x6c52; cmove rax, rdx; ret; 
0x0000000000424386: add byte ptr [rax - 0x73], cl; add eax, 0x6d12; cmove rax, rdx; ret; 
0x00000000004727e6: add byte ptr [rax - 0x73], cl; add eax, 0x9f2; cmove rax, rdx; ret; 
0x0000000000473bf6: add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000004727b6: add byte ptr [rax - 0x73], cl; add eax, 0xee2; cmove rax, rdx; ret; 
0x0000000000473c55: add byte ptr [rax - 0x73], cl; add eax, 0xfffd4063; cmp edx, 0x1000; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x000000000041f76f: add byte ptr [rax - 0x73], cl; add eax, 0xffffeb69; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f77d: add byte ptr [rax - 0x73], cl; add eax, 0xfffff58b; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x00000000004572eb: add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457309: add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000047c9bd: add byte ptr [rax - 0x73], cl; cmp eax, 0x283d3; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000040ec1b: add byte ptr [rax - 0x73], cl; cmp eax, 0x83fea; mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000040d2b6: add byte ptr [rax - 0x73], cl; cmp eax, 0x854a2; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000477f06: add byte ptr [rax - 0x73], cl; dec dword ptr [rax - 0x7d]; ret; 
0x000000000047c095: add byte ptr [rax - 0x73], cl; or eax, 0x28c63; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046ea7e: add byte ptr [rax - 0x73], cl; or eax, 0x3509e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000042a21e: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000479a82: add byte ptr [rax - 0x73], cl; push 0x48b4901; and al, 0x83; ret; 
0x000000000041c39a: add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000041e9af: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041ace8: add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000400c01: add byte ptr [rax - 0x73], cl; ror byte ptr [r8 - 0x77], 0xc7; call 0xb5d; mov eax, 0; leave; ret; 
0x00000000004718f4: add byte ptr [rax - 0x73], cl; test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000046b77b: add byte ptr [rax - 0x73], cl; xor eax, 0x24b69d; jmp rax; 
0x000000000044805f: add byte ptr [rax - 0x73], cl; xor eax, 0x4d079; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x000000000047c27c: add byte ptr [rax - 0x75], cl; adc byte ptr [r8 - 0x7d], cl; ret; 
0x00000000004197df: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000485e37: add byte ptr [rax - 0x75], cl; adc cl, byte ptr [rcx + 0x48b48d8]; ret 0x8b48; 
0x0000000000401181: add byte ptr [rax - 0x75], cl; adc eax, 0x2bac1f; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000048ac64: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a968: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000460e5f: add byte ptr [rax - 0x75], cl; add al, 0xc6; mov esi, 1; jmp rax; 
0x00000000004614b7: add byte ptr [rax - 0x75], cl; add al, 0xc6; xor esi, esi; jmp rax; 
0x0000000000460e15: add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x000000000046bcd5: add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x000000000045915e: add byte ptr [rax - 0x75], cl; add al, 0xe8; test rax, rax; je 0x5916a; call rax; 
0x000000000048d166: add byte ptr [rax - 0x75], cl; add al, 0xf7; cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x00000000004608cb: add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000443d3f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000044240f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000047f37f: add byte ptr [rax - 0x75], cl; add eax, 0x239d69; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x00000000004579cf: add byte ptr [rax - 0x75], cl; add eax, 0x2644a1; ret; 
0x000000000044f46f: add byte ptr [rax - 0x75], cl; add eax, 0x26d4b1; ret; 
0x000000000041860f: add byte ptr [rax - 0x75], cl; add eax, 0x2a0b09; ret; 
0x000000000040df6b: add byte ptr [rax - 0x75], cl; and al, 8; call rax; 
0x0000000000400b7a: add byte ptr [rax - 0x75], cl; call 0xffffffffc7d00ccb; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x0000000000465055: add byte ptr [rax - 0x75], cl; cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000044e8af: add byte ptr [rax - 0x75], cl; cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000401188: add byte ptr [rax - 0x75], cl; je 0x11b1; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000042283f: add byte ptr [rax - 0x75], cl; je 0x22868; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000047f4bf: add byte ptr [rax - 0x75], cl; je 0x7f4e8; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000458ebf: add byte ptr [rax - 0x75], cl; jl 0x58ee8; sbb al, ch; xchg esi, eax; jno 0x58ec5; jmp qword ptr [rsi + 0xf]; 
0x000000000045b5bb: add byte ptr [rax - 0x75], cl; jl 0x5b5e4; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000040ea02: add byte ptr [rax - 0x75], cl; js 0xea27; call rdx; 
0x0000000000491757: add byte ptr [rax - 0x75], cl; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000471e9f: add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000042fbff: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fdff: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004917a6: add byte ptr [rax - 0x75], cl; or byte ptr [r8 + 0x7a840f01], bpl; add eax, 0x89490000; ret 0x8349; 
0x0000000000478caf: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x0000000000481a3f: add byte ptr [rax - 0x75], cl; or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000486b80: add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400f2d: add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000412da1: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x000000000043530f: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000434b4f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434abf: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434d5f: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000042f2af: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004691f3: add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000042f46f: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000047f216: add byte ptr [rax - 0x75], cl; xor eax, 0x23d192; jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000044a79c: add byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x75]; jl 0x4a7c8; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x000000000042f82f: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa0f: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042ffff: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000041227f: add byte ptr [rax - 0x76b80000], al; ret; 
0x00000000004186a0: add byte ptr [rax - 0x77], cl; adc eax, 0x2a3670; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000048a95f: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0x8ace0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000004848f6: add byte ptr [rax - 0x77], cl; add eax, 0x23776a; ret; 
0x00000000004848db: add byte ptr [rax - 0x77], cl; add eax, 0x237785; add rsp, 8; ret; 
0x000000000047f2df: add byte ptr [rax - 0x77], cl; add eax, 0x23d0c9; add rsp, 8; ret; 
0x000000000041917d: add byte ptr [rax - 0x77], cl; add eax, 0x2a0663; ret; 
0x000000000041915d: add byte ptr [rax - 0x77], cl; add eax, 0x2a067b; ret; 
0x000000000047e43f: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7dd70; add rsp, 0xd8; ret; 
0x000000000041075d: add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000413ce5: add byte ptr [rax - 0x77], cl; call 0x5c429a48; ret; 
0x000000000047e381: add byte ptr [rax - 0x77], cl; call 0x5c4940e4; pop r13; ret; 
0x000000000047fb00: add byte ptr [rax - 0x77], cl; call 0x5c495863; ret; 
0x000000000047fb1d: add byte ptr [rax - 0x77], cl; call 0x5c495880; ret; 
0x000000000047fb5a: add byte ptr [rax - 0x77], cl; call 0x5c4958bd; ret; 
0x000000000041352d: add byte ptr [rax - 0x77], cl; call 0xfffffffffffd0d1e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000414663: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000488415: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000004884fc: add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000412487: add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x00000000004582e5: add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000455356: add byte ptr [rax - 0x77], cl; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000045e637: add byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000411764: add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000471ff4: add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x000000000048b40e: add byte ptr [rax - 0x77], cl; fucompi st(1); ret; 
0x00000000004181fb: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x0000000000401811: add byte ptr [rax - 0x77], cl; jbe 0x1826; syscall; 
0x000000000044bfbf: add byte ptr [rax - 0x77], cl; jo 0x4bfe4; ret; 
0x0000000000412a53: add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000041dccf: add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000004234bf: add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000041106e: add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004493db: add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x000000000041dbb7: add byte ptr [rax - 0x77], cl; ret 0x2948; 
0x00000000004111b6: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000041308a: add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x000000000048e7dc: add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x0000000000449487: add byte ptr [rax - 0x77], cl; ret 0x6ae9; 
0x0000000000402e0e: add byte ptr [rax - 0x77], cl; ret 0x7ce9; 
0x000000000045fc88: add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000041ae6c: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000402b8f: add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000410148: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004491b3: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000048df2f: add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x00000000004563b8: add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x00000000004031a3: add byte ptr [rax - 0x77], cl; ret 0xc031; 
0x000000000046a2c7: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000040f3dd: add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x00000000004147e8: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004493f2: add byte ptr [rax - 0x77], cl; ret 0xffe9; 
0x000000000042a28c: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000043d4d4: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x0000000000446f00: add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000481b71: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000048cb4f: add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x000000000048f54d: add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x22ce3005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f43d: add byte ptr [rax - 0x77], cl; sub byte ptr [rbx + 0x22cf4005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000047b603: add byte ptr [rax - 0x77], cl; xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x0000000000480fad: add byte ptr [rax - 0x77], cl; xchg r8d, eax; mov eax, 0x15; syscall; 
0x0000000000454168: add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000412902: add byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000400b83: add byte ptr [rax - 0x77], cl; hlt; ret; 
0x000000000040389f: add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ac1a3: add byte ptr [rax - 0x77fffff6], cl; sub al, 0xf6; call qword ptr [rax]; 
0x000000000048aa46: add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x00000000004af937: add byte ptr [rax - 0x7b], ch; stc; call qword ptr [rbx]; 
0x000000000047369f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x00000000004900aa: add byte ptr [rax - 0x7b], cl; fisttp dword ptr [rax - 0x77]; sbb eax, 0x22bc3b; jne 0x90098; pop rbx; ret; 
0x00000000004718fb: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044bcff: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000479907: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg ebp, eax; ret 0xc283; 
0x00000000004100ba: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046d26d: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000400a95: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax + rax]; pop rbp; ret; 
0x000000000044ce13: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000048d1ef: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000400ad7: add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x000000000040040a: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000486c28: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048aedf: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e07f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eedf: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f94f: add byte ptr [rax - 0x7c], al; push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x000000000048ec8e: add byte ptr [rax - 0x7d], cl; and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000047fbdf: add byte ptr [rax - 0x7d], cl; call 0x7c9343e8; ret; 
0x000000000041fb6c: add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041284f: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2a6750; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000403897: add byte ptr [rax - 0x7d], cl; cmp eax, 0x2b56c0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048a771: add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000416a3f: add byte ptr [rax - 0x7d], cl; jg 0x16a7c; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x000000000045715a: add byte ptr [rax - 0x7d], cl; jl 0x57183; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x000000000041eff2: add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004718b6: add byte ptr [rax - 0x7d], cl; js 0x718eb; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000004465ef: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000044c367: add byte ptr [rax - 0x7d], cl; ret 0x4101; 
0x000000000046f0c7: add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000040f22f: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000456014: add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x00000000004858af: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000047db7a: add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000045dbb4: add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x000000000042a2b9: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041e647: add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000048df0f: add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x000000000046f2a8: add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x0000000000424110: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043d273: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a2e7: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047de37: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000425cef: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x00000000004737df: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000489512: add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000401ac9: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004619c3: add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000447b9d: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447bed: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000405faf: add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041e341: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x2d9; 
0x000000000040e941: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x3d3; 
0x000000000041f670: add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000045ab14: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000432f1b: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004b55ff: add byte ptr [rax - 0x80], ah; std; call qword ptr [rdx + 1]; 
0x000000000048ad6f: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000048e097: add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x74]; 
0x000000000048e03f: add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004b1847: add byte ptr [rax - 0xb], ch; std; call rdx; 
0x00000000004895ef: add byte ptr [rax - 0xe217], al; jmp qword ptr [rsi + 0x2e]; 
0x00000000004b134f: add byte ptr [rax - 0xe], dh; std; jmp qword ptr [rdi]; 
0x00000000004b3abb: add byte ptr [rax - 0xfffff7d], ah; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x000000000045c7cd: add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c1a: add byte ptr [rax - 1], bh; ret; 
0x00000000004b2ab7: add byte ptr [rax - 5], cl; sti; call qword ptr [rsi + 1]; 
0x00000000004b373d: add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x000000000041ec08: add byte ptr [rax], 0; add al, ch; call rax; 
0x000000000046faa8: add byte ptr [rax], 0; add al, ch; pop rdi; ret 0xfffd; 
0x0000000000421145: add byte ptr [rax], 0; add al, ch; ret 0x2ab; 
0x000000000041e345: add byte ptr [rax], 0; add al, ch; ret 0x2d9; 
0x000000000040e945: add byte ptr [rax], 0; add al, ch; ret 0x3d3; 
0x000000000041f674: add byte ptr [rax], 0; add al, ch; ret; 
0x000000000041598a: add byte ptr [rax], 0; add bl, dh; ret; 
0x0000000000447ddd: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x000000000041869d: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; adc eax, 0x2a3670; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041352a: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd0d1e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004147e5: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000042b34b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b36b: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000048851b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x000000000044991b: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 1; syscall; 
0x00000000004356fb: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004579cb: add byte ptr [rax], 0; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2644a1]; ret; 
0x000000000043553b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004441fb: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004480eb: add byte ptr [rax], 0; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x000000000043584b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004357db: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042bf7b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044984b: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; syscall; 
0x00000000004acc74: add byte ptr [rax], 0; add byte ptr [rbp + rdx], bl; add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x0000000000475346: add byte ptr [rax], 0; add byte ptr [rbx + 0x31d2313b], cl; imul al; sti; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000465f09: add byte ptr [rax], 0; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000041a87b: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044bd1c: add byte ptr [rax], 0; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000040ece1: add byte ptr [rax], 0; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000447edf: add byte ptr [rax], 0; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447e7f: add byte ptr [rax], 0; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004347a3: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000042c4e1: add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004b373b: add byte ptr [rax], ah; add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x00000000004ada8f: add byte ptr [rax], ah; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004afa2e: add byte ptr [rax], al; adc al, 0x43; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004ac22e: add byte ptr [rax], al; adc al, 0xb; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x00000000004af52a: add byte ptr [rax], al; adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x00000000004adbfe: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; call 0x480adc2d; mov ch, 0xf6; call qword ptr [rsi]; 
0x00000000004af496: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [rip - 0x69b00000], 0xf8; call qword ptr [rax]; 
0x00000000004acbd2: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; mov esp, 0x4000014; push -0xa; call qword ptr [rax]; 
0x00000000004b56d6: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; rcr byte ptr [rdi - 0x7af00000], 0xfd; call qword ptr [rbx]; 
0x00000000004af4e6: add byte ptr [rax], al; adc byte ptr [rax], al; add byte ptr [rax], al; sar byte ptr [rip - 0x26700000], 1; clc; call qword ptr [rax]; 
0x000000000048446e: add byte ptr [rax], al; adc byte ptr [rax], al; or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x00000000004b4c9a: add byte ptr [rax], al; adc byte ptr [rbp + 0x2e600000], 0xfd; jmp qword ptr [rax + 1]; 
0x00000000004b373e: add byte ptr [rax], al; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x00000000004b282a: add byte ptr [rax], al; adc byte ptr [rcx], dh; add byte ptr [rax], al; cmc; sti; jmp qword ptr [rdx]; 
0x00000000004af62a: add byte ptr [rax], al; adc byte ptr [rdi], bh; add byte ptr [rax], al; jo 0xaf679; stc; jmp qword ptr [rbx]; 
0x00000000004b449e: add byte ptr [rax], al; adc dl, ch; cld; jmp qword ptr [rcx]; 
0x00000000004af7dd: add byte ptr [rax], al; add ah, al; add byte ptr [rax], al; sub al, 0x7a; stc; call rsp; 
0x00000000004adc15: add byte ptr [rax], al; add ah, bh; and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x00000000004b138a: add byte ptr [rax], al; add al, 0x74; cli; jmp rax; 
0x00000000004af85a: add byte ptr [rax], al; add al, 0x83; stc; call qword ptr [rdx]; 
0x00000000004b3f1e: add byte ptr [rax], al; add al, 0x88; add byte ptr [rax], al; fmul st(2), st(0); cld; call rdx; 
0x00000000004194f7: add byte ptr [rax], al; add al, 0xe8; or dword ptr [rdi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004b473a: add byte ptr [rax], al; add al, 4; std; jmp qword ptr [rdx]; 
0x00000000004b20f9: add byte ptr [rax], al; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004b2cf9: add byte ptr [rax], al; add al, ah; jne 0xb2cff; add al, al; or edi, esp; jmp qword ptr [rax]; 
0x00000000004b0011: add byte ptr [rax], al; add al, bh; add byte ptr [rax], al; js 0xaffbf; stc; jmp qword ptr [rcx]; 
0x00000000004af511: add byte ptr [rax], al; add al, bh; cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x00000000004b3111: add byte ptr [rax], al; add al, bh; jns 0xb3117; add al, bl; and edi, esp; jmp qword ptr [rcx]; 
0x00000000004b1111: add byte ptr [rax], al; add al, bh; pop rcx; add byte ptr [rax], al; sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x000000000041ec09: add byte ptr [rax], al; add al, ch; call rax; 
0x000000000044e85c: add byte ptr [rax], al; add al, ch; fdiv qword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a51b: add byte ptr [rax], al; add al, ch; lea esp, [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004866dd: add byte ptr [rax], al; add al, ch; pop rbx; mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x000000000046faa9: add byte ptr [rax], al; add al, ch; pop rdi; ret 0xfffd; 
0x000000000044b9ce: add byte ptr [rax], al; add al, ch; push 0x61; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000421146: add byte ptr [rax], al; add al, ch; ret 0x2ab; 
0x000000000041e346: add byte ptr [rax], al; add al, ch; ret 0x2d9; 
0x000000000040e946: add byte ptr [rax], al; add al, ch; ret 0x3d3; 
0x0000000000485cd6: add byte ptr [rax], al; add al, ch; ret 0xffc7; 
0x000000000040154d: add byte ptr [rax], al; add al, ch; sub eax, dword ptr [rsp + rax - 0x77d00]; je 0x162b; add rsp, 0x98; ret; 
0x000000000041f675: add byte ptr [rax], al; add al, ch; ret; 
0x00000000004ac415: add byte ptr [rax], al; add al, cl; cmp dh, dh; jmp qword ptr [rcx + 1]; 
0x00000000004af2e1: add byte ptr [rax], al; add al, cl; cmp eax, dword ptr [rax]; add al, ch; ret 0xfff7; 
0x00000000004ac0e1: add byte ptr [rax], al; add al, cl; or dword ptr [rax], eax; add byte ptr [rax], ch; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004af4e9: add byte ptr [rax], al; add al, dl; cmp eax, 0xd9900000; clc; call qword ptr [rax]; 
0x00000000004b3fe9: add byte ptr [rax], al; add al, dl; mov byte ptr [rax], al; add al, dl; int 0xfc; jmp qword ptr [rsi]; 
0x000000000044e7ed: add byte ptr [rax], al; add bh, al; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045eaee: add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040eacd: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000048582d: add byte ptr [rax], al; add bh, bh; ror dword ptr [rax - 0x77], cl; ret; 
0x00000000004a4cfd: add byte ptr [rax], al; add bl, ah; xchg ch, bh; call ptr [rax]; je 0xa4d04; call rax; 
0x000000000040f3a6: add byte ptr [rax], al; add bl, ch; ret 0x1f0f; 
0x0000000000485af7: add byte ptr [rax], al; add bl, ch; ret; 
0x000000000042b83d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044487d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004441fd: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000041598b: add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000475759: add byte ptr [rax], al; add byte ptr [r9 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004acfa1: add byte ptr [rax], al; add byte ptr [rax + 0x18000018], cl; test dh, dh; call qword ptr [rdi]; 
0x00000000004adb61: add byte ptr [rax], al; add byte ptr [rax + 0x24], cl; add byte ptr [rax], al; pop rax; mov ah, 0xf6; call qword ptr [rdx]; 
0x000000000048851d: add byte ptr [rax], al; add byte ptr [rax + 0x26], bh; syscall; 
0x000000000048851d: add byte ptr [rax], al; add byte ptr [rax + 0x26], bh; syscall; cmp rax, -0xfff; jae 0x88530; ret; 
0x0000000000465dd6: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8349; 
0x0000000000476cb6: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8948; 
0x000000000047a888: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x0000000000468ae8: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x00000000004afec9: add byte ptr [rax], al; add byte ptr [rax + 0x30000047], dh; popfq; stc; call qword ptr [rbx]; 
0x000000000048af61: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000041a03d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000041313d: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000048aff6: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x0000000000447dde: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xe175; vzeroupper; ret; 
0x000000000041f1df: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004af671: add byte ptr [rax], al; add byte ptr [rax + 0x3f], bl; add byte ptr [rax], al; sub byte ptr [rdi - 7], dl; jmp qword ptr [rbx + 0x17]; 
0x00000000004adab9: add byte ptr [rax], al; add byte ptr [rax + 0x40000023], ah; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004af8b9: add byte ptr [rax], al; add byte ptr [rax + 0x41], ah; test cl, bh; call qword ptr [rdx]; 
0x00000000004b2ab1: add byte ptr [rax], al; add byte ptr [rax + 0x48000073], bl; sti; sti; call qword ptr [rsi + 1]; 
0x0000000000449a04: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x000000000045147a: add byte ptr [rax], al; add byte ptr [rax + 0x4c], dl; mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004af499: add byte ptr [rax], al; add byte ptr [rax + 0x5000003d], al; xchg esi, eax; clc; call qword ptr [rax]; 
0x00000000004b3bb9: add byte ptr [rax], al; add byte ptr [rax + 0x50000084], ah; mov bh, 0xfc; jmp qword ptr [rdx]; 
0x00000000004b0a69: add byte ptr [rax], al; add byte ptr [rax + 0x53], dl; add byte ptr [rax], al; sar dl, 0xfd; jmp qword ptr [rdx]; 
0x00000000004b0e81: add byte ptr [rax], al; add byte ptr [rax + 0x57], ch; add byte ptr [rax], al; pop rax; and dl, bh; call qword ptr [rdi]; 
0x00000000004963f5: add byte ptr [rax], al; add byte ptr [rax + 0x5efffb70], ch; jae 0x963fa; jmp qword ptr [rsi]; 
0x00000000004b4c99: add byte ptr [rax], al; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x00000000004b1981: add byte ptr [rax], al; add byte ptr [rax + 0x62], ch; add byte ptr [rax], al; js 0xb193a; cli; call qword ptr [rax]; 
0x00000000004b1969: add byte ptr [rax], al; add byte ptr [rax + 0x62], dl; add byte ptr [rax], al; jo 0xb1922; cli; call qword ptr [rbx]; 
0x000000000046f0b3: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000046b204: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004b4eb1: add byte ptr [rax], al; add byte ptr [rax + 0x68000097], bl; std; jmp qword ptr [rcx]; 
0x000000000047553d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047553d: add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x000000000047552d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000047552d: add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047554d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047554d: add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x00000000004b2761: add byte ptr [rax], al; add byte ptr [rax + 0x70], cl; add byte ptr [rax], al; fdiv st(2); sti; jmp qword ptr [rbx]; 
0x000000000044471d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x00000000004b3369: add byte ptr [rax], al; add byte ptr [rax + 0x7c], dl; add byte ptr [rax], al; sub edi, esp; call qword ptr [rax + 5]; 
0x00000000004af6a1: add byte ptr [rax], al; add byte ptr [rax + 0x800003f], cl; jae 0xaf6a4; call qword ptr [rdi]; 
0x000000000044a55d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000044a55d: add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x000000000044bdf6: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000044bd4f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000044bd4f: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; pop rdx; pop rsi; ret; 
0x000000000048d10d: add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000449242: add byte ptr [rax], al; add byte ptr [rax + 0xe5], bh; syscall; 
0x000000000040dc1d: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000044fbcd: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000047480d: add byte ptr [rax], al; add byte ptr [rax + 0xfe580f5], cl; je 0x74830; add rax, 2; ret; 
0x000000000048445a: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000044991d: add byte ptr [rax], al; add byte ptr [rax + 1], bh; syscall; 
0x0000000000483666: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000482f99: add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret; 
0x0000000000484663: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000049e049: add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x00000000004b3b1a: add byte ptr [rax], al; add byte ptr [rax + rax - 0x3532000], al; jmp qword ptr [rsi + 7]; 
0x00000000004b483d: add byte ptr [rax], al; add byte ptr [rax + rax], ah; add byte ptr [rax], al; sub byte ptr [rcx + 0x6980000], dl; std; jmp qword ptr [rbp]; 
0x00000000004addd1: add byte ptr [rax], al; add byte ptr [rax + rax], bl; add byte ptr [rax], al; mov esp, 0xf5000026; cmc; call qword ptr [rsi]; 
0x00000000004b4495: add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x00000000004afec5: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x30000047], dh; popfq; stc; call qword ptr [rbx]; 
0x00000000004b2aad: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x48000073], bl; sti; sti; call qword ptr [rsi + 1]; 
0x00000000004b4c95: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x00000000004b3735: add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax], ah; add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x00000000004b2b1a: add byte ptr [rax], al; add byte ptr [rax + rax], dh; mov al, 0xfc; sti; jmp qword ptr [rbx]; 
0x00000000004194f6: add byte ptr [rax], al; add byte ptr [rax + rbp*8], al; or dword ptr [rdi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004b3f1d: add byte ptr [rax], al; add byte ptr [rax + rcx*4], al; add byte ptr [rax], al; fmul st(2), st(0); cld; call rdx; 
0x00000000004b4735: add byte ptr [rax], al; add byte ptr [rax + rdx*4], bl; add byte ptr [rax], al; add al, 4; std; jmp qword ptr [rdx]; 
0x00000000004b51d1: add byte ptr [rax], al; add byte ptr [rax - 0x27ffff66], bh; pop rsp; std; jmp qword ptr [rcx]; 
0x00000000004af5b1: add byte ptr [rax], al; add byte ptr [rax - 0x27ffffc2], bl; adc al, 0xf9; call qword ptr [rax + 1]; 
0x00000000004abbc1: add byte ptr [rax], al; add byte ptr [rax - 0x27fffffc], ch; xchg esp, eax; cmc; call qword ptr [rdx]; 
0x0000000000484546: add byte ptr [rax], al; add byte ptr [rax - 0x38ff76b7], al; add al, byte ptr [rdx]; sar bh, 0xff; mov eax, 1; ret; 
0x0000000000471a96: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000418708: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0x2a3602; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004173e1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000040fc91: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000045d45d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000044981d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000047486d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000047484d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000004748ad: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000047485d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047489d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045ad1d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000044a3b1: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000458877: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x000000000045884e: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x00000000004581ae: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x8511; 
0x00000000004b2e99: add byte ptr [rax], al; add byte ptr [rax - 0x5fffff89], al; adc al, 0xfc; jmp qword ptr [rax]; 
0x0000000000460e06: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460db5: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461164: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461116: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461067: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046100b: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d6b: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d1d: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608bc: add byte ptr [rax], al; add byte ptr [rax - 0x68], cl; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b58a9: add byte ptr [rax], al; add byte ptr [rax - 0x6fffff5f], dl; mov bh, ch; jmp qword ptr [rbx]; 
0x00000000004ac1c9: add byte ptr [rax], al; add byte ptr [rax - 0x6ffffff6], dh; sub al, 0xf6; jmp qword ptr [rax]; 
0x00000000004400e8: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004572cb: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004848ed: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x237789; mov qword ptr [rip + 0x23776a], rax; ret; 
0x000000000044d34d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x26cfa9; ret; 
0x00000000004572e9: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457307: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000046b779: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x24b69d; jmp rax; 
0x00000000004197dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044240d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004579cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2644a1; ret; 
0x000000000044f47d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x26d4b1; ret; 
0x000000000041860d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2a0b09; ret; 
0x0000000000400b78: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; call 0xffffffffc7d00ccb; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x000000000040ea00: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; js 0xea27; call rdx; 
0x0000000000471e9d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000042fbfd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fdfd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d5d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000042f2ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f46d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000041869e: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; adc eax, 0x2a3670; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041917b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2a0663; ret; 
0x000000000041915b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2a067b; ret; 
0x000000000047e43d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x7dd70; add rsp, 0xd8; ret; 
0x000000000041075b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000413ce3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c429a48; ret; 
0x000000000041352b: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd0d1e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000488413: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000004884fa: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000412485: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x0000000000411762: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000471ff2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(0); ret; 
0x000000000048b40c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(1); ret; 
0x000000000040180f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0x1826; syscall; 
0x000000000044bfbd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x4bfe4; ret; 
0x0000000000412a51: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x000000000041dccd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000004234bd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000041106c: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004111b4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004600e4: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000041b83d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048df2d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000046a565: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000040f3db: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf748; 
0x00000000004147e6: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000048cb4d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x0000000000454166: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x000000000041863d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004100c1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ac1a1: add byte ptr [rax], al; add byte ptr [rax - 0x77fffff6], cl; sub al, 0xf6; call qword ptr [rax]; 
0x000000000048aa44: add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000047369d: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x000000000046d26b: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000400408: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000486c26: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000457158: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; jl 0x57183; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x00000000004718b4: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; js 0x718eb; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000004465ed: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000040f22d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004858ad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000047db78: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000042afd3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000048df0d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x0000000000472b5e: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043e931: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042affd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000425ced: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000489510: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000405fad: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000434714: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000048f98d: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000048e03d: add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004b3ab9: add byte ptr [rax], al; add byte ptr [rax - 0xfffff7d], ah; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x000000000045c7cb: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c18: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004acc72: add byte ptr [rax], al; add byte ptr [rax], 0; add byte ptr [rbp + rdx], bl; add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x00000000004b3739: add byte ptr [rax], al; add byte ptr [rax], ah; add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x000000000040eacb: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000048582b: add byte ptr [rax], al; add byte ptr [rax], al; add bh, bh; ror dword ptr [rax - 0x77], cl; ret; 
0x00000000004185fb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000041313b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000047553b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x000000000047553b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; ret; 
0x000000000047552b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x000000000047552b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; ret; 
0x000000000047554b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x000000000047554b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; ret; 
0x000000000044471b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000044a55b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xb], bh; syscall; 
0x000000000048d10b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xd837bc], al; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x000000000044fbcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480147; ret; 
0x000000000048e02b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x00000000004b4493: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], ch; add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x00000000004b4c93: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + rax], cl; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x000000000045d45b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffa0; 
0x000000000044981b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x000000000047486b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000047484b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x00000000004748ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000047485b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000047489b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045ad1b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x00000000004848eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x237789; mov qword ptr [rip + 0x23776a], rax; ret; 
0x000000000044d34b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x26cfa9; ret; 
0x00000000004197db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044f47b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x26d4b1; ret; 
0x000000000041860b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x2a0b09; ret; 
0x0000000000471e9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rax, qword ptr [rax + 0x4c]; ret; 
0x000000000044bfbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jo 0x4bfe4; ret; 
0x00000000004234bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, al; mov rdi, rax; call rcx; 
0x000000000041b83b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048df2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8d48; 
0x000000000048cb4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; shr cl, 1; ret 0xfffe; 
0x000000000041863b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000048aa42: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x000000000047369b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x00000000004465eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000040f22b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000048df0b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x8001; 
0x0000000000425ceb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000405fab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048f98b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; call qword ptr [rax + 0x49]; 
0x000000000048e03b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x80], al; inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x00000000004185bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000049fed2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004a03c2: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x0000000000417226: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004b4c94: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x000000000044d35b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x26f5aa05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000044413b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000443c6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000434fdb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000418f9b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000048f6cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000041cdcb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000044682b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000473b2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000423dfb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*8 - 0x7cb7dd8c], al; ret 0x4801; 
0x000000000042603b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042494b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000412bbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042b58b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b35b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000443c2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000044247b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x0000000000419d3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000485289: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x0000000000485289: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000044bc99: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000474db9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x0000000000474db9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000045af39: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000042266b: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x000000000044a4fb: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x000000000047482c: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000044f4d5: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000481a1f: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000448134: add byte ptr [rax], al; add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042b34c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b35c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b36c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b58c: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000040eacc: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000419cac: add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000048582c: add byte ptr [rax], al; add byte ptr [rax], al; call rbx; 
0x00000000004a1efc: add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004a10ac: add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004480a7: add byte ptr [rax], al; add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x000000000048d07c: add byte ptr [rax], al; add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0x8d06c; add rsp, 0x18; ret; 
0x000000000048e03c: add byte ptr [rax], al; add byte ptr [rax], al; cmp dil, 4; jne 0x8e055; mov eax, 8; ret; 
0x000000000042370a: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f8aa: add byte ptr [rax], al; add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000048d084: add byte ptr [rax], al; add byte ptr [rax], al; je 0x8d06c; add rsp, 0x18; ret; 
0x000000000048d155: add byte ptr [rax], al; add byte ptr [rax], al; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000045ff1d: add byte ptr [rax], al; add byte ptr [rax], al; jmp rax; 
0x0000000000444d4c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d5c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d6c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d7c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d8c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000444ccc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000444cdc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000444cec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000444cfc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000444d0c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000444d1c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000444d2c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000444d3c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000004400e7: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000444cbc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x00000000004848ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x237789]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x000000000044d34c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x26cfa9]; ret; 
0x000000000046b778: add byte ptr [rax], al; add byte ptr [rax], al; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x0000000000443c2c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000044247c: add byte ptr [rax], al; add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000443c3c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000044248c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004128fc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000044471c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004440fc: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000044411c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000044472c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044410c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000048851c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x000000000047553c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047553c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000047552c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000047552c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047554c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047554c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044a55c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x00000000004185bc: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000484459: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000044991c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000484662: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000443c6c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000044413c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000448f9c: add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x0000000000434fdc: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004356fc: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044bd44: add byte ptr [rax], al; add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000044bfbc: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000471a95: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000480dd8: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000480dd0: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000417500: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000048d1ac: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041751c: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000418707: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0x2a3602], 0; ret; 
0x000000000045ad1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000044a4dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000047fcac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045abbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab7c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004185ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000047484c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000047485c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000047486c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000047487c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000047488c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000047489c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004748ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000481a2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047c3bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000443bbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044240c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000471e9c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041862c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d12c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d1bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d21c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d20c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d1cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000004191cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a2bba], eax; ret; 
0x00000000004579cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2644a1]; ret; 
0x000000000044f47c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x26d4b1]; ret; 
0x000000000041860c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x000000000048aefc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000473b2c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000041863c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000044417c: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000484e3f: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000042f2ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043553c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004234bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x000000000044487c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004441fc: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000480ecc: add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000445fbc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000042c1ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000412bbc: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x00000000004480ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x0000000000425bec: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000043516c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043584c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004350ec: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004357dc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044a5b7: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000475517: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000475517: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x000000000044a587: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000044bc68: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000484545: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000412dcc: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047fc92: add byte ptr [rax], al; add byte ptr [rax], al; or dword ptr [rip + 0x23a54b], 1; pop rbx; ret; 
0x0000000000418f9c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000041177c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004a0ecc: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004a1664: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x000000000049fed4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004a03c4: add byte ptr [rax], al; add byte ptr [rax], al; ret 0x33; 
0x000000000049fecc: add byte ptr [rax], al; add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x00000000004b4494: add byte ptr [rax], al; add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x0000000000400407: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x000000000047369c: add byte ptr [rax], al; add byte ptr [rax], al; test rsi, rsi; jne 0x736a9; xor rax, rax; ret; 
0x000000000042b83c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000041753c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044984c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000047368c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000444afc: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000400c0f: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000048528a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000048528a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; ret; 
0x000000000044bc9a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000474dba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x0000000000474dba: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; ret; 
0x000000000045af3a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x0000000000417228: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000042b82c: add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000004adab5: add byte ptr [rax], al; add byte ptr [rax], bh; add byte ptr [rax], al; add byte ptr [rax + 0x40000023], ah; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004ad379: add byte ptr [rax], al; add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rsp + rbx], ah; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004b51e5: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax], al; rcr byte ptr [rdx + 0x5d300000], 1; std; jmp qword ptr [rcx + 9]; 
0x00000000004b5c3d: add byte ptr [rax], al; add byte ptr [rax], cl; add byte ptr [rax], al; sub byte ptr [rbp - 0x5ef80000], ah; std; jmp qword ptr [rax]; 
0x00000000004b0449: add byte ptr [rax], al; add byte ptr [rax], dh; add byte ptr [r8], r8b; jo 0xb040c; stc; call qword ptr [rcx]; 
0x00000000004af8b5: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x41], ah; test cl, bh; call qword ptr [rdx]; 
0x00000000004b16a1: add byte ptr [rax], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdi + rbx*2 - 0x6acc0000], cl; cli; call qword ptr [rax]; 
0x00000000004afec6: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x30000047], dh; popfq; stc; call qword ptr [rbx]; 
0x00000000004b2aae: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x48000073], bl; sti; sti; call qword ptr [rsi + 1]; 
0x00000000004b4c96: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x00000000004b3736: add byte ptr [rax], al; add byte ptr [rax], r8b; add byte ptr [rax], ah; add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x0000000000449534: add byte ptr [rax], al; add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x0000000000484fad: add byte ptr [rax], al; add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x00000000004758ab: add byte ptr [rax], al; add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x000000000044877c: add byte ptr [rax], al; add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000481db2: add byte ptr [rax], al; add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x0000000000481cf2: add byte ptr [rax], al; add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000046cd85: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000481f13: add byte ptr [rax], al; add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x00000000004754ad: add byte ptr [rax], al; add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x000000000048421e: add byte ptr [rax], al; add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000044a64d: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x0000000000449764: add byte ptr [rax], al; add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x0000000000475779: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x000000000045aeb4: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x0000000000416395: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000449af4: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x000000000044bb47: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044a463: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x0000000000488308: add byte ptr [rax], al; add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000045ac6c: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000484eca: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000419f1d: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000040f7af: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x00000000004757fc: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x000000000048d156: add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x0000000000468ae0: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041ef79: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000041e597: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000047200c: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000472106: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004af4ad: add byte ptr [rax], al; add byte ptr [rbp + rdi - 0x69b40000], dl; clc; jmp qword ptr [rsi]; 
0x00000000004acc75: add byte ptr [rax], al; add byte ptr [rbp + rdx], bl; add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x000000000044bbf8: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000049e041: add byte ptr [rax], al; add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x0000000000449238: add byte ptr [rax], al; add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000046efc5: add byte ptr [rax], al; add byte ptr [rbp - 0x76ba7fec], cl; call 0x1ff1913; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000047fc93: add byte ptr [rax], al; add byte ptr [rbx + 0x23a54b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000044d35d: add byte ptr [rax], al; add byte ptr [rbx + 0x26f5aa05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x0000000000449b4d: add byte ptr [rax], al; add byte ptr [rbx + 0x272cb605], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000475347: add byte ptr [rax], al; add byte ptr [rbx + 0x31d2313b], cl; imul al; sti; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000457b29: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000040fd61: add byte ptr [rax], al; add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000044475d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044413d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000443c6d: add byte ptr [rax], al; add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x000000000043001d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe1d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fc1d: add byte ptr [rax], al; add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434fdd: add byte ptr [rax], al; add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x0000000000414192: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000417144: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000040fc39: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000459e5d: add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000048f49d: add byte ptr [rax], al; add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x000000000043568d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043561d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004355ad: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004afa2d: add byte ptr [rax], al; add byte ptr [rbx + rax*2], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004b3a65: add byte ptr [rax], al; add byte ptr [rbx + rax*4], cl; add byte ptr [rcx + rbp*4 - 4], al; jmp qword ptr [rdx]; 
0x000000000048d115: add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x00000000004b42cd: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x20b40000], dh; cld; call qword ptr [rdi + 1]; 
0x0000000000457817: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ac22d: add byte ptr [rax], al; add byte ptr [rbx + rcx], dl; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x00000000004b4acd: add byte ptr [rax], al; add byte ptr [rbx + rdx*4 + 0x102c0000], dh; std; call qword ptr [rax]; 
0x0000000000484e0e: add byte ptr [rax], al; add byte ptr [rbx - 0x17], bl; or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000046cefd: add byte ptr [rax], al; add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x0000000000484d9f: add byte ptr [rax], al; add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x25a00; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000465f0a: add byte ptr [rax], al; add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000041cdcd: add byte ptr [rax], al; add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004114a4: add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000041913e: add byte ptr [rax], al; add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040fa9f: add byte ptr [rax], al; add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x0000000000482590: add byte ptr [rax], al; add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x000000000047199a: add byte ptr [rax], al; add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000460a0f: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000046c7c8: add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x00000000004480b5: add byte ptr [rax], al; add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000416bbe: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000004694d6: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000478c4a: add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x000000000040e153: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret 0x149; 
0x000000000044682d: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000048d0b8: add byte ptr [rax], al; add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x00000000004af8a5: add byte ptr [rax], al; add byte ptr [rcx + rax*2 - 0x7cdc0000], cl; stc; jmp rbx; 
0x00000000004af855: add byte ptr [rax], al; add byte ptr [rcx + rax*2], bh; add byte ptr [rax], al; add al, 0x83; stc; call qword ptr [rdx]; 
0x00000000004ae065: add byte ptr [rax], al; add byte ptr [rcx + rbp], cl; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x00000000004b00a5: add byte ptr [rax], al; add byte ptr [rcx + rcx*2 - 0x596c0000], cl; stc; call rsi; 
0x0000000000491ffd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x0000000000413ab8: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004126dd: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000413f7c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000040dc35: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; jne 0xdc5c; add rsp, 0x118; ret; 
0x000000000041a87c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474c30: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000473a6d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000417501: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004704fa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000049175d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000423dfd: add byte ptr [rax], al; add byte ptr [rcx + rcx*8 - 0x7cb7dd8c], al; ret 0x4801; 
0x000000000047e99c: add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000045ade0: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000489969: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg edi, eax; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000040483e: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000479c82: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x000000000045f301: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000042603d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042494d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000041cdd5: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000048d07d: add byte ptr [rax], al; add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + riz*8 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004147df: add byte ptr [rax], al; add byte ptr [rcx - 1], al; xchg edi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000042ba00: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x000000000042ba26: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x0000000000484605: add byte ptr [rax], al; add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000044bd1d: add byte ptr [rax], al; add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000040ece2: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000042b30a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000040dc13: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000046bc92: add byte ptr [rax], al; add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000447ee0: add byte ptr [rax], al; add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447e80: add byte ptr [rax], al; add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000048ceab: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x00000000004b16a5: add byte ptr [rax], al; add byte ptr [rdi + rbx*2 - 0x6acc0000], cl; cli; call qword ptr [rax]; 
0x0000000000463343: add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000004b4e4d: add byte ptr [rax], al; add byte ptr [rdi + rdx*4], dh; add byte ptr [rax], al; cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x00000000004b461a: add byte ptr [rax], al; add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x000000000040dbf4: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000480fb4: add byte ptr [rax], al; add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x00000000004347a4: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000004357dd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043584d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x00000000004480ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x0000000000425bed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000412bbd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042c1ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042b58d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b36d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042b35d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042b37d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b34d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000046c7c2: add byte ptr [rax], al; add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x000000000040dbc9: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd1: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd9: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x00000000004499e5: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x0000000000475667: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000449652: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000004847e5: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x00000000004767e0: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg esp, eax; ret 0xc283; 
0x0000000000448035: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x0000000000443c2d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000044247d: add byte ptr [rax], al; add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000044bd4a: add byte ptr [rax], al; add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x00000000004af945: add byte ptr [rax], al; add byte ptr [rdx + rax*2], ch; add byte ptr [rax], al; je 0xaf8d3; stc; call qword ptr [rcx + 1]; 
0x000000000044d381: add byte ptr [rax], al; add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x26b72c; pop rbx; ret; 
0x00000000004b41c5: add byte ptr [rax], al; add byte ptr [rdx + rcx*4 - 0x23dc0000], ch; cld; jmp qword ptr [rbx + 1]; 
0x00000000004b1995: add byte ptr [rax], al; add byte ptr [rdx + riz*2], bh; add byte ptr [rax + rsi*4 - 6], dh; call qword ptr [rdx]; 
0x000000000048d085: add byte ptr [rax], al; add byte ptr [rdx + riz*8 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004b0c25: add byte ptr [rax], al; add byte ptr [rdx*2 + 0x3b40000], cl; cli; jmp qword ptr [rdx]; 
0x0000000000475754: add byte ptr [rax], al; add byte ptr [rip + 0x410000], dil; je 0x75788; mov eax, 0x101; syscall; 
0x000000000047b522: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000044bd45: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000042c4e2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000419d3d: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x000000000042b272: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x00000000004b3e76: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004b3e0e: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004b3e42: add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004b4535: add byte ptr [rax], al; add byte ptr [rsi + rcx*4], bl; add byte ptr [rax], al; test al, dh; cld; jmp qword ptr [rdx + 5]; 
0x00000000004af525: add byte ptr [rax], al; add byte ptr [rsi + rdi], cl; add byte ptr [rax], al; adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x00000000004addd5: add byte ptr [rax], al; add byte ptr [rsi + riz + 0x26f50000], bh; cmc; call qword ptr [rsi]; 
0x000000000048528b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x000000000048528b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000044bc9b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x0000000000474dbb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x0000000000474dbb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000045af3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000044248d: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000041670e: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004abbd5: add byte ptr [rax], al; add byte ptr [rsp + rax - 0x6b1c0000], bh; cmc; call rsp; 
0x00000000004ad37d: add byte ptr [rax], al; add byte ptr [rsp + rbx], ah; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004af3bd: add byte ptr [rax], al; add byte ptr [rsp + rdi + 0xe3c0000], ah; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004acb85: add byte ptr [rax], al; add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x00000000004b282e: add byte ptr [rax], al; add ch, dh; sti; jmp qword ptr [rdx]; 
0x000000000045ed28: add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x0000000000454bc6: add byte ptr [rax], al; add cl, ch; ret 0xfffd; 
0x000000000048aa8e: add byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413d85: add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000400c10: add byte ptr [rax], al; add cl, cl; ret; 
0x0000000000469fe6: add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000045e830: add byte ptr [rax], al; add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000045101c: add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000042266d: add byte ptr [rax], al; add dh, dh; ret 0x4804; 
0x000000000044a4fd: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000445f81: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000484606: add byte ptr [rax], al; add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x000000000040ebc7: add byte ptr [rax], al; add qword ptr [rip + 0x2adc27], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004abc62: add byte ptr [rax], al; add rax, -0x64f80000; cmc; call rax; 
0x000000000047482e: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000048d0b9: add byte ptr [rax], al; add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x0000000000473940: add byte ptr [rax], al; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b123: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x000000000042b650: add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000489ad6: add byte ptr [rax], al; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000411842: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048d0c0: add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000044f555: add byte ptr [rax], al; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847ec: add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000048ab83: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop r14; ret; 
0x00000000004160bb: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000449659: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x0000000000473d11: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004499ec: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x000000000040155c: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x000000000046f9c4: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457b23: add byte ptr [rax], al; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000462fc5: add byte ptr [rax], al; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000040ffcb: add byte ptr [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004850a7: add byte ptr [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000044b18e: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423816: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000481a21: add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004b483e: add byte ptr [rax], al; and al, 0; add byte ptr [rax], al; sub byte ptr [rcx + 0x6980000], dl; std; jmp qword ptr [rbp]; 
0x00000000004b4e1a: add byte ptr [rax], al; and al, 0x35; std; jmp qword ptr [rdx]; 
0x00000000004af8aa: add byte ptr [rax], al; and al, 0x83; stc; jmp rbx; 
0x00000000004b41ca: add byte ptr [rax], al; and al, 0xdc; cld; jmp qword ptr [rbx + 1]; 
0x00000000004b373a: add byte ptr [rax], al; and byte ptr [rax + 0x65100000], al; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b3d3a: add byte ptr [rax], al; and byte ptr [rsi - 0x43500000], al; cld; call qword ptr [rdx + 1]; 
0x0000000000448136: add byte ptr [rax], al; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x00000000004b439e: add byte ptr [rax], al; and dl, ah; cld; jmp qword ptr [rsi]; 
0x000000000042476b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000042437b: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727db: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473beb: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727ab: add byte ptr [rax], al; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000042cf21: add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042d7f3: add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042cf26: add byte ptr [rax], al; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042b34e: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b35e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b36e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b58e: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042b37e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; add rax, rdi; ret; 
0x0000000000474404: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000440970: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000425bce: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000473234: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x00000000004732c2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000040ec26: add byte ptr [rax], al; call 0x1b40; xor eax, eax; ret; 
0x00000000004adc02: add byte ptr [rax], al; call 0x480adc2d; mov ch, 0xf6; call qword ptr [rsi]; 
0x000000000040154e: add byte ptr [rax], al; call 0x49980; cmp eax, -1; je 0x162b; add rsp, 0x98; ret; 
0x00000000004687b6: add byte ptr [rax], al; call 0x4bd40; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000047538b: add byte ptr [rax], al; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x000000000045c9ab: add byte ptr [rax], al; call 0x4bd40; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x00000000004b2b02: add byte ptr [rax], al; call 0xffffffff980b2b7c; cld; sti; jmp qword ptr [rbx]; 
0x00000000004718d1: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x000000000040107c: add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x000000000040eace: add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000040e9db: add byte ptr [rax], al; call rax; 
0x000000000048582e: add byte ptr [rax], al; call rbx; 
0x00000000004a1efe: add byte ptr [rax], al; call rdi; 
0x000000000040e915: add byte ptr [rax], al; call rdx; 
0x00000000004a10ae: add byte ptr [rax], al; call rsp; 
0x0000000000488578: add byte ptr [rax], al; cmove edx, eax; call 0x78be0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004480e1: add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x00000000004480a9: add byte ptr [rax], al; cmove rax, rdx; pop rbx; ret; 
0x000000000042438c: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000485073: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x00000000004b4e52: add byte ptr [rax], al; cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x00000000004af856: add byte ptr [rax], al; cmp al, 0x41; add byte ptr [rax], al; add al, 0x83; stc; call qword ptr [rdx]; 
0x00000000004af3c2: add byte ptr [rax], al; cmp al, 0xe; clc; jmp qword ptr [rdi + 0x2b]; 
0x000000000048d07e: add byte ptr [rax], al; cmp byte ptr [r9 + 0xdf], 0; je 0x8d06c; add rsp, 0x18; ret; 
0x00000000004b1652: add byte ptr [rax], al; cmp byte ptr [rdi], bl; add byte ptr [rax], cl; xchg ebp, eax; cli; call qword ptr [rdi]; 
0x00000000004af136: add byte ptr [rax], al; cmp byte ptr [rdx - 9], dl; jmp qword ptr [rbx]; 
0x000000000047f30e: add byte ptr [rax], al; cmp byte ptr [rip + 0x23d4b1], 0; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x00000000004af49a: add byte ptr [rax], al; cmp byte ptr [rip - 0x69b00000], 0xf8; call qword ptr [rax]; 
0x000000000048e03e: add byte ptr [rax], al; cmp dil, 4; jne 0x8e055; mov eax, 8; ret; 
0x0000000000416676: add byte ptr [rax], al; cmp eax, -1; je 0x165f8; mov eax, 0xffffffff; ret; 
0x0000000000416866: add byte ptr [rax], al; cmp eax, -1; je 0x167e8; mov eax, 0xffffffff; ret; 
0x0000000000446438: add byte ptr [rax], al; cmp eax, ecx; jne 0x464f5; xor eax, eax; ret; 
0x000000000044bd1e: add byte ptr [rax], al; cmp eax, edx; jne 0x4bd2c; nop; mov eax, 0xca; syscall; 
0x000000000042370c: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f8ac: add byte ptr [rax], al; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000447bec: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x47bff; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447b9c: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x47c08; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447ddf: add byte ptr [rax], al; cmp rdx, rcx; jne 0x47dc7; vzeroupper; ret; 
0x0000000000447fa2: add byte ptr [rax], al; cmp rdx, rcx; jne 0x47f82; vzeroupper; ret; 
0x00000000004af5b6: add byte ptr [rax], al; fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x00000000004b2766: add byte ptr [rax], al; fdiv st(2); sti; jmp qword ptr [rbx]; 
0x00000000004b00f2: add byte ptr [rax], al; fmul dword ptr [rcx]; add byte ptr [rax], ch; stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x00000000004b3f22: add byte ptr [rax], al; fmul st(2), st(0); cld; call rdx; 
0x00000000004b3116: add byte ptr [rax], al; fsub dword ptr [rbx]; cld; jmp qword ptr [rcx]; 
0x00000000004abbda: add byte ptr [rax], al; in al, 0x94; cmc; call rsp; 
0x00000000004abdd2: add byte ptr [rax], al; in al, dx; movsd dword ptr [rdi], dword ptr [rsi]; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004acb86: add byte ptr [rax], al; insb byte ptr [rdi], dx; adc al, 0; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x0000000000447ee1: add byte ptr [rax], al; ja 0x47ef7; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447e81: add byte ptr [rax], al; ja 0x47f00; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x00000000004491d4: add byte ptr [rax], al; ja 0x49490; lea rdx, [rip + 0x4c399]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000435883: add byte ptr [rax], al; jae 0x35920; lea r11, [rip + 0x5f09e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044d382: add byte ptr [rax], al; je 0x4d390; mov dword ptr [rip + 0x26b72c], edx; pop rbx; ret; 
0x000000000048d086: add byte ptr [rax], al; je 0x8d06c; add rsp, 0x18; ret; 
0x000000000048d157: add byte ptr [rax], al; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004af94a: add byte ptr [rax], al; je 0xaf8d3; stc; call qword ptr [rcx + 1]; 
0x00000000004b199a: add byte ptr [rax], al; je 0xb194e; cli; call qword ptr [rdx]; 
0x00000000004b1996: add byte ptr [rax], al; jl 0xb19fc; add byte ptr [rax], al; je 0xb194e; cli; call qword ptr [rdx]; 
0x000000000044a63b: add byte ptr [rax], al; jmp rax; 
0x000000000041183c: add byte ptr [rax], al; jne 0x118ed; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004160b5: add byte ptr [rax], al; jne 0x16176; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000416396: add byte ptr [rax], al; jne 0x163e4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004175b7: add byte ptr [rax], al; jne 0x17866; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000419f1e: add byte ptr [rax], al; jne 0x19f28; add rsp, 0x20; pop rbx; ret; 
0x000000000042bfe2: add byte ptr [rax], al; jne 0x2bef0; ret; 
0x000000000044877d: add byte ptr [rax], al; jne 0x487a4; add rsp, 0x20; pop rbx; ret; 
0x0000000000449239: add byte ptr [rax], al; jne 0x491d0; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000449535: add byte ptr [rax], al; jne 0x49549; add rsp, 0x28; ret; 
0x0000000000449653: add byte ptr [rax], al; jne 0x49709; add rsp, 0x68; ret; 
0x0000000000449765: add byte ptr [rax], al; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499e6: add byte ptr [rax], al; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449af5: add byte ptr [rax], al; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000044a464: add byte ptr [rax], al; jne 0x4a477; add rsp, 0x28; ret; 
0x000000000044bb48: add byte ptr [rax], al; jne 0x4bb56; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bbd8: add byte ptr [rax], al; jne 0x4bbe6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bd7d: add byte ptr [rax], al; jne 0x4bd68; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x0000000000457b1d: add byte ptr [rax], al; jne 0x57bdf; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x000000000045ac6d: add byte ptr [rax], al; jne 0x5ac76; add rsp, 0x18; ret; 
0x000000000045aeb5: add byte ptr [rax], al; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688b0: add byte ptr [rax], al; jne 0x688bc; add rsp, 0xd8; ret; 
0x00000000004754ae: add byte ptr [rax], al; jne 0x754ea; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000475668: add byte ptr [rax], al; jne 0x75729; add rsp, 0x78; ret; 
0x000000000047577a: add byte ptr [rax], al; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004757fd: add byte ptr [rax], al; jne 0x75809; movzx eax, al; add rsp, 0x58; ret; 
0x00000000004758ac: add byte ptr [rax], al; jne 0x758cb; add rsp, 0x38; ret; 
0x000000000047f315: add byte ptr [rax], al; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000481bf8: add byte ptr [rax], al; jne 0x81c02; add rsp, 0x20; pop rbx; ret; 
0x0000000000481cf3: add byte ptr [rax], al; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481db3: add byte ptr [rax], al; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f14: add byte ptr [rax], al; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821e3: add byte ptr [rax], al; jne 0x8220e; add rsp, 0x68; ret; 
0x000000000048421f: add byte ptr [rax], al; jne 0x8425e; leave; ret; 
0x00000000004847e6: add byte ptr [rax], al; jne 0x848a4; add rsp, 0x30; pop rbx; ret; 
0x00000000004849a7: add byte ptr [rax], al; jne 0x84b35; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000484dc0: add byte ptr [rax], al; jne 0x84e68; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000484ecb: add byte ptr [rax], al; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fae: add byte ptr [rax], al; jne 0x84fc4; add rsp, 0x38; ret; 
0x0000000000487779: add byte ptr [rax], al; jne 0x8777f; pop rbx; ret; 
0x0000000000488309: add byte ptr [rax], al; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000048d067: add byte ptr [rax], al; jne 0x8d080; cmp qword ptr [r9 + 0x38], 0; je 0x8d090; add rsp, 0x18; ret; 
0x000000000040f7b0: add byte ptr [rax], al; jne 0xf7bc; add rsp, 0xd8; ret; 
0x00000000004af62e: add byte ptr [rax], al; jo 0xaf679; stc; jmp qword ptr [rbx]; 
0x00000000004b044e: add byte ptr [rax], al; jo 0xb040c; stc; call qword ptr [rcx]; 
0x00000000004b134e: add byte ptr [rax], al; jo 0xb1344; std; jmp qword ptr [rdi]; 
0x00000000004b196e: add byte ptr [rax], al; jo 0xb1922; cli; call qword ptr [rbx]; 
0x00000000004b2762: add byte ptr [rax], al; jo 0xb2767; add al, bl; sti; jmp qword ptr [rbx]; 
0x00000000004b39fe: add byte ptr [rax], al; jo 0xb39a5; cld; jmp qword ptr [rsi + 5]; 
0x00000000004b5bae: add byte ptr [rax], al; jo 0xb5b4f; std; jmp qword ptr [rcx]; 
0x00000000004b0016: add byte ptr [rax], al; js 0xaffbf; stc; jmp qword ptr [rcx]; 
0x00000000004b1986: add byte ptr [rax], al; js 0xb193a; cli; call qword ptr [rax]; 
0x0000000000435889: add byte ptr [rax], al; lea r11, [rip + 0x5f09e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048f9a5: add byte ptr [rax], al; lea r8, [rip + 0x1bd0a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000048dda5: add byte ptr [rax], al; lea r8, [rip + 0x1d8d6]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000047200d: add byte ptr [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000472107: add byte ptr [rax], al; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047b5ca: add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000444d4e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d5e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d6e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d7e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d8e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000444cad: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x0000000000444cce: add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000444cde: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000444cee: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000444cfe: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000444d0e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000444d1e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000444c5a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x0000000000444d2e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000444d3e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x00000000004400e9: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000444cbe: add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x00000000004247a5: add byte ptr [rax], al; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000423845: add byte ptr [rax], al; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x00000000004848ee: add byte ptr [rax], al; lea rax, [rip + 0x237789]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x000000000044d34e: add byte ptr [rax], al; lea rax, [rip + 0x26cfa9]; ret; 
0x000000000048506c: add byte ptr [rax], al; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424775: add byte ptr [rax], al; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x0000000000424385: add byte ptr [rax], al; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727e5: add byte ptr [rax], al; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bf5: add byte ptr [rax], al; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727b5: add byte ptr [rax], al; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000042a21d: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000047c094: add byte ptr [rax], al; lea rcx, [rip + 0x28c63]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046ea7d: add byte ptr [rax], al; lea rcx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047c9bc: add byte ptr [rax], al; lea rdi, [rip + 0x283d3]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000040d2b5: add byte ptr [rax], al; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000004182ce: add byte ptr [rax], al; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046f232: add byte ptr [rax], al; lea rdx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004491da: add byte ptr [rax], al; lea rdx, [rip + 0x4c399]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000042316b: add byte ptr [rax], al; lea rdx, [rip + 0x70bfc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473c61: add byte ptr [rax], al; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x000000000046b77a: add byte ptr [rax], al; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000044805e: add byte ptr [rax], al; lea rsi, [rip + 0x4d079]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004b41c6: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov al, byte ptr [rax]; add byte ptr [rsp + rbx*8], ah; cld; jmp qword ptr [rbx + 1]; 
0x00000000004afa32: add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004b4ace: add byte ptr [rax], al; mov ah, 0x93; add byte ptr [rax], al; sub al, 0x10; std; call qword ptr [rax]; 
0x00000000004b0c2a: add byte ptr [rax], al; mov ah, 3; cli; jmp qword ptr [rdx]; 
0x00000000004b4cee: add byte ptr [rax], al; mov al, 0x2f; std; jmp qword ptr [rbp]; 
0x00000000004ac1ca: add byte ptr [rax], al; mov al, 0xa; add byte ptr [rax], al; nop; sub al, 0xf6; jmp qword ptr [rax]; 
0x00000000004b3d3e: add byte ptr [rax], al; mov al, 0xbc; cld; call qword ptr [rdx + 1]; 
0x00000000004b461e: add byte ptr [rax], al; mov al, 0xfb; cld; call qword ptr [rbx]; 
0x00000000004b2b1e: add byte ptr [rax], al; mov al, 0xfc; sti; jmp qword ptr [rbx]; 
0x0000000000443c2e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000044247e: add byte ptr [rax], al; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000443c3e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x000000000044248e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004adabe: add byte ptr [rax], al; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004adc06: add byte ptr [rax], al; mov bpl, 0xf6; call qword ptr [rsi]; 
0x000000000045ff01: add byte ptr [rax], al; mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004af646: add byte ptr [rax], al; mov byte ptr [rbp - 7], cl; jmp qword ptr [rdi + 6]; 
0x00000000004128fe: add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x00000000004af6a2: add byte ptr [rax], al; mov byte ptr [rdi], bh; add byte ptr [rax], al; or byte ptr [rbx - 7], dh; call qword ptr [rdi]; 
0x000000000044471e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004440fe: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x00000000004ac1a2: add byte ptr [rax], al; mov byte ptr [rdx], cl; add byte ptr [rax], al; mov byte ptr [rsi + rsi*8], ch; call qword ptr [rax]; 
0x00000000004ac1a6: add byte ptr [rax], al; mov byte ptr [rsi + rsi*8], ch; call qword ptr [rax]; 
0x000000000047480e: add byte ptr [rax], al; mov ch, dh; and ch, 0xf; je 0x74830; add rax, 2; ret; 
0x000000000044473e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044411e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000046cba0: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046cd1d: add byte ptr [rax], al; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c6aa: add byte ptr [rax], al; mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000414590: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047199b: add byte ptr [rax], al; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041913f: add byte ptr [rax], al; mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x00000000004191bc: add byte ptr [rax], al; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x000000000043576e: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044472e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044410e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004236de: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x000000000044a5be: add byte ptr [rax], al; mov eax, 0x1c; syscall; 
0x000000000044a5be: add byte ptr [rax], al; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x000000000048851e: add byte ptr [rax], al; mov eax, 0x26; syscall; 
0x000000000048851e: add byte ptr [rax], al; mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x88530; ret; 
0x0000000000449a05: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000047551e: add byte ptr [rax], al; mov eax, 0x66; syscall; 
0x000000000047551e: add byte ptr [rax], al; mov eax, 0x66; syscall; ret; 
0x000000000047553e: add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047553e: add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000047552e: add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000047552e: add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047554e: add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047554e: add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044a58e: add byte ptr [rax], al; mov eax, 0xa; syscall; 
0x000000000044a58e: add byte ptr [rax], al; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a55e: add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x000000000044a55e: add byte ptr [rax], al; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x000000000044bdf7: add byte ptr [rax], al; mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000044bd50: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000044bd50: add byte ptr [rax], al; mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x00000000004b51d2: add byte ptr [rax], al; mov eax, 0xd800009a; pop rsp; std; jmp qword ptr [rcx]; 
0x000000000040dc1e: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000449243: add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000045c7cc: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c19: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000046fc35: add byte ptr [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048445b: add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000044991e: add byte ptr [rax], al; mov eax, 1; syscall; 
0x0000000000484664: add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000484da0: add byte ptr [rax], al; mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x25a00]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000443c6e: add byte ptr [rax], al; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000004182de: add byte ptr [rax], al; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000044bbee: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x270cca]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000449b4e: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x272cb6]; test eax, eax; jne 0x49b70; mov eax, 3; syscall; 
0x00000000004497ae: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x273056]; test eax, eax; jne 0x497d0; xor eax, eax; syscall; 
0x0000000000449b98: add byte ptr [rax], al; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000482591: add byte ptr [rax], al; mov eax, ebx; jne 0x825b5; add rsp, 0x110; pop rbx; ret; 
0x00000000004480b6: add byte ptr [rax], al; mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000040dbe9: add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000047e60f: add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004687c2: add byte ptr [rax], al; mov eax, edx; pop rbx; ret; 
0x0000000000465f61: add byte ptr [rax], al; mov eax, edx; ret; 
0x000000000040faa0: add byte ptr [rax], al; mov eax, esi; jne 0xfaaf; add rsp, 0xd0; pop rbx; ret; 
0x000000000040dc36: add byte ptr [rax], al; mov eax, r8d; jne 0xdc5c; add rsp, 0x118; ret; 
0x000000000049f0a2: add byte ptr [rax], al; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000049edf2: add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000044475e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044413e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000044414e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000048ceac: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000449a3f: add byte ptr [rax], al; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000449b7a: add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000448f9e: add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x0000000000470636: add byte ptr [rax], al; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000040127d: add byte ptr [rax], al; mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000044bd4b: add byte ptr [rax], al; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000043568e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043561e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004355ae: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000434fde: add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fc1e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe1e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043001e: add byte ptr [rax], al; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004356fe: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004496b0: add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044be06: add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000047b523: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044bd46: add byte ptr [rax], al; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x00000000004719da: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000413e40: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041670f: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004acbd6: add byte ptr [rax], al; mov esp, 0x4000014; push -0xa; call qword ptr [rax]; 
0x00000000004a2a96: add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004abbd6: add byte ptr [rax], al; mov esp, 0xe4000004; xchg esp, eax; cmc; call rsp; 
0x00000000004addd6: add byte ptr [rax], al; mov esp, 0xf5000026; cmc; call qword ptr [rsi]; 
0x000000000044bfbe: add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000471a97: add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000484e48: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000480dda: add byte ptr [rax], al; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000481b70: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488382: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000488456: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000041655e: add byte ptr [rax], al; mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000480dd2: add byte ptr [rax], al; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000044f4d0: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000417502: add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000047b5d4: add byte ptr [rax], al; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000048d1ae: add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041751e: add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417509: add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000484478: add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x0000000000412a52: add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000047f2de: add byte ptr [rax], al; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x000000000041917c: add byte ptr [rax], al; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x000000000041915c: add byte ptr [rax], al; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x0000000000418709: add byte ptr [rax], al; mov qword ptr [rip + 0x2a3602], 0; ret; 
0x000000000041869f: add byte ptr [rax], al; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x0000000000401810: add byte ptr [rax], al; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004787ee: add byte ptr [rax], al; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000047e43e: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7dd70; add rsp, 0xd8; ret; 
0x000000000041075c: add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048a95e: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0x8ace0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041a70e: add byte ptr [rax], al; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000045ac1e: add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ade1: add byte ptr [rax], al; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000047c596: add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000042f28e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000046b762: add byte ptr [rax], al; mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x0000000000469e75: add byte ptr [rax], al; mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046c35b: add byte ptr [rax], al; mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000045ad1e: add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000045ab5e: add byte ptr [rax], al; mov rax, 0xffffffffffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000449586: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a4de: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x0000000000475916: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000465f4e: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000047fcae: add byte ptr [rax], al; mov rax, 0xffffffffffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045abbe: add byte ptr [rax], al; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab9e: add byte ptr [rax], al; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab7e: add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041786e: add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000047484e: add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000047485e: add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000047486e: add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000047487e: add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000047488e: add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000047489e: add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004748ae: add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000047cba3: add byte ptr [rax], al; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000041176e: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000481a3e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000481a2e: add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047d202: add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047c3be: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047c27b: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000484dd6: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000443bbe: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044240e: add byte ptr [rax], al; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000418fbe: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000471e9e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041862e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d12e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d1be: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d21e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d20e: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d1ce: add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041916e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a0696], 1; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x000000000041914e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x00000000004191ce: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a2bba], eax; ret; 
0x000000000041903e: add byte ptr [rax], al; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x000000000047f37e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x239d69]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x00000000004579ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2644a1]; ret; 
0x000000000044f47e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x26d4b1]; ret; 
0x000000000041860e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x000000000048aefe: add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000048ac63: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a967: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041a87d: add byte ptr [rax], al; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474c31: add byte ptr [rax], al; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000473a6e: add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x0000000000413ce4: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d328: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000488414: add byte ptr [rax], al; mov rax, rbx; jne 0x8842c; add rsp, 0x40; pop rbx; ret; 
0x00000000004884fb: add byte ptr [rax], al; mov rax, rbx; jne 0x88514; add rsp, 0x50; pop rbx; ret; 
0x0000000000414662: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041863e: add byte ptr [rax], al; mov rax, rdi; ret; 
0x000000000041dc0e: add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000047fa0a: add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000042f64e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f82e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa0e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fbfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fdfe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fffe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f46e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004447ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044417e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000044418e: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446eff: add byte ptr [rax], al; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040ea01: add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000491ffe: add byte ptr [rax], al; mov rdi, r13; call rax; 
0x000000000046079c: add byte ptr [rax], al; mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000049175e: add byte ptr [rax], al; mov rdi, r15; call rax; 
0x000000000041106d: add byte ptr [rax], al; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000046eeff: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004582e4: add byte ptr [rax], al; mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x4d3c0; mov rdi, r14; call rbx; 
0x0000000000411763: add byte ptr [rax], al; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000449be6: add byte ptr [rax], al; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000044981e: add byte ptr [rax], al; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000484dc6: add byte ptr [rax], al; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000484e41: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000401180: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0x2bac1f]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004354ce: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043545e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353ee: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043530e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043529e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043522e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000434cde: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434b4e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434abe: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2ae: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d5e: add byte ptr [rax], al; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043553e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000045e461: add byte ptr [rax], al; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046a1ae: add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000045debb: add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000413f7d: add byte ptr [rax], al; mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004126de: add byte ptr [rax], al; mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045e636: add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045dd06: add byte ptr [rax], al; mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000044a79b: add byte ptr [rax], al; mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047f215: add byte ptr [rax], al; mov rsi, qword ptr [rip + 0x23d192]; jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x0000000000420256: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000491756: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x0000000000413ab9: add byte ptr [rax], al; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004704fb: add byte ptr [rax], al; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004234be: add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000412486: add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000045add9: add byte ptr [rax], al; mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000044962f: add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x00000000004af8a6: add byte ptr [rax], al; mov word ptr [rcx], es; add byte ptr [rbx + rax*4], ah; stc; jmp rbx; 
0x000000000040dbca: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd2: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbda: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000044422e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004442ae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044426e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044428e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004443ae: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000044434e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044436e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044438e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000044487e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x00000000004441fe: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004af3be: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; cmp al, 0; add byte ptr [rsi + rcx], bh; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004b4eea: add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; std; jmp rsp; 
0x0000000000480ece: add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x000000000048afb5: add byte ptr [rax], al; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000046f0b4: add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045a35d: add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000459e5e: add byte ptr [rax], al; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x0000000000446e35: add byte ptr [rax], al; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000048c003: add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004154be: add byte ptr [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c361: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000445fbe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x000000000044601e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044600e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445ffe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445fee: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fde: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000445fce: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000446378: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x464f5; xor eax, eax; ret; 
0x000000000042d08e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042ce41: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042bf6e: add byte ptr [rax], al; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004166ce: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bbe: add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x00000000004480ee: add byte ptr [rax], al; movzx eax, cl; pop rbx; ret; 
0x0000000000450b3e: add byte ptr [rax], al; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000425bee: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000046c91f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8cc: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c39f: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c73e: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6f9: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6b4: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c665: add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000043516e: add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000043584e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004350ee: add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004357de: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000416bbf: add byte ptr [rax], al; movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000044a5b9: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000475519: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x0000000000475519: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x000000000044a589: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000047cbf1: add byte ptr [rax], al; nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000044bc6a: add byte ptr [rax], al; nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x0000000000418fda: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a0815], rax; ret; 
0x0000000000401282: add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000434fd4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045ad14: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000045abb4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab94: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000435164: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004b0df2: add byte ptr [rax], al; or al, 0x17; cli; call rcx; 
0x00000000004af526: add byte ptr [rax], al; or al, 0x3e; add byte ptr [rax], al; adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x00000000004b0c26: add byte ptr [rax], al; or al, 0x55; add byte ptr [rax], al; mov ah, 3; cli; jmp qword ptr [rdx]; 
0x00000000004b449a: add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x00000000004af6a6: add byte ptr [rax], al; or byte ptr [rbx - 7], dh; call qword ptr [rdi]; 
0x0000000000484547: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000047ba9e: add byte ptr [rax], al; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x00000000004b4922: add byte ptr [rax], al; or byte ptr [rdx + 0x7a80000], dl; std; call qword ptr [rdi]; 
0x0000000000412dce: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047fc94: add byte ptr [rax], al; or dword ptr [rip + 0x23a54b], 1; pop rbx; ret; 
0x000000000042b299: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004b0e86: add byte ptr [rax], al; pop rax; and dl, bh; call qword ptr [rdi]; 
0x00000000004adb66: add byte ptr [rax], al; pop rax; mov ah, 0xf6; call qword ptr [rdx]; 
0x000000000044a64e: add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000400aa6: add byte ptr [rax], al; pop rbp; ret; 
0x0000000000465f0b: add byte ptr [rax], al; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000457b2a: add byte ptr [rax], al; pop rbx; pop r12; ret; 
0x0000000000414193: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000417145: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000040fc3a: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000400de6: add byte ptr [rax], al; pop rbx; ret; 
0x00000000004b167e: add byte ptr [rax], al; pop rdi; add byte ptr [rax], al; sbb al, 0x95; cli; call qword ptr [rcx]; 
0x00000000004b0e82: add byte ptr [rax], al; push 0x58000057; and dl, bh; call qword ptr [rdi]; 
0x00000000004b1982: add byte ptr [rax], al; push 0x78000062; mov al, 0xfa; call qword ptr [rax]; 
0x00000000004b336a: add byte ptr [rax], al; push rax; jl 0xb336f; add byte ptr [rax + 0x2b], al; cld; call qword ptr [rax + 5]; 
0x00000000004b3bbe: add byte ptr [rax], al; push rax; mov bh, 0xfc; jmp qword ptr [rdx]; 
0x000000000045147b: add byte ptr [rax], al; push rax; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004b516e: add byte ptr [rax], al; push rax; pop rcx; std; call qword ptr [rdx]; 
0x00000000004b0a6a: add byte ptr [rax], al; push rax; push rbx; add byte ptr [rax], al; sar dl, 0xfd; jmp qword ptr [rdx]; 
0x00000000004af49e: add byte ptr [rax], al; push rax; xchg esi, eax; clc; call qword ptr [rax]; 
0x00000000004b20fe: add byte ptr [rax], al; push rax; iretd; sti; jmp qword ptr [rbx + 8]; 
0x00000000004adc1a: add byte ptr [rax], al; push rsp; mov ch, 0xf6; call qword ptr [rsi]; 
0x00000000004b4cea: add byte ptr [rax], al; rcl byte ptr [rbp + 0x2fb00000]; std; jmp qword ptr [rbp]; 
0x00000000004b56da: add byte ptr [rax], al; rcr byte ptr [rdi - 0x7af00000], 0xfd; call qword ptr [rbx]; 
0x00000000004b51ea: add byte ptr [rax], al; rcr byte ptr [rdx + 0x5d300000], 1; std; jmp qword ptr [rcx + 9]; 
0x0000000000498286: add byte ptr [rax], al; ret 0; 
0x000000000049f1fe: add byte ptr [rax], al; ret 0x10; 
0x00000000004a0ece: add byte ptr [rax], al; ret 0x1d4; 
0x00000000004a1666: add byte ptr [rax], al; ret 0x1d5; 
0x000000000049fed6: add byte ptr [rax], al; ret 0x24; 
0x00000000004a03c6: add byte ptr [rax], al; ret 0x33; 
0x000000000049e9fe: add byte ptr [rax], al; ret 0xa; 
0x000000000049edfe: add byte ptr [rax], al; ret 0xd; 
0x00000000004a22a2: add byte ptr [rax], al; ret 1; 
0x00000000004a24a2: add byte ptr [rax], al; ret 2; 
0x00000000004a26a2: add byte ptr [rax], al; ret 3; 
0x00000000004a28a2: add byte ptr [rax], al; ret 4; 
0x00000000004a2aa2: add byte ptr [rax], al; ret 5; 
0x000000000049e5a6: add byte ptr [rax], al; ret 6; 
0x00000000004a2ea2: add byte ptr [rax], al; ret 7; 
0x00000000004a30a2: add byte ptr [rax], al; ret 8; 
0x00000000004a32a2: add byte ptr [rax], al; ret 9; 
0x00000000004a289e: add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x000000000049eca6: add byte ptr [rax], al; ror byte ptr [rax + rax], 0; ret; 
0x00000000004b3fea: add byte ptr [rax], al; ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x00000000004b2cfe: add byte ptr [rax], al; ror byte ptr [rbx], 0xfc; jmp qword ptr [rax]; 
0x00000000004b3fee: add byte ptr [rax], al; ror ch, 1; cld; jmp qword ptr [rsi]; 
0x00000000004b3f0e: add byte ptr [rax], al; ror dl, 0xfc; jmp qword ptr [rcx]; 
0x00000000004af4ea: add byte ptr [rax], al; sar byte ptr [rip - 0x26700000], 1; clc; call qword ptr [rax]; 
0x00000000004b0a6e: add byte ptr [rax], al; sar dl, 0xfd; jmp qword ptr [rdx]; 
0x000000000048d195: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000473734: add byte ptr [rax], al; sar rdx, cl; test rdx, rdx; je 0x737e0; bsf rax, rdx; ret; 
0x00000000004addd2: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; mov esp, 0xf5000026; cmc; call qword ptr [rsi]; 
0x00000000004b3fe6: add byte ptr [rax], al; sbb al, 0; add byte ptr [rax], al; ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x00000000004ad37e: add byte ptr [rax], al; sbb al, 0; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004b4536: add byte ptr [rax], al; sbb al, 0x8e; add byte ptr [rax], al; test al, dh; cld; jmp qword ptr [rdx + 5]; 
0x00000000004b4736: add byte ptr [rax], al; sbb al, 0x90; add byte ptr [rax], al; add al, 4; std; jmp qword ptr [rdx]; 
0x00000000004b1682: add byte ptr [rax], al; sbb al, 0x95; cli; call qword ptr [rcx]; 
0x00000000004ab8c6: add byte ptr [rax], al; sbb byte ptr [rcx - 0xb], ah; call qword ptr [rbx + 1]; 
0x00000000004af932: add byte ptr [rax], al; sbb byte ptr [rdx], al; add byte ptr [rax - 0x7b], ch; stc; call qword ptr [rbx]; 
0x00000000004af132: add byte ptr [rax], al; sbb byte ptr [rdx], bh; add byte ptr [rax], al; cmp byte ptr [rdx - 9], dl; jmp qword ptr [rbx]; 
0x00000000004af516: add byte ptr [rax], al; sbb ch, dh; clc; call qword ptr [rax]; 
0x000000000049fece: add byte ptr [rax], al; shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x0000000000495e5e: add byte ptr [rax], al; shr byte ptr [rbx - 5], 1; push rsp; push 0x6bb0fffb; sti; jmp rax; 
0x00000000004b0f2e: add byte ptr [rax], al; shr byte ptr [rdi], 1; cli; jmp qword ptr [rdi + 0x11]; 
0x000000000041ec8c: add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004b4496: add byte ptr [rax], al; sub al, 0; add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x00000000004b4ad2: add byte ptr [rax], al; sub al, 0x10; std; call qword ptr [rax]; 
0x00000000004af946: add byte ptr [rax], al; sub al, 0x42; add byte ptr [rax], al; je 0xaf8d3; stc; call qword ptr [rcx + 1]; 
0x00000000004af7e2: add byte ptr [rax], al; sub al, 0x7a; stc; call rsp; 
0x00000000004ad37a: add byte ptr [rax], al; sub byte ptr [rax], al; add byte ptr [rax], al; sbb al, 0; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004b5c42: add byte ptr [rax], al; sub byte ptr [rbp - 0x5ef80000], ah; std; jmp qword ptr [rax]; 
0x00000000004b4842: add byte ptr [rax], al; sub byte ptr [rcx + 0x6980000], dl; std; jmp qword ptr [rbp]; 
0x00000000004b1116: add byte ptr [rax], al; sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x00000000004b1842: add byte ptr [rax], al; sub byte ptr [rcx], ah; add byte ptr [rax - 0xb], ch; std; call rdx; 
0x00000000004b4976: add byte ptr [rax], al; sub byte ptr [rcx], cl; std; call qword ptr [rax]; 
0x00000000004af676: add byte ptr [rax], al; sub byte ptr [rdi - 7], dl; jmp qword ptr [rbx + 0x17]; 
0x00000000004af642: add byte ptr [rax], al; sub byte ptr [rdi], bh; add byte ptr [rax], al; mov byte ptr [rbp - 7], cl; jmp qword ptr [rdi + 6]; 
0x000000000042cf2c: add byte ptr [rax], al; sub eax, ecx; ret; 
0x00000000004b336e: add byte ptr [rax], al; sub edi, esp; call qword ptr [rax + 5]; 
0x00000000004ae066: add byte ptr [rax], al; sub qword ptr [rax], r8; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x00000000004137b8: add byte ptr [rax], al; sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004179b6: add byte ptr [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471bf6: add byte ptr [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000446a41: add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000471d0e: add byte ptr [rax], al; sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000048a770: add byte ptr [rax], al; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x0000000000444ca4: add byte ptr [rax], al; test ah, 0x40; jne 0x44d90; lea rax, [rdi + 0xf]; ret; 
0x0000000000444c52: add byte ptr [rax], al; test al, 0x40; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x00000000004963f6: add byte ptr [rax], al; test al, 0x70; sti; call ptr [rsi + 0x73]; sti; jmp qword ptr [rsi]; 
0x00000000004ab8c2: add byte ptr [rax], al; test al, 1; add byte ptr [rax], al; sbb byte ptr [rcx - 0xb], ah; call qword ptr [rbx + 1]; 
0x00000000004b47e6: add byte ptr [rax], al; test al, 5; std; jmp rdx; 
0x00000000004b4926: add byte ptr [rax], al; test al, 7; std; call qword ptr [rdi]; 
0x00000000004b453a: add byte ptr [rax], al; test al, dh; cld; jmp qword ptr [rdx + 5]; 
0x00000000004b3b1b: add byte ptr [rax], al; test byte ptr [rax], al; add al, ah; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004abc5e: add byte ptr [rax], al; test byte ptr [rax], al; add byte ptr [rax], al; add rax, -0x64f80000; cmc; call rax; 
0x0000000000422d3e: add byte ptr [rax], al; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x00000000004ac1ba: add byte ptr [rax], al; test byte ptr [rsi + rsi*8], ch; call qword ptr [rdx]; 
0x00000000004af8bf: add byte ptr [rax], al; test cl, bh; call qword ptr [rdx]; 
0x0000000000444bc5: add byte ptr [rax], al; test dh, 0x40; jne 0x44b00; lea rax, [rdi + 0xf]; ret; 
0x0000000000444c0b: add byte ptr [rax], al; test dh, 4; jne 0x44b00; lea rax, [rdi + 0xb]; ret; 
0x0000000000444b42: add byte ptr [rax], al; test dl, 0x40; jne 0x44b00; lea rax, [rdi + 7]; ret; 
0x0000000000444b70: add byte ptr [rax], al; test dl, 4; jne 0x44b00; lea rax, [rdi + 3]; ret; 
0x000000000044bbf9: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x0000000000400409: add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000400409: add byte ptr [rax], al; test rax, rax; je 0x412; call rax; add rsp, 8; ret; 
0x000000000048d1ee: add byte ptr [rax], al; test rax, rax; je 0x8d200; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000400a94: add byte ptr [rax], al; test rax, rax; je 0xaa8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400ad6: add byte ptr [rax], al; test rax, rax; je 0xae8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x00000000004900a9: add byte ptr [rax], al; test rbx, rbx; mov qword ptr [rip + 0x22bc3b], rbx; jne 0x90098; pop rbx; ret; 
0x0000000000486c27: add byte ptr [rax], al; test rdx, rdx; je 0x86c38; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047369e: add byte ptr [rax], al; test rsi, rsi; jne 0x736a9; xor rax, rax; ret; 
0x000000000042b84e: add byte ptr [rax], al; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440b8e: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b83e: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004af4ae: add byte ptr [rax], al; xchg esp, eax; cmp eax, 0x964c0000; clc; jmp qword ptr [rsi]; 
0x00000000004b00aa: add byte ptr [rax], al; xchg esp, eax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x00000000004af4b2: add byte ptr [rax], al; xchg rsi, rax; clc; jmp qword ptr [rsi]; 
0x00000000004b16aa: add byte ptr [rax], al; xor al, 0x95; cli; call qword ptr [rax]; 
0x00000000004b4e4e: add byte ptr [rax], al; xor al, 0x97; add byte ptr [rax], al; cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x00000000004b134a: add byte ptr [rax], al; xor byte ptr [rax + rax], bl; jo 0xb1344; std; jmp qword ptr [rdi]; 
0x00000000004b51ee: add byte ptr [rax], al; xor byte ptr [rbp - 3], bl; jmp qword ptr [rcx + 9]; 
0x00000000004b044a: add byte ptr [rax], al; xor byte ptr [rbp], cl; add byte ptr [rax - 0x46], dh; stc; call qword ptr [rcx]; 
0x000000000045c9b7: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000040ece3: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d335: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000475cd6: add byte ptr [rax], al; xor eax, eax; leave; ret; 
0x000000000040f296: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044984e: add byte ptr [rax], al; xor eax, eax; syscall; 
0x000000000042b77a: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000046bc93: add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000044a514: add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000044a32a: add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000040dc14: add byte ptr [rax], al; xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000044bdfc: add byte ptr [rax], al; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000046cd86: add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000444afe: add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004ac232: add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x0000000000460e07: add byte ptr [rax], al; cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x0000000000460db6: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461165: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461117: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461068: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046100c: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d6c: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d1e: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608bd: add byte ptr [rax], al; cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b0012: add byte ptr [rax], al; clc; add byte ptr [rax], al; js 0xaffbf; stc; jmp qword ptr [rcx]; 
0x00000000004af512: add byte ptr [rax], al; clc; cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x00000000004481b4: add byte ptr [rax], al; clc; jg 0x481b0; int1; mov eax, eax; ret; 
0x00000000004b3112: add byte ptr [rax], al; clc; jns 0xb3117; add al, bl; and edi, esp; jmp qword ptr [rcx]; 
0x00000000004b1112: add byte ptr [rax], al; clc; pop rcx; add byte ptr [rax], al; sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x00000000004b5a66: add byte ptr [rax], al; clc; cdq; std; call qword ptr [rdx]; 
0x00000000004adc16: add byte ptr [rax], al; cld; and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x00000000004addda: add byte ptr [rax], al; cmc; cmc; call qword ptr [rsi]; 
0x00000000004b282f: add byte ptr [rax], al; cmc; sti; jmp qword ptr [rdx]; 
0x00000000004af5b2: add byte ptr [rax], al; cwde; add byte ptr ds:[rax], al; fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x00000000004b2ab2: add byte ptr [rax], al; cwde; jae 0xb2ab7; add byte ptr [rax - 5], cl; sti; call qword ptr [rsi + 1]; 
0x00000000004b2546: add byte ptr [rax], al; cwde; out 0xfb, eax; jmp qword ptr [rdi]; 
0x00000000004b2b06: add byte ptr [rax], al; cwde; cld; sti; jmp qword ptr [rbx]; 
0x00000000004b4676: add byte ptr [rax], al; cwde; std; cld; call qword ptr [rax]; 
0x0000000000400c11: add byte ptr [rax], al; leave; ret; 
0x00000000004b58ae: add byte ptr [rax], al; nop; mov bh, ch; jmp qword ptr [rbx]; 
0x000000000048528c: add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000048528c: add byte ptr [rax], al; nop; mov eax, 0x27; syscall; ret; 
0x000000000044bc9c: add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000474dbc: add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x0000000000474dbc: add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; ret; 
0x000000000045af3c: add byte ptr [rax], al; nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x00000000004b002e: add byte ptr [rax], al; nop; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004ab78e: add byte ptr [rax], al; nop; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004ac1ce: add byte ptr [rax], al; nop; sub al, 0xf6; jmp qword ptr [rax]; 
0x00000000004af4ee: add byte ptr [rax], al; nop; fprem; call qword ptr [rax]; 
0x0000000000401563: add byte ptr [rax], al; ret; 
0x00000000004b2ab6: add byte ptr [rax], al; sti; sti; call qword ptr [rsi + 1]; 
0x000000000040dbe2: add byte ptr [rax], al; syscall; 
0x00000000004494d3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x000000000044a563: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x000000000044a593: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a5c3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x000000000044bc76: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000044bca3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bcb0; ret; 
0x00000000004754f3: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x75500; ret; 
0x0000000000488523: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x88530; ret; 
0x000000000044bd55: add byte ptr [rax], al; syscall; pop rdx; pop rsi; ret; 
0x0000000000474dc3: add byte ptr [rax], al; syscall; ret; 
0x000000000042b82e: add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000004adab7: add byte ptr [rax], bh; add byte ptr [rax], al; add byte ptr [rax + 0x40000023], ah; mov bl, 0xf6; call qword ptr [rsi]; 
0x00000000004b2b33: add byte ptr [rax], bl; je 0xb2b37; add al, cl; cld; sti; jmp qword ptr [rsi]; 
0x00000000004acfa7: add byte ptr [rax], bl; test dh, dh; call qword ptr [rdi]; 
0x00000000004af517: add byte ptr [rax], bl; cmc; clc; call qword ptr [rax]; 
0x00000000004acf9f: add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rax + 0x18000018], cl; test dh, dh; call qword ptr [rdi]; 
0x00000000004ad37b: add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rsp + rbx], ah; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004b4977: add byte ptr [rax], ch; or ebp, edi; call qword ptr [rax]; 
0x00000000004b2543: add byte ptr [rax], ch; outsb dx, byte ptr [rsi]; add byte ptr [rax], al; cwde; out 0xfb, eax; jmp qword ptr [rdi]; 
0x00000000004b1117: add byte ptr [rax], ch; pop rcx; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004af677: add byte ptr [rax], ch; push rdi; stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004b00f7: add byte ptr [rax], ch; stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x00000000004ac0e7: add byte ptr [rax], ch; sub dh, dh; jmp qword ptr [rax]; 
0x00000000004af8e7: add byte ptr [rax], ch; test cl, bh; call qword ptr [rbx]; 
0x00000000004b1697: add byte ptr [rax], ch; xchg ebp, eax; cli; call qword ptr [rcx]; 
0x00000000004b51e7: add byte ptr [rax], cl; add byte ptr [rax], al; rcr byte ptr [rdx + 0x5d300000], 1; std; jmp qword ptr [rcx + 9]; 
0x00000000004b5c3f: add byte ptr [rax], cl; add byte ptr [rax], al; sub byte ptr [rbp - 0x5ef80000], ah; std; jmp qword ptr [rax]; 
0x00000000004af6a7: add byte ptr [rax], cl; jae 0xaf6a4; call qword ptr [rdi]; 
0x000000000048b8fe: add byte ptr [rax], cl; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8f7: add byte ptr [rax], cl; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8f0: add byte ptr [rax], cl; mov byte ptr [rip + 0x2308b5], 8; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8e9: add byte ptr [rax], cl; mov byte ptr [rip + 0x2308bb], 8; mov byte ptr [rip + 0x2308b5], 8; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x00000000004b1657: add byte ptr [rax], cl; xchg ebp, eax; cli; call qword ptr [rdi]; 
0x00000000004b4923: add byte ptr [rax], cl; xchg edx, eax; add byte ptr [rax], al; test al, 7; std; call qword ptr [rdi]; 
0x000000000048b905: add byte ptr [rax], cl; ret; 
0x00000000004abc67: add byte ptr [rax], cl; wait; cmc; call rax; 
0x00000000004b044b: add byte ptr [rax], dh; add byte ptr [r8], r8b; jo 0xb040c; stc; call qword ptr [rcx]; 
0x00000000004b3ab7: add byte ptr [rax], dh; add byte ptr [rax], al; add byte ptr [rax - 0xfffff7d], ah; stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x00000000004ab78b: add byte ptr [rax], dh; add byte ptr [rax], al; nop; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004b51ef: add byte ptr [rax], dh; pop rbp; std; jmp qword ptr [rcx + 9]; 
0x00000000004b134b: add byte ptr [rax], dh; pop rsp; add byte ptr [rax], al; jo 0xb1344; std; jmp qword ptr [rdi]; 
0x00000000004afecf: add byte ptr [rax], dh; popfq; stc; call qword ptr [rbx]; 
0x00000000004b002b: add byte ptr [rax], dl; add byte ptr [r8], al; nop; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x00000000004adc13: add byte ptr [rax], dl; add byte ptr [rax], al; add ah, bh; and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x00000000004af50f: add byte ptr [rax], dl; add byte ptr [rax], al; add al, bh; cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x00000000004af4e7: add byte ptr [rax], dl; add byte ptr [rax], al; add al, dl; cmp eax, 0xd9900000; clc; call qword ptr [rax]; 
0x00000000004af8b7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x41], ah; test cl, bh; call qword ptr [rdx]; 
0x00000000004af497: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x5000003d], al; xchg esi, eax; clc; call qword ptr [rax]; 
0x00000000004b3bb7: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x50000084], ah; mov bh, 0xfc; jmp qword ptr [rdx]; 
0x00000000004abbbf: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x27fffffc], ch; xchg esp, eax; cmc; call qword ptr [rdx]; 
0x00000000004ac19f: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax - 0x77fffff6], cl; sub al, 0xf6; call qword ptr [rax]; 
0x00000000004af4ab: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rbp + rdi - 0x69b40000], dl; clc; jmp qword ptr [rsi]; 
0x00000000004af8a3: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rcx + rax*2 - 0x7cdc0000], cl; stc; jmp rbx; 
0x00000000004b16a3: add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rdi + rbx*2 - 0x6acc0000], cl; cli; call qword ptr [rax]; 
0x0000000000473c5f: add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x000000000047fa08: add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000004b282b: add byte ptr [rax], dl; jno 0xb282f; add byte ptr [rax], al; cmc; sti; jmp qword ptr [rdx]; 
0x0000000000485065: add byte ptr [rax], dl; lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x00000000004237c5: add byte ptr [rax], dl; lea rdx, [rip + 0x23282]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000424355: add byte ptr [rax], dl; lea rdx, [rip - 0x59e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004b0f2b: add byte ptr [rax], dl; pop rax; add byte ptr [rax], al; shr byte ptr [rdi], 1; cli; jmp qword ptr [rdi + 0x11]; 
0x00000000004b56df: add byte ptr [rax], dl; test ebp, edi; call qword ptr [rbx]; 
0x00000000004b166f: add byte ptr [rax], dl; xchg ebp, eax; cli; call qword ptr [rcx]; 
0x00000000004b373f: add byte ptr [rax], dl; cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b20f8: add byte ptr [rax], r8b; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004afec8: add byte ptr [rax], r8b; add byte ptr [rax + 0x30000047], dh; popfq; stc; call qword ptr [rbx]; 
0x00000000004b2ab0: add byte ptr [rax], r8b; add byte ptr [rax + 0x48000073], bl; sti; sti; call qword ptr [rsi + 1]; 
0x00000000004b4c98: add byte ptr [rax], r8b; add byte ptr [rax + 0x60000095], al; std; jmp qword ptr [rax + 1]; 
0x00000000004b3738: add byte ptr [rax], r8b; add byte ptr [rax], ah; add byte ptr [rax], 0; adc byte ptr [rbp - 4], ah; jmp qword ptr [rcx + 0xe]; 
0x00000000004acb84: add byte ptr [rax], r8b; add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x000000000044b18d: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423815: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047f30d: add byte ptr [rax], r8b; cmp byte ptr [rip + 0x23d4b1], 0; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000416675: add byte ptr [rax], r8b; cmp eax, -1; je 0x165f8; mov eax, 0xffffffff; ret; 
0x0000000000416865: add byte ptr [rax], r8b; cmp eax, -1; je 0x167e8; mov eax, 0xffffffff; ret; 
0x00000000004182cd: add byte ptr [rax], r8b; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000044473d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x00000000004236dd: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000044a5bd: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; 
0x000000000044a5bd: add byte ptr [rax], r8b; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x000000000047551d: add byte ptr [rax], r8b; mov eax, 0x66; syscall; 
0x000000000047551d: add byte ptr [rax], r8b; mov eax, 0x66; syscall; ret; 
0x000000000044a58d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; 
0x000000000044a58d: add byte ptr [rax], r8b; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000041876d: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x00000000004182dd: add byte ptr [rax], r8b; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000044bbed: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x270cca]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000470635: add byte ptr [rax], r8b; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000044412d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004787ed: add byte ptr [rax], r8b; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000045ab5d: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000449585: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000475915: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041786d: add byte ptr [rax], r8b; mov rax, 0xffffffffffffffff; ret; 
0x000000000047cbf5: add byte ptr [rax], r8b; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000418fbd: add byte ptr [rax], r8b; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000041914d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x000000000041903d: add byte ptr [rax], r8b; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x0000000000474ced: add byte ptr [rax], r8b; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004447ad: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044418d: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044a33d: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004498ed: add byte ptr [rax], r8b; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044416d: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000420255: add byte ptr [rax], r8b; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x000000000044601d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044600d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445ffd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445fed: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fdd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000445fcd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000042bf6d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004166cd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000450b3d: add byte ptr [rax], r8b; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000434fd3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045ad13: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000045abb3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab93: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000435163: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e3: add byte ptr [rax], r8b; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000047ba9d: add byte ptr [rax], r8b; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000400aa5: add byte ptr [rax], r8b; pop rbp; ret; 
0x0000000000484b9d: add byte ptr [rax], r8b; pop rbx; ret; 
0x00000000004179b5: add byte ptr [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471bf5: add byte ptr [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000422d3d: add byte ptr [rax], r8b; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000042b84d: add byte ptr [rax], r8b; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x00000000004464fd: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x0000000000449536: add byte ptr [rbp + 0x10], dh; add rsp, 0x28; ret; 
0x000000000047f21d: add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x0000000000484faf: add byte ptr [rbp + 0x12], dh; add rsp, 0x38; ret; 
0x00000000004758ad: add byte ptr [rbp + 0x1b], dh; add rsp, 0x38; ret; 
0x000000000044877e: add byte ptr [rbp + 0x23], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000481db4: add byte ptr [rbp + 0x27], dh; add rsp, 0x68; ret; 
0x00000000004137b9: add byte ptr [rbp + 0x29], cl; hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000481cf4: add byte ptr [rbp + 0x2c], dh; add rsp, 0x38; ret; 
0x000000000041303a: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000473dba: add byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000471f1f: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004720fb: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000046cd87: add byte ptr [rbp + 0x31], al; ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000481f15: add byte ptr [rbp + 0x36], dh; add rsp, 0x78; ret; 
0x00000000004754af: add byte ptr [rbp + 0x38], dh; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000484220: add byte ptr [rbp + 0x3b], dh; leave; ret; 
0x000000000044a64f: add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x00000000004787e0: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000449766: add byte ptr [rbp + 0x42], dh; add rsp, 0x58; ret; 
0x000000000047577b: add byte ptr [rbp + 0x45], dh; add rsp, 0x58; ret; 
0x00000000004855ad: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000045aeb6: add byte ptr [rbp + 0x4a], dh; add rsp, 0x148; ret; 
0x0000000000416397: add byte ptr [rbp + 0x4a], dh; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000449af6: add byte ptr [rbp + 0x4a], dh; add rsp, 0x68; ret; 
0x00000000004531a1: add byte ptr [rbp + 0x6d880fd2], al; add al, 0; add bh, dh; ret 0xf800; 
0x00000000004107ad: add byte ptr [rbp + 0x76], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bb49: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000485b64: add byte ptr [rbp + 0xa], dh; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000482e4f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x0000000000482d3f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x000000000044a465: add byte ptr [rbp + 0xf], dh; add rsp, 0x28; ret; 
0x000000000048830a: add byte ptr [rbp + 0xf], dh; add rsp, 0x38; ret; 
0x000000000047f316: add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x000000000048777a: add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000045ac6e: add byte ptr [rbp + 5], dh; add rsp, 0x18; ret; 
0x0000000000484ecc: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x0000000000419f1f: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000040f7b1: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x00000000004757fe: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000482615: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d158: add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x00000000004af94b: add byte ptr [rbp + rax*4 - 7], dh; call qword ptr [rcx + 1]; 
0x00000000004acc7b: add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x000000000048d070: add byte ptr [rbp + rbx + 0x48], dh; add esp, 0x18; ret; 
0x000000000049edf7: add byte ptr [rbp + rcx + 0xdbf0000], bh; add byte ptr [rax], al; ret 0xd; 
0x000000000042e66f: add byte ptr [rbp + rcx*4 + 0x1d], cl; cmp dword ptr [rdx + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3cf: add byte ptr [rbp + rcx*4 + 0x1d], cl; fstp dword ptr [rsi + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430aff: add byte ptr [rbp + rcx*4 + 0x1d], cl; imul esi, dword ptr [rdi], 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e51f: add byte ptr [rbp + rcx*4 + 0x1d], cl; mov dword ptr [rbx + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef9f: add byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rcx + 6], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de8f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sbb dword ptr [rdx + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043181f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub al, byte ptr [r14]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e27f: add byte ptr [rbp + rcx*4 + 0x1d], cl; sub dword ptr [rsi + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000468ae2: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041ef7b: add byte ptr [rbp + rcx*4 + 0x46], cl; dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000041e599: add byte ptr [rbp + rcx*4 + 0x46], cl; jmp qword ptr [rsi - 0x70]; 
0x000000000047200e: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000472108: add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x0000000000472202: add byte ptr [rbp + rcx*4 + 0x4d], cl; ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x000000000048f9a6: add byte ptr [rbp + rcx*4 + 5], cl; or bh, byte ptr [rbp - 0x49f0ffff]; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004af4af: add byte ptr [rbp + rdi - 0x69b40000], dl; clc; jmp qword ptr [rsi]; 
0x00000000004acc77: add byte ptr [rbp + rdx], bl; add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x00000000004adc1b: add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x00000000004245dc: add byte ptr [rbp - 0x12], dh; test byte ptr [rip + 0x297817], 2; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x000000000044bde1: add byte ptr [rbp - 0x14], dh; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bdf0; ret; 
0x000000000044bd7e: add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x00000000004900b4: add byte ptr [rbp - 0x1f], dh; pop rbx; ret; 
0x0000000000465e4f: add byte ptr [rbp - 0x2dce00b9], cl; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000041965b: add byte ptr [rbp - 0x38ef8b40], al; add eax, 0x2a2706; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044bbfa: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000049f0a3: add byte ptr [rbp - 0x3ffffff1], bh; sldt word ptr [rax]; ret; 
0x0000000000475644: add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000449885: add byte ptr [rbp - 0x47e98a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000449b55: add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000049e043: add byte ptr [rbp - 0x48000000], dh; add byte ptr [rax], al; add byte ptr [rax + rax + 0xbf0000], bh; add byte ptr [rax], al; ret 0; 
0x0000000000448dd7: add byte ptr [rbp - 0x57c03b0], cl; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x000000000044923a: add byte ptr [rbp - 0x6d], dh; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000468c89: add byte ptr [rbp - 0x75], cl; je 0x68cb2; and byte ptr [rax + 1], cl; ret; 
0x000000000041cd8e: add byte ptr [rbp - 0x75], cl; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000046efc7: add byte ptr [rbp - 0x76ba7fec], cl; call 0x1ff1913; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000045875f: add byte ptr [rbp - 0x7cf78140], al; call 0x849106b; pop rbx; ret; 
0x000000000044d365: add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000048f447: add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000043d0f9: add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000448645: add byte ptr [rbx + 0x157401f8], al; cmp eax, 2; je 0x48658; xor eax, eax; ret; 
0x0000000000491443: add byte ptr [rbx + 0x2283ca3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004852ad: add byte ptr [rbx + 0x236eac0d], cl; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000047fc95: add byte ptr [rbx + 0x23a54b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000047f0b2: add byte ptr [rbx + 0x23cf7705], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000047f015: add byte ptr [rbx + 0x23d01405], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000044d35f: add byte ptr [rbx + 0x26f5aa05], cl; add byte ptr [rbp - 0xcf98b40], al; ret; 
0x000000000044bbef: add byte ptr [rbx + 0x270cca05], cl; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000449b4f: add byte ptr [rbx + 0x272cb605], cl; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000042385f: add byte ptr [rbx + 0x29858a15], cl; add bh, dh; ret 0; 
0x00000000004201cf: add byte ptr [rbx + 0x29963e3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004186a7: add byte ptr [rbx + 0x2a366505], al; add byte ptr [rcx], al; ret; 
0x0000000000419c9f: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000475349: add byte ptr [rbx + 0x31d2313b], cl; imul al; sti; std; jmp qword ptr [rsi + 0xf]; 
0x000000000044478f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000044415f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000457b2b: add byte ptr [rbx + 0x41], bl; pop rsp; ret; 
0x000000000040fd63: add byte ptr [rbx + 0x42894c03], cl; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x000000000044475f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044413f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000042cdb0: add byte ptr [rbx + 0x478bfc4e], cl; cld; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x0000000000443c6f: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000449b99: add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000045a55f: add byte ptr [rbx + 0x48], dl; mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a56f; call rax; 
0x000000000043001f: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe1f: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fc1f: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004462cb: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x464e0; xor eax, eax; ret; 
0x000000000042d012: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x0000000000434fdf: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x000000000042195f: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000412348: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000414194: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000405e01: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000040fc3b: add byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000459e5f: add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000047c787: add byte ptr [rbx + 0x7525087b], al; adc cl, byte ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000048f49f: add byte ptr [rbx + 0x75c08507], cl; or dh, bl; ret; 
0x00000000004852e0: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043568f: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000043561f: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004355af: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000473c4a: add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004afa2f: add byte ptr [rbx + rax*2], dl; add byte ptr [rax], al; lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x00000000004af8ab: add byte ptr [rbx + rax*4], ah; stc; jmp rbx; 
0x00000000004af85b: add byte ptr [rbx + rax*4], al; stc; call qword ptr [rdx]; 
0x00000000004b3a67: add byte ptr [rbx + rax*4], cl; add byte ptr [rcx + rbp*4 - 4], al; jmp qword ptr [rdx]; 
0x000000000048d117: add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x00000000004530cb: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004843f7: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000488217: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004b42cf: add byte ptr [rbx + rcx*4 - 0x20b40000], dh; cld; call qword ptr [rdi + 1]; 
0x0000000000457819: add byte ptr [rbx + rcx*4 - 0x5c], cl; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ac22f: add byte ptr [rbx + rcx], dl; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x00000000004b4acf: add byte ptr [rbx + rdx*4 + 0x102c0000], dh; std; call qword ptr [rax]; 
0x0000000000484e10: add byte ptr [rbx - 0x17], bl; or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000044d36f: add byte ptr [rbx - 0x18], dl; mov edx, 0x89000281; ret; 
0x00000000004499f7: add byte ptr [rbx - 0x358af602], al; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000494124: add byte ptr [rbx - 0x42ff0007], bh; stc; inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x000000000046ceff: add byte ptr [rbx - 0x4f743], al; jmp qword ptr [rax]; 
0x00000000004483de: add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x00000000004674a2: add byte ptr [rbx - 0x6bf00008], al; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000484da1: add byte ptr [rbx - 0x72b7efbd], cl; adc eax, 0x25a00; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000443c7f: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004424bf: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x0000000000465f0c: add byte ptr [rbx - 0x77], bl; rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x000000000046c77b: add byte ptr [rbx - 0x78f0d008], al; mov eax, 0x8900001d; ret 0x349; 
0x000000000046be2d: add byte ptr [rbx - 0x78f0d008], al; mov ebx, 0x89000025; ret 0x349; 
0x0000000000461fdb: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000046b8df: add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900002b; ret 0x349; 
0x0000000000401554: add byte ptr [rbx - 0x7bf00008], al; int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000446126: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000406f45: add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000409f29: add byte ptr [rbx - 0x7bf0fc08], al; insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000040ac76: add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000410b48: add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000407cbc: add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x0000000000409f32: add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x0000000000409e8f: add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000048eebf: add byte ptr [rbx - 0x7fbf8f19], al; jmp qword ptr [rax]; 
0x00000000004698c3: add byte ptr [rbx - 0x8bf43], al; call qword ptr [rbx + 0xf]; 
0x000000000047b5c8: add byte ptr [rbx], al; add byte ptr [rax], al; lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000493e64: add byte ptr [rbx], bl; stc; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x0000000000494ba4: add byte ptr [rbx], ch; cli; push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x000000000041cdcf: add byte ptr [rcx + 0x1ba41ca], cl; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004671c5: add byte ptr [rcx + 0x29], cl; ret; 
0x000000000041153f: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x00000000004114a6: add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000489972: add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x000000000047380f: add byte ptr [rcx + 0x39], cl; ret; 
0x000000000040fcfd: add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x0000000000419140: add byte ptr [rcx + 0x4789246f], cl; adc byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040faa1: add byte ptr [rcx + 0x480975f0], cl; add esp, 0xd0; pop rbx; ret; 
0x000000000040fc30: add byte ptr [rcx + 0x480a75f0], cl; add esp, 0xd8; pop rbx; pop rbp; ret; 
0x0000000000482592: add byte ptr [rcx + 0x481e75d8], cl; add esp, 0x110; pop rbx; ret; 
0x0000000000412bb0: add byte ptr [rcx + 0x5c], al; pop r13; pop r14; ret; 
0x000000000047199c: add byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000042d97e: add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048afb6: add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x000000000045a35e: add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x000000000042c1dc: add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000443fb8: add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000460a11: add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000046c7ca: add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x000000000048a934: add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x0000000000473c44: add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000485966: add byte ptr [rcx + 0xc8b48d8], cl; ret 0xb60f; 
0x00000000004480b7: add byte ptr [rcx + 0xee8c1c8], cl; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000416bc0: add byte ptr [rcx + 0xf], al; mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x00000000004694d8: add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000478c4c: add byte ptr [rcx + 0xf], al; mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x0000000000466d77: add byte ptr [rcx + 0xf], al; xchg esp, eax; ret; 
0x000000000046bd8e: add byte ptr [rcx + 1], al; ret 0x8b48; 
0x000000000040e155: add byte ptr [rcx + 1], cl; ret 0x149; 
0x000000000048c205: add byte ptr [rcx + 1], cl; ret 0xef89; 
0x000000000044682f: add byte ptr [rcx + 1], cl; ret; 
0x000000000048d0ba: add byte ptr [rcx + 3], cl; adc al, 0; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000041911d: add byte ptr [rcx + rax + 0x57], al; sbb byte ptr [rax + 0x39], cl; ret; 
0x000000000047f174: add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000402202: add byte ptr [rcx + rax - 0x18], cl; jmp rax; 
0x00000000004af8a7: add byte ptr [rcx + rax*2 - 0x7cdc0000], cl; stc; jmp rbx; 
0x00000000004af857: add byte ptr [rcx + rax*2], bh; add byte ptr [rax], al; add al, 0x83; stc; call qword ptr [rdx]; 
0x000000000047575c: add byte ptr [rcx + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004b3a6b: add byte ptr [rcx + rbp*4 - 4], al; jmp qword ptr [rdx]; 
0x00000000004ae067: add byte ptr [rcx + rbp], cl; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x0000000000416a44: add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x00000000004b00a7: add byte ptr [rcx + rcx*2 - 0x596c0000], cl; stc; call rsi; 
0x0000000000472597: add byte ptr [rcx + rcx*4 + 0x23], cl; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000491fff: add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x0000000000413aba: add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000047d1f9: add byte ptr [rcx + rcx*4 - 0x12], cl; xor eax, eax; call 0x7e510; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000045e462: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046a1af: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000045debc: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004740d1: add byte ptr [rcx + rcx*4 - 0x17], cl; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x00000000004498b4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497e4: add byte ptr [rcx + rcx*4 - 0x1e], cl; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000044e74c: add byte ptr [rcx + rcx*4 - 0x1f], cl; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004126df: add byte ptr [rcx + rcx*4 - 0x36], cl; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000413f7e: add byte ptr [rcx + rcx*4 - 0x3e], cl; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000040dc37: add byte ptr [rcx + rcx*4 - 0x40], al; jne 0xdc5c; add rsp, 0x118; ret; 
0x000000000041a87e: add byte ptr [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474c32: add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x0000000000473a6f: add byte ptr [rcx + rcx*4 - 0x40], cl; vzeroupper; ret; 
0x0000000000417503: add byte ptr [rcx + rcx*4 - 0x7f], cl; xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004704fc: add byte ptr [rcx + rcx*4 - 0xa], cl; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000049175f: add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000474223: add byte ptr [rcx + rcx*4 - 7], cl; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000046079d: add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000423dff: add byte ptr [rcx + rcx*8 - 0x7cb7dd8c], al; ret 0x4801; 
0x000000000047563c: add byte ptr [rcx + rdi - 0x75], dh; add eax, 0x2471c7; test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x00000000004496b1: add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x000000000047e99e: add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000049edf3: add byte ptr [rcx - 0x43fffff3], bh; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x000000000045540f: add byte ptr [rcx - 0x46], al; add eax, 0xe9000000; ret; 
0x000000000045ade2: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000449b7b: add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000046c35c: add byte ptr [rcx - 0x48], al; add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046ff84: add byte ptr [rcx - 0x73], cl; add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000047f01b: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000047f0b8: add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0xc74; 
0x000000000046c777: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov eax, 0x8900001d; ret 0x349; 
0x000000000046b8db: add byte ptr [rcx - 0x75], al; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x000000000040e1c7: add byte ptr [rcx - 0x75], cl; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000045dd07: add byte ptr [rcx - 0x75], cl; ja 0x5dd24; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000049210f: add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x00000000004600df: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004111af: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046b9a4: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000048996b: add byte ptr [rcx - 0x75], cl; xchg edi, eax; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000046c18e: add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000044bd67: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000404840: add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000004917b2: add byte ptr [rcx - 0x77], cl; ret 0x8349; 
0x0000000000479c84: add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x000000000048a93a: add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000044a31f: add byte ptr [rcx - 0x77], cl; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000045e9e7: add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048aa49: add byte ptr [rcx - 0x7b], cl; ret 0x840f; 
0x000000000047145b: add byte ptr [rcx - 0x7cb7e8f4], cl; ret 0x4804; 
0x000000000045e871: add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x0000000000469d55: add byte ptr [rcx - 0x7d], al; in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000045b1b7: add byte ptr [rcx - 0x7d], cl; call qword ptr [rbx]; 
0x000000000041935f: add byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x000000000045b42e: add byte ptr [rcx - 0x7d], cl; ret 0x6601; 
0x000000000042603f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042494f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000041cdd7: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000046033d: add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000048d07f: add byte ptr [rcx - 0x80], al; mov ecx, 0xdf; add byte ptr [rdx + riz*8 + 0x48], dh; add esp, 0x18; ret; 
0x000000000047360b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004147e1: add byte ptr [rcx - 1], al; xchg edi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x000000000042ba02: add byte ptr [rcx - 9], cl; ret 1; 
0x000000000042ba28: add byte ptr [rcx - 9], cl; ret 2; 
0x00000000004557ce: add byte ptr [rcx], 0; add al, ch; imul eax, ebx, 0x8941fffa; ret 0x5be9; 
0x0000000000484607: add byte ptr [rcx], al; add byte ptr [rax + 9], cl; ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x0000000000419179: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2a0663; ret; 
0x0000000000419159: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0x2a067b; ret; 
0x000000000048b40a: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(1); ret; 
0x0000000000419f1b: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000447fa0: add byte ptr [rcx], al; add byte ptr [rax], al; cmp rdx, rcx; jne 0x47f82; vzeroupper; ret; 
0x0000000000446a3f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000040ebcf: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475755: add byte ptr [rcx], al; cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x0000000000422d2c: add byte ptr [rcx], al; je 0x22d58; test rax, rax; je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x000000000047575a: add byte ptr [rcx], al; je 0x75788; mov eax, 0x101; syscall; 
0x0000000000400b1b: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000047fc9b: add byte ptr [rcx], al; pop rbx; ret; 
0x00000000004186ad: add byte ptr [rcx], al; ret; 
0x000000000044bd1f: add byte ptr [rcx], bh; sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x000000000044d37c: add byte ptr [rcx], bh; ret; 
0x0000000000411c16: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041a76b: add byte ptr [rcx], dh; call qword ptr [rax + 0x31]; 
0x000000000047285b: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000477f3c: add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7d]; ret; 
0x00000000004730f1: add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000040ece4: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000042b30c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000040dc15: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000044d39b: add byte ptr [rcx], dh; sar byte ptr [rcx], cl; ret; 
0x00000000004754e5: add byte ptr [rcx], dh; shr bl, 0xb5; call 0x4be30; nop; mov eax, 0x3f; syscall; 
0x000000000046bc94: add byte ptr [rcx], dh; leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000447ee2: add byte ptr [rdi + 0x12], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447e82: add byte ptr [rdi + 0x7b], dh; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000048cead: add byte ptr [rdi + 1], bh; call rax; 
0x00000000004b16a7: add byte ptr [rdi + rbx*2 - 0x6acc0000], cl; cli; call qword ptr [rax]; 
0x00000000004b42d3: add byte ptr [rdi + rbx*8 - 4], cl; call qword ptr [rdi + 1]; 
0x000000000044c636: add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000463345: add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x00000000004ad383: add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004b4e4f: add byte ptr [rdi + rdx*4], dh; add byte ptr [rax], al; cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x00000000004b0df3: add byte ptr [rdi + rdx], cl; cli; call rcx; 
0x00000000004b461c: add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x000000000049f09b: add byte ptr [rdi - 0x45fffff1], dh; sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000049412c: add byte ptr [rdi - 0x4e6f0007], bh; stc; call qword ptr [rax - 0x4d]; 
0x0000000000446e36: add byte ptr [rdi], cl; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000435884: add byte ptr [rdi], cl; adc dword ptr [rbp + 0x4c000000], -0x73; sbb eax, 0x5f09e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dbf6: add byte ptr [rdi], cl; add eax, 0x8944c689; ret 0xeab8; 
0x0000000000480fb6: add byte ptr [rdi], cl; add eax, 0x940fc085; ret 0x3d; 
0x00000000004347a6: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x00000000004357df: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043584f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x0000000000445fef: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fdf: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000044600f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445fff: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445fcf: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000048c004: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046e9cb: add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x00000000004480ef: add byte ptr [rdi], cl; mov dh, 0xc1; pop rbx; ret; 
0x000000000048ad8d: add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000425bef: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000040d5a3: add byte ptr [rdi], cl; mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x00000000004166cf: add byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bbf: add byte ptr [rdi], cl; mov dh, 2; ret; 
0x000000000042bf6f: add byte ptr [rdi], cl; mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042baaf: add byte ptr [rdi], cl; mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000462523: add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x000000000042b33f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b36f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042b35f: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042b37f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b38f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b34f: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x000000000046c7c4: add byte ptr [rdi], cl; mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x000000000040dbcb: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd3: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbdb: add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x00000000004015b7: add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000484dc1: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004499e7: add byte ptr [rdi], cl; test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x000000000041183d: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004160b6: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000475669: add byte ptr [rdi], cl; test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x0000000000411056: add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004175b8: add byte ptr [rdi], cl; test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000457b1e: add byte ptr [rdi], cl; test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000449654: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000004847e7: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x00000000004849a8: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048950c: add byte ptr [rdi], cl; test ebp, edx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x0000000000421b6e: add byte ptr [rdi], cl; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x00000000004491d5: add byte ptr [rdi], cl; xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x4c399; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000469938: add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004205ce: add byte ptr [rdi], cl; xchg ebx, eax; ret 0x3d83; 
0x00000000004767e3: add byte ptr [rdi], cl; xchg esp, eax; ret 0xc283; 
0x000000000044f804: add byte ptr [rdi], cl; xchg esp, eax; ret 0xd5e9; 
0x0000000000448037: add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x00000000004704f7: add byte ptr [rdx + 0x10], bh; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000040127e: add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000443c2f: add byte ptr [rdx + 0x48028801], cl; lea eax, [rdx]; ret; 
0x000000000044247f: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000047c09c: add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x000000000047c9c4: add byte ptr [rdx + 0x63], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x000000000044bbf5: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000040ec22: add byte ptr [rdx + 0x6c], bh; call 0x1b40; xor eax, eax; ret; 
0x000000000044bd4c: add byte ptr [rdx + 1], bh; mov eax, 0xca; syscall; 
0x0000000000484da8: add byte ptr [rdx + 2], bl; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000412857: add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000004af947: add byte ptr [rdx + rax*2], ch; add byte ptr [rax], al; je 0xaf8d3; stc; call qword ptr [rcx + 1]; 
0x0000000000473c41: add byte ptr [rdx + rax], cl; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000042479e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000042383e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000042476e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000042437e: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727de: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bee: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727ae: add byte ptr [rdx + rax], cl; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000049e9f7: add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000044d383: add byte ptr [rdx + rcx - 0x77], dh; adc eax, 0x26b72c; pop rbx; ret; 
0x00000000004b41c7: add byte ptr [rdx + rcx*4 - 0x23dc0000], ch; cld; jmp qword ptr [rbx + 1]; 
0x0000000000457160: add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x000000000045715f: add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x00000000004af7e3: add byte ptr [rdx + rdi*2], ch; stc; call rsp; 
0x0000000000418743: add byte ptr [rdx + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x00000000004b1997: add byte ptr [rdx + riz*2], bh; add byte ptr [rax + rsi*4 - 6], dh; call qword ptr [rdx]; 
0x000000000048d087: add byte ptr [rdx + riz*8 + 0x48], dh; add esp, 0x18; ret; 
0x000000000045905e: add byte ptr [rdx - 0x77], cl; xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x0000000000494e94: add byte ptr [rdx - 6], bl; call qword ptr [rax]; 
0x00000000004b0c27: add byte ptr [rdx*2 + 0x3b40000], cl; cli; jmp qword ptr [rdx]; 
0x000000000045ac1c: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004246de: add byte ptr [rdx], al; lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x000000000042459e: add byte ptr [rdx], al; lea rdx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000042443e: add byte ptr [rdx], al; lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424745: add byte ptr [rdx], al; lea rdx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000424605: add byte ptr [rdx], al; lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244a5: add byte ptr [rdx], al; lea rdx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000424724: add byte ptr [rdx], al; lea rdx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245e4: add byte ptr [rdx], al; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000424544: add byte ptr [rdx], al; lea rdx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000423708: add byte ptr [rdx], bh; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x0000000000494da8: add byte ptr [rdx], ch; cli; push qword ptr [rax + 0x29]; cli; call rax; 
0x000000000042479c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000042383c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000042476c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000042437c: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727dc: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bec: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727ac: add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x0000000000494964: add byte ptr [rip + 0x3490fffa], dh; cli; jmp qword ptr [rax]; 
0x0000000000475757: add byte ptr [rip + 0x410000], bh; je 0x75788; mov eax, 0x101; syscall; 
0x0000000000475756: add byte ptr [rip + 0x410000], dil; je 0x75788; mov eax, 0x101; syscall; 
0x00000000004948a0: add byte ptr [rip + 0x470fffa], al; cli; jmp rax; 
0x000000000049489c: add byte ptr [rip + 0x500fffa], 0xfa; push qword ptr [rax + 4]; cli; jmp rax; 
0x00000000004247a1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000423841: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x0000000000424771: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x0000000000424381: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727e1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bf1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727b1: add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000042d7ef: add byte ptr [rip + 0xff], ah; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042d7ee: add byte ptr [rip + 0xff], spl; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042cf22: add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000467a8f: add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x000000000042b585: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000444105: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004185e5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000434fd5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045ad15: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000045abb5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab95: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000471e95: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418625: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000418605: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x0000000000435165: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x0000000000446995: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473685: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000042b584: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000418604: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x0000000000446994: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473684: add byte ptr [rsi + 0x2e], spl; nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000044bd1a: add byte ptr [rsi + 0x80], bh; cmp eax, edx; jne 0x4bd2c; nop; mov eax, 0xca; syscall; 
0x000000000044be07: add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000047b524: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000044bd47: add byte ptr [rsi + 0x81], bh; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000048cea8: add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x0000000000446b25: add byte ptr [rsi + 0xf], ah; cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg edx, eax; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000042c4e4: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042b32b: add byte ptr [rsi + 0xf], ah; je 0x2b37f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x00000000004633ea: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000041a307: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x000000000046616a: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x4ce8; 
0x0000000000419d3f: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000463413: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x00000000004633b1: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000042b274: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x000000000041a306: add byte ptr [rsi + 0xf], spl; outsd dx, dword ptr [rsi]; ret 0x4466; 
0x00000000004abdcf: add byte ptr [rsi + rax - 0x5a140000], dh; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004243f1: add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x00000000004b3e78: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004b3e10: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004b3e44: add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004ae6fb: add byte ptr [rsi + rcx - 9], ah; jmp qword ptr [rax]; 
0x00000000004b4537: add byte ptr [rsi + rcx*4], bl; add byte ptr [rax], al; test al, dh; cld; jmp qword ptr [rdx + 5]; 
0x00000000004af3c3: add byte ptr [rsi + rcx], bh; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004af527: add byte ptr [rsi + rdi], cl; add byte ptr [rax], al; adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x00000000004af4b3: add byte ptr [rsi + rdx*4 - 8], cl; jmp qword ptr [rsi]; 
0x00000000004addd7: add byte ptr [rsi + riz + 0x26f50000], bh; cmc; call qword ptr [rsi]; 
0x00000000004243b7: add byte ptr [rsi + riz - 9], dh; ret 0; 
0x0000000000455f20: add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x0000000000455f1f: add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x000000000049f1ef: add byte ptr [rsi - 0x46fffff0], dh; adc byte ptr [rax], al; add byte ptr [rax + rdx + 0x10bf0000], bh; add byte ptr [rax], al; ret 0x10; 
0x000000000049e9ef: add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000048528d: add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; 
0x000000000048528d: add byte ptr [rsi - 0x70], ah; mov eax, 0x27; syscall; ret; 
0x000000000044bc9d: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; 
0x000000000044bc9d: add byte ptr [rsi - 0x70], ah; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x4bcb0; ret; 
0x0000000000474dbd: add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; 
0x0000000000474dbd: add byte ptr [rsi - 0x70], ah; mov eax, 0xc9; syscall; ret; 
0x000000000044987d: add byte ptr [rsi - 0x70], ah; mov eax, dword ptr [rip + 0x272f86]; test eax, eax; jne 0x498a0; mov eax, 1; syscall; 
0x000000000045af3d: add byte ptr [rsi - 0x70], ah; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000045ad0d: add byte ptr [rsi - 0x70], ah; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004004cd: add byte ptr [rsi - 0x70], ah; ret; 
0x000000000044248f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000044249f: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004719db: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000413e41: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416710: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000493f0c: add byte ptr [rsi - 7], dl; push qword ptr [rax + 0x57]; stc; jmp rax; 
0x0000000000494898: add byte ptr [rsi], al; cli; inc dword ptr [rax + 0xfffa05]; add eax, 0x470fffa; cli; jmp rax; 
0x0000000000449591: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004a2897: add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x00000000004abbd7: add byte ptr [rsp + rax - 0x6b1c0000], bh; cmc; call rsp; 
0x0000000000448ac4: add byte ptr [rsp + rax - 0x7d], dh; adc byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004b473b: add byte ptr [rsp + rax], al; std; jmp qword ptr [rdx]; 
0x00000000004b1387: add byte ptr [rsp + rbx*2], ch; add byte ptr [rsp + rsi*2], al; cli; jmp rax; 
0x00000000004b41cb: add byte ptr [rsp + rbx*8], ah; cld; jmp qword ptr [rbx + 1]; 
0x00000000004ad37f: add byte ptr [rsp + rbx], ah; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004af3bf: add byte ptr [rsp + rdi + 0xe3c0000], ah; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004acb87: add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x00000000004acb8b: add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x000000000044f9c2: add byte ptr [rsp + riz*8 - 0x18], dh; pop rbp; or edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000044f9c1: add byte ptr [rsp + riz*8 - 0x18], sil; pop rbp; or edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x0000000000452bdc: add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x000000000047bb42: add byte ptr [rsp + rsi*2], al; or bh, bh; and eax, 0x23e6d4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x00000000004b138b: add byte ptr [rsp + rsi*2], al; cli; jmp rax; 
0x00000000004af529: add byte ptr ds:[rax], al; adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x00000000004af5b5: add byte ptr ds:[rax], al; fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x0000000000448f05: add byte ptr es:[rax + 0x39], cl; ret; 
0x00000000004497ad: add byte ptr es:[rax], al; mov eax, dword ptr [rip + 0x273056]; test eax, eax; jne 0x497d0; xor eax, eax; syscall; 
0x00000000004addd9: add byte ptr es:[rax], al; cmc; cmc; call qword ptr [rsi]; 
0x000000000044d364: add byte ptr es:[rbp - 0xcf98b40], al; ret; 
0x000000000044bbf7: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x00000000004963f4: add byte ptr gs:[rax], al; add byte ptr [rax + 0x5efffb70], ch; jae 0x963fa; jmp qword ptr [rsi]; 
0x00000000004155a2: add ch, al; pop rax; ret; 
0x00000000004156a9: add ch, al; push rcx; ret 0xffff; 
0x00000000004406bf: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004a98dc: add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004a98dd: add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004694d4: add ch, byte ptr [rbx]; add byte ptr [rax], al; add byte ptr [rcx + 0xf], al; mov dh, 0x46; or al, 0x83; ret; 
0x0000000000422cfa: add ch, byte ptr [rdi - 1]; dec dword ptr [rbx + 0x90c2454]; ret 0xbae9; 
0x0000000000469513: add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004acac7: add ch, byte ptr [rsi + rcx + 8]; ret; 
0x0000000000493d80: add ch, dh; clc; jmp qword ptr [rax]; 
0x00000000004adddb: add ch, dh; cmc; call qword ptr [rsi]; 
0x00000000004b2830: add ch, dh; sti; jmp qword ptr [rdx]; 
0x0000000000494428: add ch, dl; stc; call qword ptr [rax - 0x2a]; 
0x0000000000494300: add cl, ah; stc; jmp rax; 
0x0000000000448088: add cl, al; call 0xfe5039b; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x00000000004424a7: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000469cf2: add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x0000000000469246: add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x000000000045514e: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000447e04: add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x0000000000411563: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000411644: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000450cec: add cl, byte ptr [rax + 1]; fimul word ptr [rax + 1]; ret; 
0x00000000004246df: add cl, byte ptr [rax - 0x73]; adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x000000000042459f: add cl, byte ptr [rax - 0x73]; adc eax, 0x22909; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000042443f: add cl, byte ptr [rax - 0x73]; adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424746: add cl, byte ptr [rax - 0x73]; adc eax, 0x22ac2; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000424606: add cl, byte ptr [rax - 0x73]; adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244a6: add cl, byte ptr [rax - 0x73]; adc eax, 0x22d62; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000424725: add cl, byte ptr [rax - 0x73]; adc eax, 0x22f23; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245e5: add cl, byte ptr [rax - 0x73]; adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000424545: add cl, byte ptr [rax - 0x73]; adc eax, 0x23973; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000443d45: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000442535: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000442465: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004424a8: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x00000000004854e5: add cl, byte ptr [rax - 0x77]; je 0x8550e; or byte ptr [rax + 1], cl; ret; 
0x000000000047e634: add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000442415: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004718c6: add cl, byte ptr [rax - 0x77]; sti; jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000004182c2: add cl, byte ptr [rax - 0x7b]; sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000440c70: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000440cd3: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x0000000000483fbd: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000460334: add cl, byte ptr [rbp - 0x7b]; ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax]; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000435622: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004424e3: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000443cc5: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000442525: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000046b523: add cl, byte ptr [rcx + rcx*4 - 0xe]; call qword ptr [rax + 0x38]; 
0x000000000048cdd7: add cl, byte ptr [rcx - 0x75]; adc al, 0x24; mov edi, 1; call rax; 
0x000000000040e167: add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x0000000000451e1a: add cl, byte ptr [rcx - 0x7d]; ret; 
0x000000000049143d: add cl, byte ptr [rdi]; test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x2283ca3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000406f3f: add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a586: add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040ac70: add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000446b2b: add cl, byte ptr [rdi]; xchg edx, eax; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x00000000004424a5: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000443c83: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004424c3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x0000000000487cf8: add cl, ch; add al, byte ptr [rbx - 0x6f990049]; add rsp, 8; ret; 
0x000000000045ed2a: add cl, ch; ret 0xfffa; 
0x0000000000454bc8: add cl, ch; ret 0xfffd; 
0x000000000048aa90: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000043b1aa: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000413d87: add cl, ch; ret; 
0x000000000049058f: add cl, ch; retf; cli; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000400c12: add cl, cl; ret; 
0x0000000000469fe8: add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000045e832: add dh, al; test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000004a1ef7: add dh, bh; xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004357d3: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000400596: add dh, bl; ret; 
0x000000000042442e: add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x00000000004465f7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x465f0; ret; 
0x00000000004466a7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x466a0; ret; 
0x00000000004acff9: add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000438508: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446c7f: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000041870e: add dh, byte ptr [rsi]; sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004943d4: add dh, cl; stc; call qword ptr [rax - 0x31]; 
0x000000000045101e: add dh, dh; ret 0x4801; 
0x000000000042266f: add dh, dh; ret 0x4804; 
0x000000000047c548: add dh, dh; ret 0x7403; 
0x000000000044a4ff: add dh, dh; ret 0x7404; 
0x0000000000444b57: add dh, dh; ret 0x7501; 
0x0000000000444b64: add dh, dh; ret 0x7502; 
0x0000000000444b71: add dh, dh; ret 0x7504; 
0x0000000000444b29: add dh, dh; ret 0x7510; 
0x0000000000444b36: add dh, dh; ret 0x7520; 
0x000000000042465c: add dh, dh; ret 0x7540; 
0x0000000000422993: add dh, dh; ret 0xf02; 
0x000000000045a2b8: add dh, dh; ret 0xf04; 
0x000000000041ac69: add dh, dh; ret 0xf08; 
0x0000000000466bd1: add dh, dh; ret 0xf40; 
0x0000000000466bb7: add dh, dh; ret 0xf50; 
0x000000000041ad38: add dh, dh; ret; 
0x00000000004a7cba: add dl, byte ptr [rax + 0x38]; xor esi, dword ptr [rcx]; xchg edi, eax; call qword ptr [rbx + 0x7c]; 
0x0000000000494f8c: add dl, dh; cli; call qword ptr [rax]; 
0x0000000000494f8c: add dl, dh; cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x000000000047990d: add dword ptr [r15], r9d; xchg ebp, eax; ret 0xc283; 
0x000000000046ff87: add dword ptr [r8 - 0x75], r9d; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x000000000046eda5: add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000044fbd3: add dword ptr [r8 - 0x7d], r9d; ret; 
0x000000000045a35b: add dword ptr [r8], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x0000000000448ac7: add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443c31: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x00000000004657ca: add dword ptr [rax + 0x29], ecx; fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x000000000047fad9: add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000047faeb: add dword ptr [rax + 0x39], ecx; ret 0x674; 
0x000000000045b47f: add dword ptr [rax + 0x39], ecx; ret 0x8841; 
0x0000000000464baa: add dword ptr [rax + 0x39], ecx; ret 0x8c0f; 
0x000000000045ce73: add dword ptr [rax + 0x39], ecx; ret 0xd774; 
0x000000000045cdfd: add dword ptr [rax + 0x39], ecx; ret 0xed75; 
0x000000000047f2d3: add dword ptr [rax + 0x39], ecx; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x0000000000416c3d: add dword ptr [rax + 0x39], ecx; ret; 
0x000000000047f2d2: add dword ptr [rax + 0x39], r9d; sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x00000000004572d0: add dword ptr [rax + 0x39], r9d; ret; 
0x000000000048df13: add dword ptr [rax + 0x7900ff7a], eax; sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x00000000004179a3: add dword ptr [rax + 0xf740a39], eax; cmp rsi, rcx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x0000000000481e87: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000040db2a: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000479105: add dword ptr [rax + 9], ecx; ret 0x1475; 
0x000000000041dd6e: add dword ptr [rax + 9], ecx; ret 0x8949; 
0x00000000004790d7: add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000475830: add dword ptr [rax + rax], edx; mov eax, ecx; syscall; 
0x0000000000422d2d: add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x0000000000422db3: add dword ptr [rax + rdi - 0x3e], eax; jne 0x22da0; sub rax, 0x10; ret; 
0x000000000047db73: add dword ptr [rax - 0x39], ecx; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000047f8f2: add dword ptr [rax - 0x3f], ecx; out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x000000000046124b: add dword ptr [rax - 0x4f743], eax; jmp qword ptr [rax]; 
0x0000000000402c6f: add dword ptr [rax - 0x6bf0d006], eax; ret 0xb60f; 
0x0000000000422d44: add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000046ff88: add dword ptr [rax - 0x75], ecx; adc dword ptr [rax + 0x39], ecx; ret 0x3873; 
0x0000000000442481: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x0000000000472843: add dword ptr [rax - 0x77], ecx; add byte ptr [r8 - 0x77], r9b; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000443d42: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000442532: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000442462: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000442412: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000443cc2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000442522: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047f223: add dword ptr [rax - 0x77], ecx; add eax, 0x23d185; ret; 
0x000000000045e130: add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000450137: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x0000000000414006: add dword ptr [rax - 0x77], ecx; ret 0x3c75; 
0x0000000000405f9c: add dword ptr [rax - 0x77], ecx; ret; 
0x000000000047f222: add dword ptr [rax - 0x77], r9d; add eax, 0x23d185; ret; 
0x0000000000480e22: add dword ptr [rax - 0x7d], ecx; mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x0000000000481493: add dword ptr [rax - 0x7d], ecx; ret 0x4118; 
0x0000000000481813: add dword ptr [rax - 0x7d], ecx; ret 0x4418; 
0x000000000045b8e9: add dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000046eda6: add dword ptr [rax - 0x7d], ecx; ret 0x8502; 
0x0000000000402cb9: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x0000000000450726: add dword ptr [rax - 0x7d], ecx; ret 0x8b01; 
0x000000000046f3f7: add dword ptr [rax - 0x7d], ecx; ret 0x8b04; 
0x000000000040e42b: add dword ptr [rax - 0x7d], ecx; ret 0xf10; 
0x000000000040ef06: add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000469d59: add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x000000000045e875: add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004059d0: add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000044bd49: add dword ptr [rax], 0x1ba0000; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000453eef: add dword ptr [rax], eax; add al, ch; fdiv st(2), st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000004557cf: add dword ptr [rax], eax; add al, ch; imul eax, ebx, 0x8941fffa; ret 0x5be9; 
0x000000000045578c: add dword ptr [rax], eax; add al, ch; lodsb al, byte ptr [rsi]; ret; 
0x0000000000454e7a: add dword ptr [rax], eax; add al, ch; mov esi, 0x89fffacc; ret 0xe283; 
0x000000000045aaca: add dword ptr [rax], eax; add al, ch; outsb dx, byte ptr [rsi]; jo 0x5aacb; jmp qword ptr [rsi + 0x2e]; 
0x00000000004794ce: add dword ptr [rax], eax; add al, ch; push -0x7a; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004524e7: add dword ptr [rax], eax; add al, ch; push rcx; idiv dl; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000410084: add dword ptr [rax], eax; add bl, dh; ret; 
0x0000000000447fa1: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; retf 0xd975; vzeroupper; ret; 
0x0000000000473233: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x000000000042b64f: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; clc; add rax, rcx; vzeroupper; ret; 
0x00000000004198ea: add dword ptr [rax], eax; add byte ptr [rax + 1], cl; ret; 
0x0000000000468103: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x000000000042316a: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0x70bfc; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000455148: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000048506b: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x5b; cmovne rax, rdx; ret; 
0x0000000000477f04: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; dec dword ptr [rax - 0x7d]; ret; 
0x000000000041e9ad: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000044805d: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; xor eax, 0x4d079; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x00000000004582e3: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000004493d9: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x16e9; 
0x000000000048e7da: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x3948; 
0x00000000004563b6: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000048cd25: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000446efe: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000475a3d: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004718f9: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044ce11: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000048a76f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000041eff0: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000044b6bc: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000456012: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000042aee7: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041e645: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000042410e: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043fe5f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042af15: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004683d8: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044e7f1: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004a1efa: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x00000000004a10aa: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rsp; 
0x00000000004a0eca: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d4; 
0x00000000004a1662: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x1d5; 
0x00000000004a0ed2: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046fc38: add dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048cddd: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x000000000044d380: add dword ptr [rax], eax; add byte ptr [rax], al; je 0x4d390; mov dword ptr [rip + 0x26b72c], edx; pop rbx; ret; 
0x0000000000460e65: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x0000000000419f1c: add dword ptr [rax], eax; add byte ptr [rax], al; jne 0x19f28; add rsp, 0x20; pop rbx; ret; 
0x00000000004191ba: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x000000000044bd4e: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000449241: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x000000000047e60d: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000048d490: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000047b521: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000484476: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rdi], rsi; ret; 
0x000000000041917a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x000000000041915a: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x000000000046eefd: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000412484: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000046c35f: add dword ptr [rax], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046c91d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8ca: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c39d: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c73c: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6f7: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c663: add dword ptr [rax], eax; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000417143: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004867be: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000047fca1: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x000000000046bc91: add dword ptr [rax], eax; add byte ptr [rax], al; xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000046cd84: add dword ptr [rax], eax; add byte ptr [rax], al; xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000475d82: add dword ptr [rax], eax; add byte ptr [rax], al; leave; ret; 
0x0000000000468640: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000044988b: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000413038: add dword ptr [rax], eax; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x0000000000491441: add dword ptr [rax], eax; add byte ptr [rbx + 0x2283ca3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000048cc76: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000044e012: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000409e8d: add dword ptr [rax], eax; add byte ptr [rbx - 0x7bf0fe08], al; ret; 
0x000000000045a35c: add dword ptr [rax], eax; add byte ptr [rcx + 0x63], cl; cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x00000000004496af: add dword ptr [rax], eax; add byte ptr [rcx - 0x176b70e], cl; mov edi, 0xffffff9c; syscall; 
0x000000000049210d: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000048b408: add dword ptr [rax], eax; add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fucompi st(1); ret; 
0x0000000000477f3a: add dword ptr [rax], eax; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7d]; ret; 
0x000000000048c002: add dword ptr [rax], eax; add byte ptr [rdi], cl; mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004015b5: add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004719d9: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x0000000000413e3f: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000444b55: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x0000000000444b62: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x0000000000444b6f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000444b27: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000444b34: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000444b41: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000045a2b6: add dword ptr [rax], eax; add dh, dh; ret 0xf04; 
0x000000000042479b: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000042383b: add dword ptr [rax], eax; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000042384c: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000040fcfc: add dword ptr [rax], eax; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048ddac: add dword ptr [rax], eax; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000484608: add dword ptr [rax], eax; or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000405e00: add dword ptr [rax], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044c634: add dword ptr [rax], ebp; add byte ptr [rdi + rcx + 0x48], dh; test edx, edx; je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000044c641: add dword ptr [rax], esp; jmp rdx; 
0x0000000000446967: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46960; sub rax, 1; ret; 
0x0000000000446817: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x46810; lea rax, [rcx - 1]; ret; 
0x0000000000473ee5: add dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473f5f: add dword ptr [rbp + 0x31], eax; shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046f025: add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000046ed9f: add dword ptr [rbp + 0xf48ff7e], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x0000000000448d79: add dword ptr [rbp - 0x57c03b0], ecx; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x000000000045e6b2: add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x0000000000435692: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000046c1c5: add dword ptr [rbx - 0x4f743], eax; jmp qword ptr [rax]; 
0x0000000000454941: add dword ptr [rbx - 0x67f3f1f], eax; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000488ff9: add dword ptr [rbx - 0x77], ecx; push rsp; ret 0x4808; 
0x000000000040d51e: add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x0000000000443cb1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000004424e1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000045c342: add dword ptr [rcx + 0x39], ecx; ret; 
0x0000000000443c91: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000004424d1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000443c81: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004424c1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000044ad93: add dword ptr [rcx + 9], ecx; ret; 
0x0000000000493fd4: add dword ptr [rcx + rdi*8 - 0x66b6e01], edx; jmp qword ptr [rcx]; 
0x000000000040e16a: add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000041ae62: add dword ptr [rcx - 0x75], ecx; or byte ptr [r15], r9b; test ebx, ebp; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x00000000004424b1: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000046eb9e: add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x0000000000459988: add dword ptr [rcx - 0x78], eax; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000467291: add dword ptr [rcx - 0x7d], ecx; ret 0x2504; 
0x000000000047884b: add dword ptr [rcx - 0x7d], ecx; ret 0xf01; 
0x0000000000400d97: add dword ptr [rcx - 0x7d], ecx; rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x000000000044c435: add dword ptr [rcx - 0x7d], ecx; ret; 
0x00000000004496ae: add dword ptr [rcx], eax; add byte ptr [rax], al; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044962d: add dword ptr [rcx], eax; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000047564a: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000041f350: add dword ptr [rcx], eax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000447c92: add dword ptr [rdi + 0x15], esi; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x0000000000446f13: add dword ptr [rdi + 0x26], esi; jb 0x46f1d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447e00: add dword ptr [rdi + 0x2c], esi; jb 0x47e07; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447fc8: add dword ptr [rdi + 0x3a], esi; jb 0x47fcf; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447273: add dword ptr [rdi + 0x3b], esi; jb 0x4727d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004476c3: add dword ptr [rdi + 0x53], esi; jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004b3e7d: add dword ptr [rdi], 0x48; or eax, 0x1370303; ret; 
0x00000000004b3e15: add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004b3e49: add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x00000000004b3e26: add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004b3e8e: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b3e5a: add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004b052d: add dword ptr [rdi], 3; ret 0xa01; 
0x0000000000416f0b: add dword ptr [rdi], ecx; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x16f29; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000456890: add dword ptr [rdi], ecx; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000004483e1: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x0000000000454201: add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x000000000047990e: add dword ptr [rdi], ecx; xchg ebp, eax; ret 0xc283; 
0x0000000000440036: add dword ptr [rdx + 0x410d8d48], edx; add dword ptr [rip - 0x6eeb7500], -0x75; add al, 0x81; sub eax, edx; ret; 
0x0000000000473ee3: add dword ptr [rdx + 1], ebp; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000446c8c: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043851d: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004852eb: add dword ptr [rdx + rax*2], 1; ret; 
0x0000000000480e26: add dword ptr [rdx + rdx*8 - 0x41f0308b], eax; sal edi, 0xd8; ret; 
0x0000000000447af6: add dword ptr [rdx - 0x2f], esp; jge 0x47b43; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000438476: add dword ptr [rdx - 0x2f], esp; jl 0x384c3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000447957: add dword ptr [rdx - 0x2f], esp; std; jg 0x479a7; jmp qword ptr [rdx - 0x2f]; 
0x000000000043e9c6: add dword ptr [rdx - 0x4ef272b8], edx; cdq; add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000446c23: add dword ptr [rdx - 0xf], esp; jl 0x46c70; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d63: add dword ptr [rdx - 0xf], esp; jl 0x46db0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000047c9c2: add dword ptr [rdx], 0; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000044d399: add dword ptr [rdx], 0x39d23100; ret; 
0x00000000004b300c: add dword ptr [rdx], 0x4a; ret; 
0x00000000004b5a9c: add dword ptr [rdx], 0x55; ret; 
0x00000000004aef78: add dword ptr [rdx], 0x5a; ret; 
0x00000000004b5a58: add dword ptr [rdx], 0x76; ret; 
0x00000000004343e9: add dword ptr [rdx], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004196af: add dword ptr [rdx], ebp; add bl, dh; ret; 
0x00000000004186a8: add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000040ebca: add dword ptr [rip + 0x2adc27], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044003c: add dword ptr [rip - 0x6eeb7500], -0x75; add al, 0x81; sub eax, edx; ret; 
0x0000000000440070: add dword ptr [rip - 0x75f37500], -0x75; add al, 0x82; sub eax, ecx; ret; 
0x00000000004acac3: add dword ptr [rsi + rcx + 0x30], ecx; add ch, byte ptr [rsi + rcx + 8]; ret; 
0x0000000000442492: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004424a2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000434327: add dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045aac9: add dword ptr ss:[rax], eax; add al, ch; outsb dx, byte ptr [rsi]; jo 0x5aacb; jmp qword ptr [rsi + 0x2e]; 
0x00000000004344a8: add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000489f8d: add eax, 0x1489066; ret 0xb70f; 
0x000000000045ac70: add eax, 0x18c48348; ret; 
0x00000000004247a9: add eax, 0x1bb12; cmove rax, rdx; ret; 
0x000000000048f9a9: add eax, 0x1bd0a; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000423849: add eax, 0x1d0a2; cmove rax, rdx; ret; 
0x000000000048dda9: add eax, 0x1d8d6; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004495ba: add eax, 0x1f0fc3f3; add byte ptr [rax - 0x39], cl; ret 0xffc0; 
0x00000000004749e5: add eax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ba5: add eax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7da: add eax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000048ad89: add eax, 0x203da; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000424360: add eax, 0x221ab; cmove rax, rdx; ret; 
0x00000000004246e9: add eax, 0x22732; cmovne rax, rdx; ret; 
0x00000000004245a9: add eax, 0x22862; cmovne rax, rdx; ret; 
0x0000000000424449: add eax, 0x229d2; cmovne rax, rdx; ret; 
0x0000000000424750: add eax, 0x22a7b; cmovne rax, rdx; ret; 
0x0000000000490e5e: add eax, 0x22b151; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004905d9: add eax, 0x22b8a6; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000424610: add eax, 0x22bab; cmovne rax, rdx; ret; 
0x000000000048f561: add eax, 0x22ce1e; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000048f451: add eax, 0x22cf2e; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004244b0: add eax, 0x22d1b; cmovne rax, rdx; ret; 
0x000000000042472f: add eax, 0x22ecc; cmovne rax, rdx; ret; 
0x00000000004245ef: add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x000000000042448f: add eax, 0x2316c; cmovne rax, rdx; ret; 
0x00000000004237d0: add eax, 0x231db; cmovne rax, rdx; ret; 
0x00000000004852dc: add eax, 0x236e8f; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000485491: add eax, 0x23742a; ret; 
0x00000000004848f9: add eax, 0x23776a; ret; 
0x00000000004848de: add eax, 0x237785; add rsp, 8; ret; 
0x00000000004848f2: add eax, 0x237789; mov qword ptr [rip + 0x23776a], rax; ret; 
0x00000000004848d7: add eax, 0x2377a4; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x00000000004244fe: add eax, 0x237dd; cmovne rax, rdx; ret; 
0x000000000042454f: add eax, 0x2390c; cmovne rax, rdx; ret; 
0x000000000047f382: add eax, 0x239d69; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x0000000000481a1a: add eax, 0x23a62d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000047f38c: add eax, 0x23d017; mov qword ptr [rsi], rax; ret; 
0x000000000047f31b: add eax, 0x23d090; ret; 
0x000000000047f2e2: add eax, 0x23d0c9; add rsp, 8; ret; 
0x000000000047f226: add eax, 0x23d185; ret; 
0x000000000047f2da: add eax, 0x23d4e8; add byte ptr [rax - 0x77], cl; add eax, 0x23d0c9; add rsp, 8; ret; 
0x0000000000475640: add eax, 0x2471c7; test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x000000000046c927: add eax, 0x24a8f4; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8d4: add eax, 0x24a947; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c3a7: add eax, 0x24a974; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c746: add eax, 0x24aad5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c701: add eax, 0x24ab1a; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6bc: add eax, 0x24ab5f; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c66d: add eax, 0x24abae; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcd1: add eax, 0x24b24a; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000460dc0: add eax, 0x25585b; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046116f: add eax, 0x2559ac; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461121: add eax, 0x2559fa; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461072: add eax, 0x255aa9; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461016: add eax, 0x255b05; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d76: add eax, 0x255da5; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d28: add eax, 0x255df3; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608c7: add eax, 0x255f54; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000045915a: add eax, 0x25fae1; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x000000000045905a: add eax, 0x25fbe1; mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x00000000004579d2: add eax, 0x2644a1; ret; 
0x000000000044d352: add eax, 0x26cfa9; ret; 
0x000000000044f472: add eax, 0x26d4b1; ret; 
0x000000000044bc4a: add eax, 0x26e521; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044bbf1: add eax, 0x270cca; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000449b51: add eax, 0x272cb6; test eax, eax; jne 0x49b70; mov eax, 3; syscall; 
0x00000000004499be: add eax, 0x272e49; test eax, eax; jne 0x49a28; mov eax, 0x48; syscall; 
0x0000000000449881: add eax, 0x272f86; test eax, eax; jne 0x498a0; mov eax, 1; syscall; 
0x00000000004497b1: add eax, 0x273056; test eax, eax; jne 0x497d0; xor eax, eax; syscall; 
0x000000000045292f: add eax, 0x29480000; ret 0x349; 
0x00000000004246da: add eax, 0x29771d; add cl, byte ptr [rax - 0x73]; adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004246c9: add eax, 0x297722; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000424601: add eax, 0x2977f6; add cl, byte ptr [rax - 0x73]; adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004245e0: add eax, 0x297817; add cl, byte ptr [rax - 0x73]; adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000424589: add eax, 0x297862; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000042443a: add eax, 0x2979bd; add cl, byte ptr [rax - 0x73]; adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424351: add eax, 0x297ad5; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffa62; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004237c1: add eax, 0x29862b; adc byte ptr [rax - 0x73], cl; adc eax, 0x23282; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x000000000041f787: add eax, 0x29a0d4; ret; 
0x000000000041f779: add eax, 0x29a0ea; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f791: add eax, 0x29c5d6; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041f76b: add eax, 0x29c5e8; lea rax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x00000000004191bf: add eax, 0x2a0648; ret; 
0x00000000004191b5: add eax, 0x2a0656; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x0000000000419180: add eax, 0x2a0663; ret; 
0x0000000000419160: add eax, 0x2a067b; ret; 
0x0000000000419175: add eax, 0x2a0696; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x0000000000419155: add eax, 0x2a06b6; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x0000000000419056: add eax, 0x2a07ed; ret; 
0x0000000000419046: add eax, 0x2a07f5; ret; 
0x0000000000418ff6: add eax, 0x2a07fd; ret; 
0x0000000000418fe6: add eax, 0x2a0815; ret; 
0x0000000000418612: add eax, 0x2a0b09; ret; 
0x000000000041a0c3: add eax, 0x2a1c98; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000419661: add eax, 0x2a2706; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419657: add eax, 0x2a2714; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x00000000004191d5: add eax, 0x2a2bba; ret; 
0x000000000041870d: add eax, 0x2a3602; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000400ddc: add eax, 0x2bb03f; add rsp, 0x88; pop rbx; ret; 
0x00000000004b20cc: add eax, 0x3400e4e; ret; 
0x0000000000484ece: add eax, 0x38c48348; ret; 
0x000000000041cefe: add eax, 0x39480000; ret 0xf275; 
0x0000000000474a05: add eax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440bc5: add eax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7fa: add eax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000048c903: add eax, 0x458b3777; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004948a1: add eax, 0x470fffa; cli; jmp rax; 
0x0000000000461017: add eax, 0x4800255b; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x0000000000443cc8: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x00000000004424f8: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000435313: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444826: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c6: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000494861: add eax, 0x480fffa; cli; push rax; add edi, edx; jmp qword ptr [rax + 3]; 
0x00000000004387db: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000446e00: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000494721: add eax, 0x4b2fffa; cli; jmp qword ptr [rdx]; 
0x00000000004946a1: add eax, 0x4e0fffa; cli; call qword ptr [rax + 4]; 
0x000000000049489d: add eax, 0x500fffa; cli; push qword ptr [rax + 4]; cli; jmp rax; 
0x0000000000443d49: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000442539: add eax, 0x5428948; mov rax, rdi; ret; 
0x000000000049469d: add eax, 0x570fffa; cli; jmp rax; 
0x0000000000485070: add eax, 0x5b; cmovne rax, rdx; ret; 
0x00000000004a2a91: add eax, 0x5ba0000; add byte ptr [rax], al; mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004a2a9d: add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x00000000004718da: add eax, 0x5c415d5b; ret; 
0x0000000000474a53: add eax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c13: add eax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b81a: add eax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000402116: add eax, 0x63480009; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000433ea7: add eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000424779: add eax, 0x6c52; cmove rax, rdx; ret; 
0x0000000000424389: add eax, 0x6d12; cmove rax, rdx; ret; 
0x0000000000400dd4: add eax, 0x7f; and eax, 0xffffffc0; mov qword ptr [rip + 0x2bb03f], rax; add rsp, 0x88; pop rbx; ret; 
0x000000000043d0f8: add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042ab27: add eax, 0x83480000; ret 0x4910; 
0x000000000043e451: add eax, 0x83480000; ret 0xe910; 
0x000000000042ab55: add eax, 0x83480000; ret 0xeb10; 
0x000000000045f035: add eax, 0x83ffffef; ret; 
0x0000000000475536: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x68], bh; syscall; 
0x0000000000475526: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6b], bh; syscall; 
0x0000000000475546: add eax, 0x841f0fc3; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x6c], bh; syscall; 
0x0000000000443ccb: add eax, 0x8428d48; ret; 
0x000000000040dbf8: add eax, 0x8944c689; ret 0xeab8; 
0x0000000000458e53: add eax, 0x89480000; ret 0x2948; 
0x00000000004917b0: add eax, 0x89490000; ret 0x8349; 
0x000000000043ad01: add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004917a4: add eax, 0x8b480000; or byte ptr [r8 + 0x7a840f01], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000041cd8c: add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000043e9cd: add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000480fb8: add eax, 0x940fc085; ret 0x3d; 
0x00000000004abc65: add eax, 0x9b080000; cmc; call rax; 
0x00000000004727e9: add eax, 0x9f2; cmove rax, rdx; ret; 
0x0000000000473bf9: add eax, 0xa22; cmove rax, rdx; ret; 
0x000000000040dbee: add eax, 0xb8c78948; mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000042d21a: add eax, 0xc0310000; ret; 
0x0000000000443d4d: add eax, 0xc428d48; ret; 
0x000000000044482d: add eax, 0xc478d48; ret; 
0x0000000000443fb7: add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000048ca27: add eax, 0xe8ffffff; adc dil, al; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000455412: add eax, 0xe9000000; ret; 
0x00000000004727b9: add eax, 0xee2; cmove rax, rdx; ret; 
0x000000000043567a: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000048d15a: add eax, 0xf7148948; ret; 
0x0000000000435683: add eax, 0xf7f0ff3; ret; 
0x0000000000473c58: add eax, 0xfffd4063; cmp edx, 0x1000; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x000000000048f46a: add eax, 0xffff50e9; push rbx; ret; 
0x000000000041f772: add eax, 0xffffeb69; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f780: add eax, 0xfffff58b; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000044e7d5: add eax, 1; push rax; call rbx; 
0x0000000000474821: add eax, 1; ret; 
0x0000000000474818: add eax, 2; ret; 
0x0000000000474831: add eax, 3; ret; 
0x000000000045ab89: add eax, dword ptr [0]; ret; 
0x000000000048d0bc: add eax, dword ptr [rax + 0xd0]; add rsp, 0x18; ret; 
0x000000000047b628: add eax, dword ptr [rax]; add al, ch; adc byte ptr [rbp - 8], ah; call qword ptr [rbp + 0x53]; 
0x000000000045576d: add eax, dword ptr [rax]; add al, ch; retf; ret; 
0x000000000047b608: add eax, dword ptr [rax]; add bl, dh; ret; 
0x00000000004897a1: add eax, dword ptr [rax]; add byte ptr [rax + 0x74], ah; adc dword ptr [rcx - 0x7d], ecx; ret; 
0x0000000000489dfc: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000046f231: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x34b2d; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000047b5c9: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add al, 0x90; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000046ea7c: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; or eax, 0x3509e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000041c398: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rax; adc dh, dh; ret 0xf0f; 
0x000000000041ace6: add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000048a966: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000045b5b9: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; jl 0x5b5e4; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x0000000000486b7e: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400f2b: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x000000000041ae6a: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000041fb6a: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041fd30: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x000000000042ad07: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e5f1: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ad35: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004895ed: add eax, dword ptr [rax]; add byte ptr [rax - 0xe217], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000044f3c4: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000047fc91: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + 0x23a54b0d], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000044a64c: add eax, dword ptr [rax]; add byte ptr [rax], al; pop rbp; pop r12; jmp rax; 
0x0000000000474873: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000449b5b: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044bd7c: add eax, dword ptr [rax]; add byte ptr [rbp - 0x19], dh; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x00000000004483dc: add eax, dword ptr [rax]; add byte ptr [rbx - 0x50f0fe40], al; ret 0xf8e9; 
0x0000000000489970: add eax, dword ptr [rax]; add byte ptr [rcx + 0x348b4cd8], cl; ret 0xf41; 
0x000000000044bd65: add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000462521: add eax, dword ptr [rax]; add byte ptr [rdi], cl; mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x000000000044be05: add eax, dword ptr [rax]; add byte ptr [rsi + 0x80], bh; syscall; 
0x000000000047c546: add eax, dword ptr [rax]; add dh, dh; ret 0x7403; 
0x000000000041ac67: add eax, dword ptr [rax]; add dh, dh; ret 0xf08; 
0x0000000000418698: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041a707: add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000004480db: add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x000000000046ea84: add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046f1cb: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046f239: add eax, dword ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046e9ca: add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000417869: add eax, dword ptr [rax]; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004480c0: add eax, dword ptr [rax]; pop rbx; ret; 
0x000000000047d20c: add eax, dword ptr [rbp - 0xb8]; call rax; 
0x0000000000489b5d: add eax, dword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004b3e29: add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x000000000045da7c: add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d76386; ret 0x8341; 
0x000000000040fcfb: add eax, dword ptr [rcx]; add byte ptr [rcx + 0x415d5be8], cl; pop rsp; ret; 
0x0000000000486c33: add eax, dword ptr [rdx + 8]; call rax; 
0x0000000000481da4: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821d4: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000481f05: add eax, dword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x000000000048ad8b: add eax, dword ptr [rdx]; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004b3e91: add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b3e5d: add eax, dword ptr [rdx]; cld; ret; 
0x0000000000434269: add eax, dword ptr [rsi + rax]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047c286: add eax, dword ptr [rsi]; call rax; 
0x00000000004899c0: add eax, dword ptr [rsi]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000418697: add eax, dword ptr ss:[rax]; add rsp, 0x80; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000048ad96: add eax, eax; jmp rax; 
0x0000000000402204: add eax, ebp; jmp rax; 
0x000000000047c5a7: add eax, ebx; call rax; 
0x000000000044d45c: add eax, ebx; jmp rax; 
0x0000000000440778: add eax, ecx; add rax, rdi; vzeroupper; ret; 
0x000000000046ea8b: add eax, ecx; jmp rax; 
0x000000000047490d: add eax, ecx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440add: add eax, ecx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b129: add eax, ecx; ret; 
0x000000000042b656: add eax, ecx; vzeroupper; ret; 
0x000000000047490a: add eax, edi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ada: add eax, edi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b126: add eax, edi; add rax, rcx; ret; 
0x000000000042b653: add eax, edi; add rax, rcx; vzeroupper; ret; 
0x000000000046f0bb: add eax, edi; jmp rax; 
0x0000000000485220: add eax, edi; sub rax, r8; ret; 
0x00000000004749c5: add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b95: add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000446b3a: add eax, edi; sub rax, rsi; ret; 
0x000000000042b354: add eax, edi; ret; 
0x000000000042b7ca: add eax, edi; vzeroupper; ret; 
0x00000000004852d8: add eax, edx; cmp rax, qword ptr [rip + 0x236e8f]; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000401f9a: add eax, edx; jmp rax; 
0x000000000040eabc: add eax, edx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000047451b: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a86: add eax, edx; sub rax, rdi; ret; 
0x000000000047f176: add eax, esi; inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000044806c: add eax, esi; jmp rax; 
0x000000000048adb9: add eax, esi; test dil, dil; jns 0x8adc3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048ddd9: add eax, esi; test dil, dil; jns 0x8dde3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f9d9: add eax, esi; test dil, dil; jns 0x8f9e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048c00d: add eax, esp; jmp rax; 
0x0000000000463028: add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000047c282: add ebx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000489bb1: add ebx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489ad9: add ebx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048a3ba: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000004885f0: add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000416a81: add ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004b3e4e: add ebx, dword ptr [rbx + 3]; ret; 
0x0000000000485819: add ebx, dword ptr [rdi]; and eax, 0xf; cmp al, 0xa; jne 0x8576f; nop word ptr cs:[rax + rax]; call rbx; 
0x0000000000435843: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000447f9e: add ecx, 0x100; cmp rdx, rcx; jne 0x47f82; vzeroupper; ret; 
0x0000000000447ddb: add ecx, 0x80; cmp rdx, rcx; jne 0x47dc7; vzeroupper; ret; 
0x00000000004424e5: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x000000000045730d: add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000040e0ce: add ecx, dword ptr [rax + 1]; fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000484c16: add ecx, dword ptr [rax - 0x75]; sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000044bc47: add ecx, dword ptr [rax - 0x77]; add eax, 0x26e521; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047e6d7: add ecx, dword ptr [rax - 0x77]; mov rax, rcx; ret; 
0x000000000044fcc3: add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x00000000004424e9: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x000000000048bacf: add ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000040eac1: add ecx, dword ptr [rbp + rcx*4 + 0x64]; ret; 
0x0000000000480c9a: add ecx, dword ptr [rbp - 0x77]; dec byte ptr [rax - 0x7d]; ret; 
0x0000000000483190: add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x00000000004355b2: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004b3e1a: add ecx, dword ptr [rbx + 3]; ret; 
0x0000000000444794: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x0000000000444164: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000040fd65: add ecx, dword ptr [rcx + rcx*4 + 0x42]; or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x0000000000489b5e: add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004424e6: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x00000000004022e3: add ecx, dword ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000448d7f: add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x0000000000448ddd: add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x0000000000433969: add ecx, dword ptr [rip + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004abf79: add ecx, dword ptr [rsi + rcx - 0x50]; add al, byte ptr [rdx]; ret 0xb00e; 
0x0000000000465e59: add ecx, eax; mov eax, r9d; ret; 
0x000000000042c1e2: add ecx, ebx; jmp rcx; 
0x0000000000448094: add ecx, esi; jmp rcx; 
0x0000000000444045: add edi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x50f1d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446cd: add edi, 0x10; lea r11, [rip + 0x50919]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440ad: add edi, 0x10; lea r11, [rip + 0x50eb9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446ad9: add edi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x46b18; movsxd rax, ecx; ret; 
0x000000000047b51d: add edi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000444702: add edi, 0x20; lea r11, [rip + 0x508e4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440e2: add edi, 0x20; lea r11, [rip + 0x50e84]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445cf: add edi, 0x30; lea r11, [rip + 0x50a17]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443faf: add edi, 0x30; lea r11, [rip + 0x50fb7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044be02: add edi, 0x308; mov esi, 0x80; syscall; 
0x0000000000430569: add edi, dword ptr [rip + 0x63490006]; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000464914: add edi, eax; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000045a364: add edi, ebx; jmp rdi; 
0x0000000000437041: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d41: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc2: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a41: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436741: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436441: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436141: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e41: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b41: add edi, edx; add rsi, rdx; lea r11, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434561: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434261: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e2: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f61: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c61: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433961: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433661: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433361: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e1: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433061: add edi, edx; add rsi, rdx; lea r11, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304f7: add edi, edx; add rsi, rdx; lea r11, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db27: add edi, edx; add rsi, rdx; lea r11, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004948a9: add edi, edx; call qword ptr [rax + 3]; 
0x00000000004948a9: add edi, edx; call qword ptr [rax + 3]; cli; push rax; in eax, 0xf9; call qword ptr [rax]; 
0x00000000004946f1: add edi, edx; call rdx; 
0x00000000004946f1: add edi, edx; call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x0000000000494869: add edi, edx; jmp qword ptr [rax + 3]; 
0x000000000049472d: add edi, edx; jmp qword ptr [rdx]; 
0x000000000040d5ac: add edi, edx; jmp rdi; 
0x00000000004372ac: add edi, edx; lea r11, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a07: add edi, edx; lea r11, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358ab: add edi, edx; lea r11, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347b8: add edi, edx; lea r11, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432baa: add edi, edx; lea r11, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f27: add edi, edx; lea r11, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db5: add edi, edx; lea r11, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043040b: add edi, edx; lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430346: add edi, edx; lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da3b: add edi, edx; lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d976: add edi, edx; lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc31: add edi, edx; lea r11, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbb7: add edi, edx; lea r11, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb28: add edi, edx; lea r11, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c91d: add edi, edx; lea r11, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7eb: add edi, edx; lea r11, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c725: add edi, edx; lea r11, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6a7: add edi, edx; lea r11, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c610: add edi, edx; lea r11, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c414: add edi, edx; lea r11, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e3: add edi, edx; lea r11, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d4: add edi, edx; lea r11, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004310f0: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e720: add edi, edx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004948ad: add edi, edx; push rax; in eax, 0xf9; call qword ptr [rax]; 
0x0000000000432adc: add edi, edx; sfence; lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f4: add edi, edx; sfence; lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444688: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x5095b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444068: add edx, 0x10; sub rdx, rcx; lea r11, [rip + 0x50efb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004833f2: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x000000000040d2c3: add edx, edi; jmp rdx; 
0x00000000004446c9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50919]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440a9: add esi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50eb9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446fe: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x508e4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440de: add esi, 0x20; add rdi, 0x20; lea r11, [rip + 0x50e84]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445cb: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x50a17]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443fab: add esi, 0x30; add rdi, 0x30; lea r11, [rip + 0x50fb7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000411e39: add esi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000411097: add esi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f8f0: add esi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000480e24: add esi, 1; test dl, dl; jne 0x80dfa; movsx eax, cl; neg eax; ret; 
0x000000000044e00b: add esi, dword ptr [rbp - 0x53]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458716: add esi, dword ptr [rdi + rax - 0xd]; ret; 
0x0000000000459e65: add esi, eax; jmp rsi; 
0x0000000000435763: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000446e95: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041ec90: add esi, ebx; stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000044956c: add esi, ebx; ret; 
0x0000000000444641: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x509a2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444624: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x509bf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444021: add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x50f42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044819e: add esi, edi; int1; pop rbx; mov eax, eax; ret; 
0x00000000004372a9: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a04: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358a8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347b5: add esi, edx; add rdi, rdx; lea r11, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ba7: add esi, edx; add rdi, rdx; lea r11, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f24: add esi, edx; add rdi, rdx; lea r11, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db2: add esi, edx; add rdi, rdx; lea r11, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430408: add esi, edx; add rdi, rdx; lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430343: add esi, edx; add rdi, rdx; lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da38: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d973: add esi, edx; add rdi, rdx; lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc2e: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbb4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb25: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c91a: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e8: add esi, edx; add rdi, rdx; lea r11, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c722: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6a4: add esi, edx; add rdi, rdx; lea r11, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c60d: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c411: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e0: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d1: add esi, edx; add rdi, rdx; lea r11, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000437044: add esi, edx; lea r11, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec4: add esi, edx; lea r11, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d44: add esi, edx; lea r11, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc5: add esi, edx; lea r11, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a44: add esi, edx; lea r11, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c4: add esi, edx; lea r11, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436744: add esi, edx; lea r11, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c4: add esi, edx; lea r11, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436444: add esi, edx; lea r11, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c4: add esi, edx; lea r11, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436144: add esi, edx; lea r11, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc4: add esi, edx; lea r11, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e44: add esi, edx; lea r11, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc4: add esi, edx; lea r11, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b44: add esi, edx; lea r11, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434564: add esi, edx; lea r11, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e4: add esi, edx; lea r11, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434264: add esi, edx; lea r11, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e5: add esi, edx; lea r11, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f64: add esi, edx; lea r11, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de4: add esi, edx; lea r11, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c64: add esi, edx; lea r11, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae4: add esi, edx; lea r11, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433964: add esi, edx; lea r11, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e4: add esi, edx; lea r11, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433664: add esi, edx; lea r11, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e4: add esi, edx; lea r11, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433364: add esi, edx; lea r11, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e4: add esi, edx; lea r11, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433064: add esi, edx; lea r11, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a20: add esi, edx; lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318d0: add esi, edx; lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431780: add esi, edx; lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431630: add esi, edx; lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314e0: add esi, edx; lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431390: add esi, edx; lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431240: add esi, edx; lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fa0: add esi, edx; lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e50: add esi, edx; lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d00: add esi, edx; lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bb0: add esi, edx; lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a60: add esi, edx; lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430910: add esi, edx; lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307c0: add esi, edx; lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304fa: add esi, edx; lea r11, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f050: add esi, edx; lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef00: add esi, edx; lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edb0: add esi, edx; lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec60: add esi, edx; lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb10: add esi, edx; lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9c0: add esi, edx; lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e870: add esi, edx; lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5d0: add esi, edx; lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e480: add esi, edx; lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e330: add esi, edx; lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1e0: add esi, edx; lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e090: add esi, edx; lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df40: add esi, edx; lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddf0: add esi, edx; lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db2a: add esi, edx; lea r11, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000411ece: add esp, 0x10; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000004588a6: add esp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004165b1: add esp, 0x10; pop rbx; jmp rax; 
0x00000000004107b1: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449b9f: add esp, 0x10; pop rbx; ret; 
0x0000000000411eb5: add esp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000446a3d: add esp, 0x100; sub rax, rdx; ret; 
0x0000000000482598: add esp, 0x110; pop rbx; ret; 
0x000000000040dc3e: add esp, 0x118; ret; 
0x000000000045aeba: add esp, 0x148; ret; 
0x000000000041a0c9: add esp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041f37b: add esp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000041f996: add esp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000044d17a: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411845: add esp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041f3c9: add esp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000045ac72: add esp, 0x18; ret; 
0x000000000048cc73: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044e00f: add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423450: add esp, 0x20; call 0xfee0; call 0xdc70; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004170bd: add esp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000416c9d: add esp, 0x20; pop rbx; jmp rax; 
0x00000000004170f6: add esp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000482619: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416a0f: add esp, 0x20; pop rbx; ret; 
0x000000000048d324: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000048d331: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000448bc2: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044953a: add esp, 0x28; ret; 
0x000000000044f558: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847ef: add esp, 0x30; pop rbx; ret; 
0x000000000048ab86: add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000040daf4: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004160be: add esp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004758b1: add esp, 0x38; ret; 
0x000000000048841c: add esp, 0x40; pop rbx; ret; 
0x0000000000481b2c: add esp, 0x48; jmp qword ptr [rax]; 
0x0000000000449212: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000488503: add esp, 0x50; pop rbx; ret; 
0x0000000000481aba: add esp, 0x58; jmp qword ptr [rax]; 
0x000000000044976a: add esp, 0x58; ret; 
0x000000000044965c: add esp, 0x68; ret; 
0x0000000000473d14: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004499ef: add esp, 0x78; ret; 
0x000000000040ffc7: add esp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004687be: add esp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000041869b: add esp, 0x80; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041a70a: add esp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041a879: add esp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000465f07: add esp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000475393: add esp, 0x80; pop rbx; ret; 
0x000000000045c9b3: add esp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000040ecdf: add esp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bb4d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000400de2: add esp, 0x88; pop rbx; ret; 
0x000000000040155f: add esp, 0x98; ret; 
0x000000000046f9c7: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004754b3: add esp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000457b26: add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000414305: add esp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000485431: add esp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040faa7: add esp, 0xd0; pop rbx; ret; 
0x000000000040fc36: add esp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000040f7b5: add esp, 0xd8; ret; 
0x0000000000463025: add esp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000411c54: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004867ba: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000411bbf: add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000047fbab: add esp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000040ffce: add esp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047e609: add esp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000044b180: add esp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000044a3bc: add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000416669: add esp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000488359: add esp, 8; movzx eax, al; neg eax; ret; 
0x0000000000413674: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401bf3: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000423819: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000400413: add esp, 8; ret; 
0x0000000000438475: add qword ptr [r10 - 0x2f], r12; jl 0x384c3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000041e9ac: add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000040ebc9: add qword ptr [rip + 0x2adc27], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000435842: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x00000000004357d2: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000435762: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000042ad34: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048adb8: add r8, rsi; test dil, dil; jns 0x8adc3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048ddd8: add r8, rsi; test dil, dil; jns 0x8dde3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f9d8: add r8, rsi; test dil, dil; jns 0x8f9e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000417868: add r8d, dword ptr [r8]; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004572ee: add r9b, byte ptr [rax + 0x39]; ret; 
0x000000000045730c: add r9d, dword ptr [rax + 0x39]; ret; 
0x0000000000465e58: add r9d, eax; mov eax, r9d; ret; 
0x00000000004abc64: add rax, -0x64f80000; cmc; call rax; 
0x00000000004749e4: add rax, 0x20; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ba4: add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7d9: add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000474a04: add rax, 0x40; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440bc4: add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7f9: add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000474a52: add rax, 0x60; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c12: add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b819: add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000474820: add rax, 1; ret; 
0x0000000000474817: add rax, 2; ret; 
0x0000000000474830: add rax, 3; ret; 
0x000000000045ab88: add rax, qword ptr [0]; ret; 
0x000000000047c285: add rax, qword ptr [r14]; call rax; 
0x00000000004899bf: add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000048d0bb: add rax, qword ptr [r8 + 0xd0]; add rsp, 0x18; ret; 
0x000000000046f238: add rax, qword ptr [r8]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046f1ca: add rax, qword ptr [rax]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000047d20b: add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000489b5c: add rax, qword ptr [rbx]; mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000486c32: add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000481da3: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821d3: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000481f04: add rax, qword ptr [rdx + 8]; mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x000000000045ab87: add rax, qword ptr fs:[0]; ret; 
0x000000000047c5a6: add rax, r11; call rax; 
0x000000000048c00c: add rax, r12; jmp rax; 
0x0000000000402203: add rax, r13; jmp rax; 
0x000000000048c90d: add rax, r14; jmp rax; 
0x000000000048afbb: add rax, r15; jmp rax; 
0x000000000048ad95: add rax, r8; jmp rax; 
0x000000000048c545: add rax, r9; jmp rax; 
0x000000000044d4d3: add rax, rbp; jmp rax; 
0x000000000044d45b: add rax, rbx; jmp rax; 
0x0000000000440777: add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000046ea8a: add rax, rcx; jmp rax; 
0x000000000047490c: add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440adc: add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b128: add rax, rcx; ret; 
0x000000000042b655: add rax, rcx; vzeroupper; ret; 
0x0000000000474909: add rax, rdi; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ad9: add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b125: add rax, rdi; add rax, rcx; ret; 
0x000000000042b652: add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000046f0ba: add rax, rdi; jmp rax; 
0x000000000048521f: add rax, rdi; sub rax, r8; ret; 
0x00000000004749c4: add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b94: add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000446b39: add rax, rdi; sub rax, rsi; ret; 
0x000000000042b353: add rax, rdi; ret; 
0x000000000042b7c9: add rax, rdi; vzeroupper; ret; 
0x00000000004852d7: add rax, rdx; cmp rax, qword ptr [rip + 0x236e8f]; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000401f99: add rax, rdx; jmp rax; 
0x000000000040eabb: add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000047451a: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a85: add rax, rdx; sub rax, rdi; ret; 
0x000000000044806b: add rax, rsi; jmp rax; 
0x000000000047c281: add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000489bb0: add rbx, 8; mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489ad8: add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000485818: add rbx, qword ptr [rdi]; and eax, 0xf; cmp al, 0xa; jne 0x8576f; nop word ptr cs:[rax + rax]; call rbx; 
0x0000000000447f9d: add rcx, 0x100; cmp rdx, rcx; jne 0x47f82; vzeroupper; ret; 
0x0000000000447dda: add rcx, 0x80; cmp rdx, rcx; jne 0x47dc7; vzeroupper; ret; 
0x000000000042c1e1: add rcx, r11; jmp rcx; 
0x0000000000448093: add rcx, rsi; jmp rcx; 
0x0000000000444044: add rdi, 0x10; bsf rdx, rdx; lea r11, [rip + 0x50f1d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446cc: add rdi, 0x10; lea r11, [rip + 0x50919]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440ac: add rdi, 0x10; lea r11, [rip + 0x50eb9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000446ad8: add rdi, 0x10; sub eax, r8d; cmp eax, ecx; jle 0x46b18; movsxd rax, ecx; ret; 
0x000000000047b51c: add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000444701: add rdi, 0x20; lea r11, [rip + 0x508e4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440e1: add rdi, 0x20; lea r11, [rip + 0x50e84]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445ce: add rdi, 0x30; lea r11, [rip + 0x50a17]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443fae: add rdi, 0x30; lea r11, [rip + 0x50fb7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044be01: add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000040d5ab: add rdi, r10; jmp rdi; 
0x000000000045a363: add rdi, r11; jmp rdi; 
0x0000000000437040: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d40: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc1: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a40: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436740: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436440: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436140: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e40: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b40: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434560: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434260: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e1: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f60: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c60: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433960: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433660: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433360: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e0: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433060: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304f6: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db26: add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004372ab: add rdi, rdx; lea r11, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a06: add rdi, rdx; lea r11, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358aa: add rdi, rdx; lea r11, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347b7: add rdi, rdx; lea r11, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ba9: add rdi, rdx; lea r11, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f26: add rdi, rdx; lea r11, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db4: add rdi, rdx; lea r11, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043040a: add rdi, rdx; lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430345: add rdi, rdx; lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da3a: add rdi, rdx; lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d975: add rdi, rdx; lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc30: add rdi, rdx; lea r11, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbb6: add rdi, rdx; lea r11, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb27: add rdi, rdx; lea r11, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c91c: add rdi, rdx; lea r11, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7ea: add rdi, rdx; lea r11, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c724: add rdi, rdx; lea r11, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6a6: add rdi, rdx; lea r11, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c60f: add rdi, rdx; lea r11, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c413: add rdi, rdx; lea r11, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e2: add rdi, rdx; lea r11, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d3: add rdi, rdx; lea r11, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004310ef: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e71f: add rdi, rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432adb: add rdi, rdx; sfence; lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f3: add rdi, rdx; sfence; lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444687: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x5095b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444067: add rdx, 0x10; sub rdx, rcx; lea r11, [rip + 0x50efb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004833f1: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000040d2c2: add rdx, rdi; jmp rdx; 
0x00000000004446c8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50919]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440a8: add rsi, 0x10; add rdi, 0x10; lea r11, [rip + 0x50eb9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446fd: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x508e4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440dd: add rsi, 0x20; add rdi, 0x20; lea r11, [rip + 0x50e84]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445ca: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x50a17]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443faa: add rsi, 0x30; add rdi, 0x30; lea r11, [rip + 0x50fb7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000411e38: add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000411096: add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f8ef: add rsi, 1; shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000480e23: add rsi, 1; test dl, dl; jne 0x80dfa; movsx eax, cl; neg eax; ret; 
0x0000000000459e64: add rsi, r8; jmp rsi; 
0x0000000000444640: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x509a2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444623: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x509bf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444020: add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x50f42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004372a8: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a03: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358a7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347b4: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ba6: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f23: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db1: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430407: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430342: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da37: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d972: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc2d: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbb3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb24: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c919: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7e7: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c721: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6a3: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c60c: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c410: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2df: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d0: add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000437043: add rsi, rdx; lea r11, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec3: add rsi, rdx; lea r11, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d43: add rsi, rdx; lea r11, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc4: add rsi, rdx; lea r11, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a43: add rsi, rdx; lea r11, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c3: add rsi, rdx; lea r11, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436743: add rsi, rdx; lea r11, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c3: add rsi, rdx; lea r11, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436443: add rsi, rdx; lea r11, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c3: add rsi, rdx; lea r11, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436143: add rsi, rdx; lea r11, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc3: add rsi, rdx; lea r11, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e43: add rsi, rdx; lea r11, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc3: add rsi, rdx; lea r11, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b43: add rsi, rdx; lea r11, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434563: add rsi, rdx; lea r11, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e3: add rsi, rdx; lea r11, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434263: add rsi, rdx; lea r11, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e4: add rsi, rdx; lea r11, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f63: add rsi, rdx; lea r11, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de3: add rsi, rdx; lea r11, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c63: add rsi, rdx; lea r11, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae3: add rsi, rdx; lea r11, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433963: add rsi, rdx; lea r11, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e3: add rsi, rdx; lea r11, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433663: add rsi, rdx; lea r11, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e3: add rsi, rdx; lea r11, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433363: add rsi, rdx; lea r11, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e3: add rsi, rdx; lea r11, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433063: add rsi, rdx; lea r11, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a1f: add rsi, rdx; lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318cf: add rsi, rdx; lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043177f: add rsi, rdx; lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043162f: add rsi, rdx; lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314df: add rsi, rdx; lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043138f: add rsi, rdx; lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043123f: add rsi, rdx; lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f9f: add rsi, rdx; lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e4f: add rsi, rdx; lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cff: add rsi, rdx; lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430baf: add rsi, rdx; lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a5f: add rsi, rdx; lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043090f: add rsi, rdx; lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307bf: add rsi, rdx; lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304f9: add rsi, rdx; lea r11, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f04f: add rsi, rdx; lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eeff: add rsi, rdx; lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edaf: add rsi, rdx; lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec5f: add rsi, rdx; lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb0f: add rsi, rdx; lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9bf: add rsi, rdx; lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e86f: add rsi, rdx; lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5cf: add rsi, rdx; lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e47f: add rsi, rdx; lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e32f: add rsi, rdx; lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1df: add rsi, rdx; lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e08f: add rsi, rdx; lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df3f: add rsi, rdx; lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddef: add rsi, rdx; lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db29: add rsi, rdx; lea r11, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000411ecd: add rsp, 0x10; mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x00000000004588a5: add rsp, 0x10; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004165b0: add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004107b0: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000449b9e: add rsp, 0x10; pop rbx; ret; 
0x0000000000411eb4: add rsp, 0x10; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000446a3c: add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000482597: add rsp, 0x110; pop rbx; ret; 
0x000000000040dc3d: add rsp, 0x118; ret; 
0x000000000045aeb9: add rsp, 0x148; ret; 
0x000000000041a0c8: add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041f37a: add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000041f995: add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000044d179: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411844: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041f3c8: add rsp, 0x18; xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000045ac71: add rsp, 0x18; ret; 
0x000000000048cc72: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044e00e: add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042344f: add rsp, 0x20; call 0xfee0; call 0xdc70; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004170bc: add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000416c9c: add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004170f5: add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000482618: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416a0e: add rsp, 0x20; pop rbx; ret; 
0x000000000048d323: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000048d330: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000448bc1: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000449539: add rsp, 0x28; ret; 
0x000000000044f557: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004847ee: add rsp, 0x30; pop rbx; ret; 
0x000000000048ab85: add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000040daf3: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004160bd: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004758b0: add rsp, 0x38; ret; 
0x000000000048841b: add rsp, 0x40; pop rbx; ret; 
0x0000000000481b2b: add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000449211: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000488502: add rsp, 0x50; pop rbx; ret; 
0x0000000000481ab9: add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000449769: add rsp, 0x58; ret; 
0x000000000044965b: add rsp, 0x68; ret; 
0x0000000000473d13: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004499ee: add rsp, 0x78; ret; 
0x000000000040ffc6: add rsp, 0x80; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004687bd: add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000041869a: add rsp, 0x80; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041a709: add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000041a878: add rsp, 0x80; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000465f06: add rsp, 0x80; pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000475392: add rsp, 0x80; pop rbx; ret; 
0x000000000045c9b2: add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x000000000040ecde: add rsp, 0x80; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bb4c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000400de1: add rsp, 0x88; pop rbx; ret; 
0x000000000040155e: add rsp, 0x98; ret; 
0x000000000046f9c6: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004754b2: add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000457b25: add rsp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000414304: add rsp, 0xb8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000485430: add rsp, 0xc8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040faa6: add rsp, 0xd0; pop rbx; ret; 
0x000000000040fc35: add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000040f7b4: add rsp, 0xd8; ret; 
0x0000000000463024: add rsp, 8; add ebp, 0x30; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000411c53: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004867b9: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000411bbe: add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000047fbaa: add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000040ffcd: add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047e608: add rsp, 8; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000044b17f: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000044a3bb: add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000416668: add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000488358: add rsp, 8; movzx eax, al; neg eax; ret; 
0x0000000000413673: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401bf2: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423818: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000400412: add rsp, 8; ret; 
0x00000000004852ea: add word ptr [rdx + rax*2], 1; ret; 
0x0000000000494368: and ah, ah; stc; jmp qword ptr [rax]; 
0x000000000047580a: and ah, byte ptr [rsi - 3]; jmp qword ptr [rsi - 0x70]; 
0x00000000004b4618: and al, 0; add byte ptr [rax], al; add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x00000000004b4840: and al, 0; add byte ptr [rax], al; sub byte ptr [rcx + 0x6980000], dl; std; jmp qword ptr [rbp]; 
0x00000000004adc19: and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x000000000046b781: and al, 0; jmp rax; 
0x000000000046bcd4: and al, 0; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046c3aa: and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000475643: and al, 0; test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x000000000048d1f8: and al, 0x10; add rsp, 0x28; ret; 
0x000000000041180e: and al, 0x10; call qword ptr [rbp + 0x18]; 
0x000000000044a7a8: and al, 0x10; call rax; 
0x000000000048255b: and al, 0x10; call rdx; 
0x00000000004756cc: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040118c: and al, 0x10; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000041c94c: and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041199a: and al, 0x10; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000416cc8: and al, 0x10; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000472012: and al, 0x10; mov rdi, r12; call rbx; 
0x000000000040df63: and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047422a: and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040dff3: and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040e088: and al, 0x10; mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048eb98: and al, 0x10; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000486b7c: and al, 0x14; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x00000000004895eb: and al, 0x15; add eax, dword ptr [rax]; add byte ptr [rax - 0xe217], al; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e443: and al, 0x18; call 0x7dd70; add rsp, 0xd8; ret; 
0x0000000000401195: and al, 0x18; call rax; 
0x0000000000449acc: and al, 0x18; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000041199f: and al, 0x18; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004756d0: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000449a00: and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044e758: and al, 0x18; mov r9, r13; call rbx; 
0x0000000000471f2d: and al, 0x18; mov rdi, r12; call rbx; 
0x000000000047422f: and al, 0x18; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000482556: and al, 0x18; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000416cc3: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004756c7: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004530de: and al, 0x20; call rax; 
0x0000000000473ef0: and al, 0x20; call rbx; 
0x0000000000449ad6: and al, 0x20; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000041c947: and al, 0x20; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000450d72: and al, 0x20; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000452b1a: and al, 0x20; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000487cf6: and al, 0x23; add cl, ch; add al, byte ptr [rbx - 0x6f990049]; add rsp, 8; ret; 
0x00000000004a7a24: and al, 0x26; outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x000000000041f378: and al, 0x28; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000041f993: and al, 0x28; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000041c942: and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000481b1a: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa8: and al, 0x28; mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000450d6d: and al, 0x28; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000422843: and al, 0x28; mov rdi, rbp; call rax; 
0x0000000000451481: and al, 0x28; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e5e: and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000475828: and al, 0x28; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000045195b: and al, 0x30; call rbx; 
0x0000000000449ad1: and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x00000000004740de: and al, 0x30; mov rdi, rbp; call rbx; 
0x0000000000481b1f: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aad: and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000494ae0: and al, 0x35; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x00000000004b4e1c: and al, 0x35; std; jmp qword ptr [rdx]; 
0x00000000004a645c: and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x0000000000452bda: and al, 0x38; add byte ptr [rsp + rsi - 0xa], dh; ret; 
0x000000000045148b: and al, 0x38; call rbx; 
0x0000000000473dc8: and al, 0x38; lea rcx, [rax + 1]; call rbx; 
0x0000000000451197: and al, 0x38; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000481b24: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab2: and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000451956: and al, 0x38; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004530cf: and al, 0x38; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x00000000004672cc: and al, 0x40; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret; 
0x000000000045715e: and al, 0x40; add byte ptr [rdx + rdi*2 - 0xa], dh; ret; 
0x0000000000455f1e: and al, 0x40; add byte ptr [rsi + rsi*2 - 0xa], dh; ret; 
0x0000000000481b29: and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab7: and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000455e68: and al, 0x40; call rbx; 
0x00000000004530d9: and al, 0x40; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000451486: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000451192: and al, 0x40; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000451951: and al, 0x40; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000449a38: and al, 0x41; mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x0000000000486c31: and al, 0x48; add eax, dword ptr [rdx + 8]; call rax; 
0x00000000004165d8: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x000000000048ac68: and al, 0x48; add esp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a96c: and al, 0x48; add esp, 0x38; ret; 
0x0000000000470ea9: and al, 0x48; mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471c71: and al, 0x48; mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000416b2b: and al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004132b4: and al, 0x48; mov edi, ebx; call rax; 
0x0000000000455e63: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004530d4: and al, 0x48; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045118d: and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000473dc4: and al, 0x4c; lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000489bb7: and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000413f85: and al, 0x4c; mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000489b65: and al, 0x4c; mov esi, esp; mov edi, ebp; call rax; 
0x0000000000481daa: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821da: and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000484d38: and al, 0x5e; and eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000042025b: and al, 0x68; call rax; 
0x0000000000481f0b: and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x0000000000413529: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd0d1e; jmp qword ptr [rsi + 0x2e]; 
0x000000000046399e: and al, 0x83; ret; 
0x00000000004af8ac: and al, 0x83; stc; jmp rbx; 
0x00000000004572c9: and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004572e7: and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457305: and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x000000000045781d: and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000419143: and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000040483c: and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000491ffb: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000049175b: and al, 0x98; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x000000000045212b: and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000048d48e: and al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000048cddb: and al, 0xbf; add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000449b9c: and al, 0xc; add rsp, 0x10; pop rbx; ret; 
0x0000000000449b93: and al, 0xc; call 0x4bdc0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x0000000000449a43: and al, 0xc; mov eax, 0x48; syscall; 
0x0000000000401190: and al, 0xc; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004165d3: and al, 0xc; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000479c80: and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x000000000040dbcf: and al, 0xd0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x0000000000416b9c: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004b41cc: and al, 0xdc; cld; jmp qword ptr [rbx + 1]; 
0x000000000040dbd7: and al, 0xe0; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000048a963: and al, 0xe8; ja 0x8a96a; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000004181b3: and al, 0xe9; ret 0xfffd; 
0x000000000045253e: and al, 0xf6; ret; 
0x000000000048b863: and al, 0xf8; jmp qword ptr [rsi + 0x2e]; 
0x000000000044980c: and al, 8; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416ccd: and al, 8; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004170f3: and al, 8; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000413bbb: and al, 8; call 0x12850; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000040df6f: and al, 8; call rax; 
0x000000000041c951: and al, 8; call rcx; 
0x000000000046f1c2: and al, 8; ja 0x6f1f8; lea rdi, [rip + 0x34adf]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004496ab: and al, 8; mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000449b03: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044a7a3: and al, 8; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004111e0: and al, 8; mov rdi, r15; call rax; 
0x0000000000413bc5: and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000410761: and al, 8; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004905dc: and al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000449b97: and al, byte ptr [rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000046077d: and al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000048f454: and al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000048d0fa: and al, byte ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x00000000004900b3: and al, byte ptr [rax]; jne 0x90098; pop rbx; ret; 
0x000000000048d165: and al, byte ptr [rax]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x0000000000440cea: and al, byte ptr [rsp + riz*8 - 0xb7f68c]; ret 0xc148; 
0x0000000000449b96: and al, byte ptr es:[rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x000000000041c218: and al, ch; ret 0xff3c; 
0x000000000041b918: and al, ch; ret 0xff45; 
0x0000000000449017: and al, ch; ret; 
0x000000000049428c: and bh, 0xf9; call qword ptr [rax]; 
0x0000000000469511: and bh, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004530df: and bh, bh; rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x00000000004942fc: and bh, bl; stc; inc dword ptr [rax]; loope 0x942fc; jmp rax; 
0x00000000004a6a05: and bh, byte ptr [rsi - 0x5e0466e]; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000494284: and bl, 0xf9; inc dword ptr [rax - 0x7f00061b]; out 0xf9, eax; call qword ptr [rax]; 
0x00000000004a75a3: and bl, byte ptr [rdx + 0x7a]; pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000494fc8: and bl, dh; cli; inc dword ptr [rax - 0xd]; cli; jmp qword ptr [rax - 0xd]; 
0x00000000004114a9: and byte ptr [r8 + 1], r9b; ret; 
0x000000000045a563: and byte ptr [r8 - 0x77], r9b; sti; test rax, rax; je 0x5a56f; call rax; 
0x00000000004164f0: and byte ptr [r9 + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000041140e: and byte ptr [r9 - 0x77], r9b; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004719ce: and byte ptr [rax + 0x3b], cl; push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000471c6b: and byte ptr [rax + 0x3b], cl; sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004b373c: and byte ptr [rax + 0x65100000], al; cld; jmp qword ptr [rcx + 0xe]; 
0x0000000000400f31: and byte ptr [rax + 1], cl; ret 0xb70f; 
0x00000000004749e7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ba7: and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7dc: and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x00000000004114aa: and byte ptr [rax + 1], cl; ret; 
0x00000000004663ce: and byte ptr [rax + 9], cl; ret 0xff83; 
0x0000000000474569: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a7d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000450d73: and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000452b1b: and byte ptr [rax - 0x75], cl; je 0x52b44; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000469229: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045dd0f: and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000477223: and byte ptr [rax - 0x75], cl; sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000413489: and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdac7e; jmp qword ptr [rsi + 0x2e]; 
0x000000000045a564: and byte ptr [rax - 0x77], cl; sti; test rax, rax; je 0x5a56f; call rax; 
0x000000000048d2d6: and byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000467e04: and byte ptr [rax - 0x7d], cl; ret 0xe920; 
0x000000000044fa56: and byte ptr [rax - 0x7d], cl; ret; 
0x0000000000412dd2: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000493f68: and byte ptr [rax - 7], dh; call qword ptr [rax + 0x62]; 
0x0000000000493f68: and byte ptr [rax - 7], dh; call qword ptr [rax + 0x62]; stc; dec dword ptr [rdi - 0x72]; stc; jmp qword ptr [rax]; 
0x0000000000494e5e: and byte ptr [rax], ah; xor byte ptr [rdi], bh; cli; inc dword ptr [rax + 0x41]; cli; call qword ptr [rax + 0x43]; 
0x000000000048d2a9: and byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000046c6b2: and byte ptr [rax], al; add byte ptr [rax], al; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000044817a: and byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000444704: and byte ptr [rbp + rcx*4 + 0x1d], cl; in al, 8; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440e4: and byte ptr [rbp + rcx*4 + 0x1d], cl; test byte ptr [rsi], cl; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004922bc: and byte ptr [rbp - 0x77], cl; ret; 
0x000000000048261b: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000468063: and byte ptr [rbx + rcx*4 + 0x40], cl; sub cl, ch; ret 0xffe8; 
0x0000000000482672: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x0000000000494154: and byte ptr [rbx - 0x4aff0007], dh; stc; jmp rax; 
0x000000000046f0ac: and byte ptr [rbx - 0x78f0d608], al; mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045dd20: and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000046923e: and byte ptr [rcx + 0x2b], cl; push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x00000000004164f1: and byte ptr [rcx + 0x48c03113], cl; add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000415659: and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000411c11: and byte ptr [rcx + 0xc76417], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000046e912: and byte ptr [rcx + rbp], bh; ja 0x6e940; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000041c948: and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004170bf: and byte ptr [rcx - 0x2dcea42f], cl; jmp rax; 
0x000000000040e907: and byte ptr [rcx - 0x353eb711], cl; adc dword ptr [rax + rcx*2 + 0x33], esp; adc al, 0x25; xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000046ab69: and byte ptr [rcx - 0x537bf0ce], cl; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x6ab88; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000493f74: and byte ptr [rcx - 0x6ff10007], dl; stc; call qword ptr [rax]; 
0x000000000048d484: and byte ptr [rcx - 0x77], cl; fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000041140f: and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000045ff09: and byte ptr [rcx - 1], bh; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000047f4c4: and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x000000000049464c: and byte ptr [rcx], dl; cli; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000447ba1: and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000446ecc: and byte ptr [rdi + 0x7e], dh; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447bf1: and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000048e066: and byte ptr [rdi + riz + 0x76], dh; adc eax, 0x30ff8040; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eec6: and byte ptr [rdi + riz + 0x76], dh; adc eax, 0x30ff8040; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000004a4d44: and byte ptr [rdi - 3], dh; jmp rax; 
0x00000000004470e1: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000444c4d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x000000000040fc5b: and byte ptr [rdi], cl; test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x0000000000444b30: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004384b6: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000446c48: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000049496c: and byte ptr [rdx + rdi*8], dh; push qword ptr [rsi + 0x26fffa33]; cmp bh, dl; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000494434: and byte ptr [rdx + rdi*8], dl; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x0000000000494d90: and byte ptr [rip + 0x2ca0fffa], ch; cli; jmp qword ptr [rax]; 
0x000000000042c27a: and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c275: and byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004b3d3c: and byte ptr [rsi - 0x43500000], al; cld; call qword ptr [rdx + 1]; 
0x0000000000474812: and ch, 0xf; je 0x74830; add rax, 2; ret; 
0x0000000000448138: and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042b7ac: and ch, al; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x0000000000493d84: and ch, dh; clc; call qword ptr [rax - 0xb]; 
0x0000000000493d84: and ch, dh; clc; call qword ptr [rax - 0xb]; clc; jmp qword ptr [rax]; 
0x00000000004747fd: and cl, 0xf; je 0x74820; ret; 
0x00000000004943f0: and cl, al; stc; push rax; ret; 
0x0000000000493ead: and cl, bh; jmp rax; 
0x000000000044c731: and cl, byte ptr [rax + 0x63]; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000041175d: and cl, byte ptr [rax - 0x75]; and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000047f2c4: and cl, byte ptr [rax - 0x77]; ret 0x1f0f; 
0x0000000000423e03: and cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000042babd: and cl, byte ptr [rcx - 0x77]; ret; 
0x0000000000473bfa: and cl, byte ptr [rdx]; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000467e08: and cl, ch; push rax; call 0xffffffff89547e0f; ret 0x894c; 
0x00000000004480a3: and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000448fad: and dh, ah; mov edi, edx; mov eax, r8d; syscall; 
0x000000000044bfa9: and dh, al; sub byte ptr [rcx], al; ret; 
0x000000000049437c: and dh, bl; stc; call qword ptr [rax]; 
0x0000000000469510: and dil, al; add ch, byte ptr [rip - 0x7d000000]; ret; 
0x00000000004b43a0: and dl, ah; cld; jmp qword ptr [rsi]; 
0x0000000000494364: and dl, ah; stc; jmp qword ptr [rax]; 
0x00000000004b0e89: and dl, bh; call qword ptr [rdi]; 
0x0000000000469088: and dword ptr [r8], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000411760: and dword ptr [rax + 0x48000000], 0xffffff89; fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x00000000004691f1: and dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000469089: and dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000449b79: and dword ptr [rax], eax; add byte ptr [rcx - 0x473d7621], cl; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004a9542: and dword ptr [rax], edx; jmp qword ptr [rdi]; 
0x0000000000493fdc: and dword ptr [rbp - 0x6a4e0007], edx; stc; inc dword ptr [rcx - 0x6a]; stc; jmp rcx; 
0x00000000004178c7: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041791f: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041874e: and dword ptr [rdi], ecx; mov dh, 0; ret; 
0x00000000004a65f9: and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x00000000004a9541: and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045ab8b: and eax, 0; ret; 
0x000000000047c08f: and eax, 0x134d870f; add byte ptr [rax], al; lea rcx, [rip + 0x28c63]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000045ab25: and eax, 0x15894800; mov bh, bh; and eax, 0xf3087400; ret; 
0x000000000042479d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000042383d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000042476d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000042437d: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727dd: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bed: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727ad: and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000047bb47: and eax, 0x23e6d4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000493e81: and eax, 0x2710fff9; stc; push qword ptr [rax]; sub cl, bh; call qword ptr [rax + 0x29]; 
0x000000000044877a: and eax, 0x28; jne 0x487a4; add rsp, 0x20; pop rbx; ret; 
0x0000000000449532: and eax, 0x28; jne 0x49549; add rsp, 0x28; ret; 
0x0000000000449650: and eax, 0x28; jne 0x49709; add rsp, 0x68; ret; 
0x0000000000449762: and eax, 0x28; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499e3: and eax, 0x28; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449af2: and eax, 0x28; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000044a461: and eax, 0x28; jne 0x4a477; add rsp, 0x28; ret; 
0x000000000045ac6a: and eax, 0x28; jne 0x5ac76; add rsp, 0x18; ret; 
0x000000000045aeb2: and eax, 0x28; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688ad: and eax, 0x28; jne 0x688bc; add rsp, 0xd8; ret; 
0x0000000000475665: and eax, 0x28; jne 0x75729; add rsp, 0x78; ret; 
0x0000000000475777: and eax, 0x28; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004757fa: and eax, 0x28; jne 0x75809; movzx eax, al; add rsp, 0x58; ret; 
0x00000000004758a9: and eax, 0x28; jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000481bf5: and eax, 0x28; jne 0x81c02; add rsp, 0x20; pop rbx; ret; 
0x0000000000481cf0: and eax, 0x28; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481db0: and eax, 0x28; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f11: and eax, 0x28; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821e0: and eax, 0x28; jne 0x8220e; add rsp, 0x68; ret; 
0x000000000048421c: and eax, 0x28; jne 0x8425e; leave; ret; 
0x00000000004847e3: and eax, 0x28; jne 0x848a4; add rsp, 0x30; pop rbx; ret; 
0x0000000000484ec8: and eax, 0x28; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fab: and eax, 0x28; jne 0x84fc4; add rsp, 0x38; ret; 
0x0000000000488306: and eax, 0x28; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000040f7ad: and eax, 0x28; jne 0xf7bc; add rsp, 0xd8; ret; 
0x000000000040dc33: and eax, 0x28; mov eax, r8d; jne 0xdc5c; add rsp, 0x118; ret; 
0x0000000000410759: and eax, 0x28; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004004c9: and eax, 0x2b8bfa; nop; ret; 
0x000000000040e9d8: and eax, 0x30; call rax; 
0x000000000040e912: and eax, 0x30; call rdx; 
0x000000000040e9fe: and eax, 0x30; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000045905d: and eax, 0x34894a00; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x0000000000459a25: and eax, 0x358d4800; ret; 
0x00000000004480bd: and eax, 0x3fc00; pop rbx; ret; 
0x000000000044819a: and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000448108: and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000475753: and eax, 0x410000; cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x00000000004608ca: and eax, 0x48b4800; clc; jmp rax; 
0x000000000045ab0d: and eax, 0x54800; add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000004481b3: and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000448157: and eax, 0x7ff80000; ret; 
0x000000000048d1ed: and eax, 0x85480000; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000044c00a: and eax, 0x8d48f631; cmp eax, 0x49b11; mov eax, 0x15; syscall; 
0x000000000044bde7: and eax, 0xc; cmp eax, 4; je 0x4bdf0; ret; 
0x000000000048581b: and eax, 0xf; cmp al, 0xa; jne 0x8576f; nop word ptr cs:[rax + rax]; call rbx; 
0x000000000044808c: and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x000000000045ab2c: and eax, 0xf3087400; ret; 
0x0000000000406f3a: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a581: and eax, 0xfa83108b; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000042d7f0: and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042cf23: and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000400dd7: and eax, 0xffffffc0; mov qword ptr [rip + 0x2bb03f], rax; add rsp, 0x88; pop rbx; ret; 
0x00000000004409c4: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440963: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x000000000048add5: and eax, 0xfffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000048d19b: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004826bc: and eax, 2; sub eax, 1; ret; 
0x0000000000485064: and eax, dword ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0x102; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x000000000047f2dd: and eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0x23d0c9; add rsp, 8; ret; 
0x00000000004ada8d: and eax, dword ptr [rax]; add byte ptr [rax], ah; mov bl, 0xf6; call qword ptr [rsi]; 
0x0000000000481a1d: and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000047f314: and eax, dword ptr [rax]; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000487778: and eax, dword ptr [rax]; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000047f2e5: and eax, dword ptr [rax]; add rsp, 8; ret; 
0x00000000004852e8: and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004852df: and eax, dword ptr [rax]; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000047f21c: and eax, dword ptr [rax]; jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000048776e: and eax, dword ptr [rax]; jne 0x877f0; cmp qword ptr [rip + 0x2317fd], 0; jne 0x8777f; pop rbx; ret; 
0x0000000000484d3a: and eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000047f385: and eax, dword ptr [rax]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x00000000004848f5: and eax, dword ptr [rax]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x00000000004848da: and eax, dword ptr [rax]; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x000000000047f38f: and eax, dword ptr [rax]; mov qword ptr [rsi], rax; ret; 
0x000000000047bb4a: and eax, dword ptr [rax]; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000047ba92: and eax, dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000047f229: and eax, dword ptr [rax]; ret; 
0x000000000045292e: and eax, dword ptr [rip + 0x29480000]; ret 0x349; 
0x000000000047322e: and eax, ecx; je 0x733f0; bsr rax, rax; add rax, rdi; ret; 
0x0000000000424729: and ebp, dword ptr [rdi]; add al, byte ptr [rax]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000435e49: and ebp, ebp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004178c8: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000417920: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000436149: and ebp, edx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044bd82: and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x0000000000437049: and ebx, ebx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d49: and ebx, esi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d7f5: and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042cf28: and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000047259a: and ecx, dword ptr [rax - 0x39]; or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044b4ca: and ecx, dword ptr [rax - 0x77]; ret 0xabe; 
0x000000000041247e: and ecx, dword ptr [rcx + rcx*4 + 0x43]; or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000041e9aa: and ecx, ebp; add qword ptr [rax], rax; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x0000000000493e71: and ecx, edi; call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x0000000000493e79: and edi, ecx; call rax; 
0x00000000004b3119: and edi, esp; jmp qword ptr [rcx]; 
0x000000000044811e: and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000004733be: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000435b49: and esi, eax; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004734b2: and esi, eax; je 0x733f0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004732bc: and esi, ecx; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000436a49: and esp, ecx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436449: and esp, edi; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045df4f: and esp, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000436749: and esp, esp; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044bd81: and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x000000000042b7ab: and r13b, r8b; std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x00000000004409c3: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440962: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x000000000048add4: and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000047322d: and rax, rcx; je 0x733f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004733bd: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004734b1: and rsi, rax; je 0x733f0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004732bb: and rsi, rcx; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000044bfa8: and sil, al; sub byte ptr [rcx], al; ret; 
0x000000000046b526: bnd call qword ptr [rax + 0x38]; 
0x000000000045dd19: bnd call qword ptr [rbx + 0x38]; 
0x000000000041c93a: bnd jmp 0x1c7b3; mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041ca00: bnd jmp 0x1c80e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000440ba1: bsf eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b851: bsf eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440bc1: bsf eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b861: bsf eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000440c0f: bsf eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b88f: bsf eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000440774: bsf eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000440ad6: bsf eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b42a: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042b8e6: bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000004749c1: bsf eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b91: bsf eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b350: bsf eax, eax; add rax, rdi; ret; 
0x000000000042b841: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c1: bsf eax, eax; cmp rdx, rax; jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x000000000042b360: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b370: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b340: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042b29f: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000440303: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x00000000004400e3: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042b119: bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; add rax, rdi; add rax, rcx; ret; 
0x000000000042b380: bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b390: bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b3a0: bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3b0: bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000474407: bsf eax, edx; shr rax, 2; ret; 
0x0000000000440926: bsf eax, edx; ret; 
0x000000000042c181: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c1a1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c167: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042bef1: bsf ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000425daa: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425e70: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425c3c: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000474517: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a82: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004446a1: bsf edx, edx; lea r11, [rip + 0x50945]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444669: bsf edx, edx; lea r11, [rip + 0x5097d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444644: bsf edx, edx; lea r11, [rip + 0x509a2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444627: bsf edx, edx; lea r11, [rip + 0x509bf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444081: bsf edx, edx; lea r11, [rip + 0x50ee5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444049: bsf edx, edx; lea r11, [rip + 0x50f1d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444024: bsf edx, edx; lea r11, [rip + 0x50f42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425bd1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000440420: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x0000000000440200: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000474406: bsf rax, rdx; shr rax, 2; ret; 
0x0000000000440972: bsf rax, rdx; ret; 
0x0000000000425da9: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425e6f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425c3b: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000474516: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a81: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004446a0: bsf rdx, rdx; lea r11, [rip + 0x50945]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444668: bsf rdx, rdx; lea r11, [rip + 0x5097d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444643: bsf rdx, rdx; lea r11, [rip + 0x509a2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444626: bsf rdx, rdx; lea r11, [rip + 0x509bf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444080: bsf rdx, rdx; lea r11, [rip + 0x50ee5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444048: bsf rdx, rdx; lea r11, [rip + 0x50f1d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444023: bsf rdx, rdx; lea r11, [rip + 0x50f42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000425bd0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000473237: bsr eax, eax; add rax, rdi; ret; 
0x0000000000473611: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004734bb: bsr eax, esi; add rax, rdi; ret; 
0x00000000004733c9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x00000000004732c5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x0000000000473236: bsr rax, rax; add rax, rdi; ret; 
0x00000000004734ba: bsr rax, rsi; add rax, rdi; ret; 
0x00000000004733c8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004732c4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000042bf5c: bswap eax; bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000042bf5e: bswap ecx; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000474513: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000473853: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004737b4: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000474512: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000473852: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004737b3: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000413bbd: call 0x12850; mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041458d: call 0x16180; mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044bfcd: call 0x184cfb1a; jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000468b22: call 0x18cb0e6f; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040127a: call 0x1b40; mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000047f306: call 0x1b40; nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x23d4b1], 0; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x000000000040ec28: call 0x1b40; xor eax, eax; ret; 
0x000000000046efcd: call 0x1ff1913; ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x000000000047fba5: call 0x20060; add rsp, 8; mov eax, ebx; pop rbx; pop rbp; ret; 
0x000000000040fcf9: call 0x20060; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480dc8: call 0x20060; mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047f44d: call 0x20060; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000042bea4: call 0x29841b8; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000046f0ab: call 0x29ff73d0; ja 0x6f140; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000045f74a: call 0x3947f74e; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000041012c: call 0x415d428e; pop rbp; pop r14; ret; 
0x0000000000421933: call 0x415e5a95; pop rbp; pop r14; ret; 
0x0000000000421e33: call 0x415e5f95; pop rbp; pop r14; ret; 
0x000000000046133f: call 0x4206133e; call qword ptr [rdi + 0x38]; 
0x0000000000495614: call 0x45095156; sti; jmp qword ptr [rsi]; 
0x000000000041f76c: call 0x48022136; lea eax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x00000000004adc04: call 0x480adc2d; mov ch, 0xf6; call qword ptr [rsi]; 
0x0000000000440cf4: call 0x48ecf809; mov eax, edi; ret; 
0x0000000000440dd4: call 0x48ecf8e9; mov eax, edx; ret; 
0x00000000004607ab: call 0x490607aa; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000401550: call 0x49980; cmp eax, -1; je 0x162b; add rsp, 0x98; ret; 
0x000000000047bbeb: call 0x4a590; test eax, eax; js 0x7bc02; pop rbx; ret; 
0x000000000044a64a: call 0x4aa0d; add byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x0000000000418695: call 0x4bd10; add rsp, 0x80; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041a704: call 0x4bd10; add rsp, 0x80; mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000004687b8: call 0x4bd40; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x000000000047538d: call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x000000000045c9ad: call 0x4bd40; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000449b77: call 0x4bd60; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000449b95: call 0x4bdc0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x00000000004497ab: call 0x4be30; mov eax, dword ptr [rip + 0x273056]; test eax, eax; jne 0x497d0; xor eax, eax; syscall; 
0x00000000004758cb: call 0x4be30; mov ecx, 0xc; mov eax, ecx; syscall; 
0x0000000000417866: call 0x4be30; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000488514: call 0x4be30; nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x0000000000485487: call 0x4be30; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x23742a]; ret; 
0x00000000004579c4: call 0x4be30; nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2644a1]; ret; 
0x00000000004754ea: call 0x4be30; nop; mov eax, 0x3f; syscall; 
0x000000000045dc73: call 0x4d05dc6e; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x00000000004582ed: call 0x4d3c0; mov rdi, r14; call rbx; 
0x000000000044f045: call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004585c4: call 0x4d3c0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000042d2f5: call 0x4e71e2ed; call 0xf69bbb1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434dc0: call 0x4ef35db7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004378e0: call 0x4ef388d7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000040fcff: call 0x5c425a5f; ret; 
0x0000000000410163: call 0x5c425ec3; pop r13; pop r14; ret; 
0x0000000000410244: call 0x5c425fa4; pop r13; ret; 
0x000000000041027f: call 0x5c425fdf; pop r13; ret; 
0x0000000000413ce8: call 0x5c429a48; ret; 
0x0000000000413d04: call 0x5c429a64; ret; 
0x0000000000414a23: call 0x5c42a783; ret; 
0x0000000000418bf3: call 0x5c42e953; pop r13; pop r14; ret; 
0x0000000000418c9f: call 0x5c42e9ff; pop r13; pop r14; ret; 
0x000000000041fe36: call 0x5c435b96; pop r13; pop r14; ret; 
0x000000000044a633: call 0x5c460393; mov esi, 2; jmp rax; 
0x000000000044ab6f: call 0x5c4608cf; pop r13; ret; 
0x000000000047e384: call 0x5c4940e4; pop r13; ret; 
0x000000000047fb03: call 0x5c495863; ret; 
0x000000000047fb20: call 0x5c495880; ret; 
0x000000000047fb5d: call 0x5c4958bd; ret; 
0x000000000048a357: call 0x5c4a00b7; pop r13; ret; 
0x000000000048a386: call 0x5c4a00e6; pop r13; ret; 
0x0000000000422b13: call 0x5d438759; pop r14; pop r15; ret; 
0x0000000000436087: call 0x634c6091; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362ca: call 0x634c62d4; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045f4c0: call 0x634ef4c4; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000040eac0: call 0x648e36c8; ret; 
0x000000000045ab46: call 0x6505ab4a; mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045aba3: call 0x6505aba7; add rax, qword ptr [0]; ret; 
0x000000000046fc32: call 0x70a30; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004747f5: call 0x74d9cbfc; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000042d7d8: call 0x75cb0fed; adc ah, byte ptr [rip + 0xffff]; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000046e911: call 0x77302536; sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000474914: call 0x78000e1b; ret; 
0x00000000004749cc: call 0x78000ed3; ret; 
0x00000000004749f0: call 0x78000ef7; ret; 
0x0000000000474a10: call 0x78000f17; ret; 
0x0000000000474a5e: call 0x78000f65; ret; 
0x0000000000474afd: call 0x78001004; ret; 
0x0000000000474c38: call 0x7800113f; ret; 
0x0000000000474c6a: call 0x78001171; ret; 
0x0000000000474c81: call 0x78001188; ret; 
0x0000000000474ca5: call 0x780011ac; ret; 
0x0000000000474cc5: call 0x780011cc; ret; 
0x0000000000474ce5: call 0x780011ec; ret; 
0x0000000000474cf5: call 0x780011fc; ret; 
0x0000000000474d1c: call 0x78001223; ret; 
0x0000000000474d40: call 0x78001247; ret; 
0x0000000000474d60: call 0x78001267; ret; 
0x0000000000474dae: call 0x780012b5; ret; 
0x000000000048857d: call 0x78be0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000481c38: call 0x7aac0; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048a3b3: call 0x7aac0; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000047fbe2: call 0x7c9343e8; ret; 
0x000000000048755f: call 0x7c93bd65; ret; 
0x000000000047e445: call 0x7dd70; add rsp, 0xd8; ret; 
0x000000000047c593: call 0x7e510; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000047d1ff: call 0x7e510; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047f2db: call 0x816b4; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x000000000045874c: call 0x81ca0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000048420f: call 0x835c0; mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x8425e; leave; ret; 
0x000000000048452b: call 0x847f7; add byte ptr [rax], al; mov eax, 1; ret; 
0x0000000000458765: call 0x849106b; pop rbx; ret; 
0x0000000000488274: call 0x85b90; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000481b6d: call 0x85b90; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488453: call 0x8a3c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048837f: call 0x8a6c0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048a964: call 0x8ace0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000047e607: call 0x8cc6954; mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000490f48: call 0x8cd9295; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048d1eb: call 0x8f700; test rax, rax; je 0x8d200; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000402107: call 0xaf8a40f; ja 0x1e31; lea rdx, [rip + 0x90507]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021f3: call 0xaf8a4fb; ja 0x1e5f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x0000000000400c09: call 0xb5d; mov eax, 0; leave; ret; 
0x0000000000423458: call 0xdc70; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000048d179: call 0xdc70; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000042d2fa: call 0xf69bbb1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044808a: call 0xfe5039b; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000423453: call 0xfee0; call 0xdc70; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000048af5b: call 0xffffffff850bf89f; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000048aff0: call 0xffffffff850bf934; cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x0000000000467e0b: call 0xffffffff89547e0f; ret 0x894c; 
0x000000000045da7f: call 0xffffffff89d76386; ret 0x8341; 
0x000000000049560c: call 0xffffffff8f09514e; cmp eax, 0x3de8fffb; sti; inc dword ptr [rsi + rdi - 5]; jmp qword ptr [rsi]; 
0x00000000004b2b04: call 0xffffffff980b2b7c; cld; sti; jmp qword ptr [rbx]; 
0x000000000042c152: call 0xffffffffc52d3756; std; xlatb; ret; 
0x0000000000400b7e: call 0xffffffffc7d00ccb; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x000000000044b185: call 0xffffffffe1040ee5; nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042f273: call 0xfffffffff0617dc4; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c43: call 0xfffffffff061a794; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f143: call 0xfffffffff0627a94; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f181: call 0xfffffffff0627ad2; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f1b9: call 0xfffffffff0627b0a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f1f7: call 0xfffffffff0627b48; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f22f: call 0xfffffffff0627b80; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f257: call 0xfffffffff0627ba8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f27f: call 0xfffffffff0627bd0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431b13: call 0xfffffffff062a464; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431b51: call 0xfffffffff062a4a2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431b89: call 0xfffffffff062a4da; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431bc7: call 0xfffffffff062a518; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431bff: call 0xfffffffff062a550; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c27: call 0xfffffffff062a578; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c4f: call 0xfffffffff062a5a0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000048d4cb: call 0xfffffffff07e601c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d649: call 0xfffffffff07e619a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d795: call 0xfffffffff07e62e6; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d7e1: call 0xfffffffff07e6332; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d970: call 0xfffffffff07e64c1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048dad0: call 0xfffffffff07e6621; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048db21: call 0xfffffffff07e6672; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004885eb: call 0xfffffffff8c9ce4b; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x00000000004480bb: call 0xfffffffffc04a5ce; add eax, dword ptr [rax]; pop rbx; ret; 
0x0000000000448106: call 0xfffffffffc04a611; inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000487b6c: call 0xffffffffffc00000; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048f654: call 0xffffffffffc00000; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413530: call 0xfffffffffffd0d1e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413490: call 0xfffffffffffdac7e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a4d03: call ptr [rax]; je 0xa4d04; call rax; 
0x00000000004a4d03: call ptr [rax]; je 0xa4d04; call rax; ja 0xa4d08; jmp rbx; 
0x00000000004a4d17: call ptr [rax]; je 0xa4d18; call ptr [rax]; je 0xa4d1c; jmp rbx; 
0x00000000004a4d1b: call ptr [rax]; je 0xa4d1c; jmp rbx; 
0x00000000004950eb: call ptr [rax]; xor bl, bh; push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x000000000041ab12: call ptr [rbx + 0x48]; mov eax, edi; pop rbp; pop r12; ret; 
0x0000000000419370: call ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000411ed5: call ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000411c5b: call ptr [rbx + 0x5d]; ret; 
0x000000000047fcb6: call ptr [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x00000000004946eb: call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; 
0x00000000004946eb: call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x00000000004ab653: call ptr [rbx - 0x510001f0]; adc dh, bh; inc ecx; adc dh, bh; call rsp; 
0x000000000041058e: call ptr [rbx - 0x77]; rcr byte ptr [rbp + 0x41], 1; pop rsp; pop r13; ret; 
0x000000000049442f: call ptr [rsi + 0x20fffa0d]; adc al, 0xfa; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x0000000000494cab: call ptr [rsi + 0x2efffa29]; sub edx, edi; call rsp; 
0x00000000004963fb: call ptr [rsi + 0x73]; sti; jmp qword ptr [rsi]; 
0x000000000049584b: call ptr [rsi + rdi]; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000494637: call qword ptr [rax + 0x13]; 
0x0000000000494637: call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000413e4a: call qword ptr [rax + 0x18]; 
0x000000000044d344: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x26cfa9]; ret; 
0x000000000048d124: call qword ptr [rax + 0x1f0f2e66]; test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000049416b: call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x0000000000494647: call qword ptr [rax + 0x20fffa11]; adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000493e8b: call qword ptr [rax + 0x29]; 
0x00000000004950f3: call qword ptr [rax + 0x30]; 
0x000000000041a76d: call qword ptr [rax + 0x31]; 
0x0000000000494957: call qword ptr [rax + 0x36]; 
0x0000000000494957: call qword ptr [rax + 0x36]; cli; jmp rax; 
0x000000000045fcb6: call qword ptr [rax + 0x38]; 
0x00000000004137c6: call qword ptr [rax + 0x40]; 
0x00000000004943ab: call qword ptr [rax + 0x40fff9e5]; mov edi, 0xc380fff9; stc; call rax; 
0x0000000000494e67: call qword ptr [rax + 0x43]; 
0x0000000000494e67: call qword ptr [rax + 0x43]; cli; jmp qword ptr [rax + 0x45]; 
0x000000000048ad72: call qword ptr [rax + 0x49]; 
0x0000000000493f17: call qword ptr [rax + 0x5a]; 
0x0000000000493f6b: call qword ptr [rax + 0x62]; 
0x0000000000493f6b: call qword ptr [rax + 0x62]; stc; dec dword ptr [rdi - 0x72]; stc; jmp qword ptr [rax]; 
0x00000000004718d3: call qword ptr [rax + 0x68]; 
0x0000000000495e87: call qword ptr [rax + 0x6b]; 
0x0000000000495e87: call qword ptr [rax + 0x6b]; sti; push qword ptr [rax]; imul edi, ebx, -1; or byte ptr [rbx - 5], ch; jmp rax; 
0x0000000000493f5b: call qword ptr [rax + 0x6d]; 
0x0000000000494357: call qword ptr [rax + 0x70fff9dc]; fdivp st(1); call qword ptr [rax - 0x20]; 
0x000000000049429b: call qword ptr [rax + 0x70fff9df]; loope 0x9429c; jmp qword ptr [rax - 0x1d]; 
0x000000000048aec9: call qword ptr [rax + 0x74]; 
0x0000000000413f8c: call qword ptr [rax + 0x78]; 
0x000000000049462f: call qword ptr [rax + 0xd]; 
0x000000000049445f: call qword ptr [rax + 0xf]; 
0x000000000049445f: call qword ptr [rax + 0xf]; cli; jmp rax; 
0x00000000004af5bb: call qword ptr [rax + 1]; 
0x00000000004948ab: call qword ptr [rax + 3]; 
0x00000000004948ab: call qword ptr [rax + 3]; cli; push rax; in eax, 0xf9; call qword ptr [rax]; 
0x0000000000451a57: call qword ptr [rax + 4]; 
0x00000000004b3373: call qword ptr [rax + 5]; 
0x00000000004119a8: call qword ptr [rax + 8]; 
0x00000000004945d3: call qword ptr [rax + rdx - 6]; jmp rsp; 
0x00000000004613f8: call qword ptr [rax - 0x18]; 
0x00000000004613f8: call qword ptr [rax - 0x18]; xchg ecx, eax; ret 0xffff; 
0x00000000004948ef: call qword ptr [rax - 0x1a]; 
0x000000000048ef79: call qword ptr [rax - 0x1b]; 
0x00000000004942bf: call qword ptr [rax - 0x1f]; 
0x000000000049435f: call qword ptr [rax - 0x20]; 
0x000000000049435f: call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x00000000004942db: call qword ptr [rax - 0x21]; 
0x00000000004942db: call qword ptr [rax - 0x21]; stc; push qword ptr [rax]; loope 0x942dc; call qword ptr [rax]; 
0x000000000049442b: call qword ptr [rax - 0x2a]; 
0x00000000004943d7: call qword ptr [rax - 0x31]; 
0x000000000049492b: call qword ptr [rax - 0x41000604]; xor edi, edx; inc dword ptr [rax + 0x3a]; cli; call rax; 
0x00000000004940eb: call qword ptr [rax - 0x41]; 
0x00000000004940eb: call qword ptr [rax - 0x41]; stc; jmp rax; 
0x000000000049418b: call qword ptr [rax - 0x42]; 
0x000000000049418b: call qword ptr [rax - 0x42]; stc; jmp rax; 
0x00000000004940e7: call qword ptr [rax - 0x43]; 
0x00000000004940e7: call qword ptr [rax - 0x43]; stc; call qword ptr [rax - 0x41]; stc; jmp rax; 
0x0000000000494187: call qword ptr [rax - 0x44]; 
0x0000000000494187: call qword ptr [rax - 0x44]; stc; call qword ptr [rax - 0x42]; stc; jmp rax; 
0x00000000004940e3: call qword ptr [rax - 0x45]; 
0x0000000000494183: call qword ptr [rax - 0x46]; 
0x0000000000494133: call qword ptr [rax - 0x4d]; 
0x0000000000494133: call qword ptr [rax - 0x4d]; stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x000000000049504f: call qword ptr [rax - 0x4f000507]; stc; cli; call rax; 
0x0000000000493e93: call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000493e93: call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x0000000000493e73: call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x00000000004a39db: call qword ptr [rax - 0x50]; 
0x000000000049425f: call qword ptr [rax - 0x56]; 
0x000000000049420b: call qword ptr [rax - 0x5d]; 
0x0000000000494f3f: call qword ptr [rax - 0x5e]; 
0x0000000000494faf: call qword ptr [rax - 0x5f00050e]; cli; inc eax; cli; call rax; 
0x0000000000494e77: call qword ptr [rax - 0x5f0005b5]; cli; push qword ptr [rax - 0x3f0005b1]; push rcx; cli; call rax; 
0x0000000000494f13: call qword ptr [rax - 0x69]; 
0x0000000000494167: call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x0000000000494163: call qword ptr [rax - 0x6f000646]; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x000000000046ccb0: call qword ptr [rax - 0x75]; 
0x0000000000494ef3: call qword ptr [rax - 0x76]; 
0x0000000000493f4b: call qword ptr [rax - 0x7f000697]; push -7; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x0000000000493d87: call qword ptr [rax - 0xb]; 
0x0000000000493d87: call qword ptr [rax - 0xb]; clc; jmp qword ptr [rax]; 
0x0000000000494f9f: call qword ptr [rax - 0xe]; 
0x0000000000494f9f: call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x000000000049262b: call qword ptr [rax - 5]; 
0x0000000000495067: call qword ptr [rax - 6]; 
0x0000000000495047: call qword ptr [rax - 7]; 
0x0000000000495023: call qword ptr [rax - 8]; 
0x0000000000494ff7: call qword ptr [rax - 9]; 
0x0000000000494ff7: call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x000000000041ed23: call qword ptr [rax]; 
0x000000000049485f: call qword ptr [rax]; add eax, 0x480fffa; cli; push rax; add edi, edx; jmp qword ptr [rax + 3]; 
0x00000000004a4d27: call qword ptr [rax]; jbe 0xa4d28; jmp rbx; 
0x00000000004a4d83: call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x000000000048aee7: call qword ptr [rax]; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e087: call qword ptr [rax]; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eee7: call qword ptr [rax]; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f957: call qword ptr [rax]; jne 0x8f978; xor eax, eax; ret; 
0x00000000004941d3: call qword ptr [rax]; mov dl, 0xf9; jmp rax; 
0x00000000004941ab: call qword ptr [rax]; mov esi, 0xb0a0fff9; stc; jmp qword ptr [rax - 0x4e]; 
0x000000000049424f: call qword ptr [rax]; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rax - 0x5a]; 
0x000000000049441b: call qword ptr [rax]; sar ecx, 1; jmp qword ptr [rax - 0x2e]; 
0x0000000000493ea3: call qword ptr [rax]; xor cl, bh; push qword ptr [rax]; xor ecx, edi; call rax; 
0x0000000000493eeb: call qword ptr [rax]; xor edi, ecx; push rax; stc; jmp qword ptr [rax + 0x4d]; 
0x000000000049422f: call qword ptr [rax]; cdq; stc; jmp rax; 
0x00000000004948eb: call qword ptr [rax]; cld; stc; call qword ptr [rax - 0x1a]; 
0x0000000000494f8f: call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x00000000004941fb: call qword ptr [rax]; sahf; stc; jmp qword ptr [rax - 0x61]; 
0x00000000004107f4: call qword ptr [rbp + 0x18]; 
0x0000000000410768: call qword ptr [rbp + 0x20]; 
0x00000000004110a5: call qword ptr [rbp + 0x30]; 
0x000000000041039c: call qword ptr [rbp + 0x38]; 
0x0000000000400b5c: call qword ptr [rbp + 0x48]; 
0x0000000000409a3e: call qword ptr [rbp + 0x53]; 
0x00000000004105e2: call qword ptr [rbp + 0x58]; 
0x000000000040ff7a: call qword ptr [rbp + 0x60]; 
0x0000000000410688: call qword ptr [rbp + 0x68]; 
0x0000000000412b85: call qword ptr [rbp + 0x70]; 
0x00000000004afa37: call qword ptr [rbp + 1]; 
0x00000000004116a6: call qword ptr [rbp + 8]; 
0x0000000000494adb: call qword ptr [rbp + rsi + 0x3524fffa]; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x000000000040107e: call qword ptr [rbx + 0x10]; 
0x0000000000416bcc: call qword ptr [rbx + 0x18]; 
0x000000000045dd1a: call qword ptr [rbx + 0x38]; 
0x0000000000458799: call qword ptr [rbx + 0x48]; 
0x000000000048db72: call qword ptr [rbx + 0x49]; 
0x000000000041b22c: call qword ptr [rbx + 0x50]; 
0x000000000048d362: call qword ptr [rbx + 0x52]; 
0x000000000041ebd6: call qword ptr [rbx + 0x64]; 
0x00000000004a7cc0: call qword ptr [rbx + 0x7c]; 
0x0000000000460340: call qword ptr [rbx + 0xf]; 
0x00000000004ab8cb: call qword ptr [rbx + 1]; 
0x00000000004af693: call qword ptr [rbx + 4]; 
0x000000000047bd0b: call qword ptr [rbx - 0x77]; 
0x000000000040ead0: call qword ptr [rbx]; 
0x000000000045e474: call qword ptr [rcx + 0x38]; 
0x0000000000495593: call qword ptr [rcx + 0x3d]; 
0x00000000004955d7: call qword ptr [rcx + 0x3d]; sti; call qword ptr [rcx + 0x3d]; sti; call qword ptr [rdx]; 
0x00000000004955db: call qword ptr [rcx + 0x3d]; sti; call qword ptr [rdx]; 
0x00000000004af94f: call qword ptr [rcx + 1]; 
0x00000000004a75ad: call qword ptr [rcx - 0x66]; 
0x0000000000489bc0: call qword ptr [rcx]; 
0x0000000000417ad1: call qword ptr [rdi + 0x18]; 
0x000000000046041a: call qword ptr [rdi + 0x38]; 
0x0000000000412ea4: call qword ptr [rdi + 0x40]; 
0x0000000000415cce: call qword ptr [rdi + 0x58]; 
0x000000000047a988: call qword ptr [rdi + 0x60]; 
0x0000000000410ab1: call qword ptr [rdi + 0x70]; 
0x0000000000496437: call qword ptr [rdi + 0x72]; 
0x000000000041481e: call qword ptr [rdi + 0x78]; 
0x00000000004b42d7: call qword ptr [rdi + 1]; 
0x00000000004acc7f: call qword ptr [rdi + 2]; 
0x000000000049593f: call qword ptr [rdi + rdi]; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000494acb: call qword ptr [rdi + rsi - 6]; jmp rsp; 
0x00000000004ac4cf: call qword ptr [rdi]; 
0x000000000049450b: call qword ptr [rdx + 0x11]; 
0x000000000049450b: call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494a03: call qword ptr [rdx + 0x38]; 
0x0000000000494a03: call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x000000000049642f: call qword ptr [rdx + 0x71]; 
0x00000000004946f7: call qword ptr [rdx + 0xa]; 
0x00000000004b3d43: call qword ptr [rdx + 1]; 
0x00000000004944fb: call qword ptr [rdx]; 
0x000000000047ba8e: call qword ptr [rip + 0x23e78c]; xor eax, eax; add rsp, 8; ret; 
0x00000000004af52f: call qword ptr [rsi + 0x16]; 
0x0000000000412aef: call qword ptr [rsi + 0x18]; 
0x0000000000416de1: call qword ptr [rsi + 0x20]; 
0x0000000000494477: call qword ptr [rsi + 0x26fffa13]; adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494baf: call qword ptr [rsi + 0x29]; 
0x00000000004a92ff: call qword ptr [rsi + 0x30]; 
0x000000000049499f: call qword ptr [rsi + 0x35]; 
0x000000000049499f: call qword ptr [rsi + 0x35]; cli; jmp rsi; 
0x0000000000462e35: call qword ptr [rsi + 0x38]; 
0x000000000041a96d: call qword ptr [rsi + 0x50]; 
0x00000000004944a7: call qword ptr [rsi + 0xe]; 
0x00000000004944a7: call qword ptr [rsi + 0xe]; cli; jmp rsi; 
0x00000000004b2abb: call qword ptr [rsi + 1]; 
0x000000000049735b: call qword ptr [rsi + rbp]; cld; call rsp; 
0x0000000000489a11: call qword ptr [rsi]; 
0x0000000000400410: call rax; 
0x000000000049443f: call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000400410: call rax; add rsp, 8; ret; 
0x0000000000493eab: call rax; and cl, bh; jmp rax; 
0x0000000000494ee3: call rax; cmp edx, -1; jo 0x94e6f; cli; call qword ptr [rax]; 
0x0000000000494937: call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000495013: call rax; idiv edx; push rax; idiv edx; call qword ptr [rax]; 
0x00000000004a4d07: call rax; ja 0xa4d08; jmp rbx; 
0x0000000000494f5f: call rax; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x000000000049422b: call rax; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x00000000004941cb: call rax; mov ebp, 0xb060fff9; stc; call qword ptr [rax]; 
0x00000000004941cb: call rax; mov ebp, 0xb060fff9; stc; call qword ptr [rax]; mov dl, 0xf9; jmp rax; 
0x00000000004941c7: call rax; mov ebx, 0xbdd0fff9; stc; jmp qword ptr [rax - 0x50]; 
0x000000000049414b: call rax; mov esi, 0xb160fff9; stc; jmp qword ptr [rax]; 
0x0000000000494147: call rax; mov esp, 0xbed0fff9; stc; jmp qword ptr [rax - 0x4f]; 
0x0000000000494e87: call rax; push rbx; cli; jmp rax; 
0x0000000000493e9b: call rax; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x000000000049406f: call rax; xchg edi, eax; stc; jmp qword ptr [rax - 0x72]; 
0x000000000049409b: call rax; xchg esp, eax; stc; jmp qword ptr [rax - 0x6b]; 
0x0000000000494b4f: call rax; cli; jmp qword ptr [rax + 0x36]; 
0x0000000000494fbb: call rax; cli; jmp rax; 
0x0000000000494f7f: call rax; int1; cli; jmp rax; 
0x000000000049423f: call rax; lahf; stc; jmp qword ptr [rax]; 
0x0000000000494f03: call rax; nop; cli; push qword ptr [rax - 0x6e]; cli; call qword ptr [rax]; 
0x000000000049440b: call rax; retf; stc; jmp qword ptr [rax]; 
0x000000000040093d: call rbx; 
0x000000000041c953: call rcx; 
0x000000000044abe3: call rdi; 
0x000000000040e917: call rdx; 
0x00000000004946f3: call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x0000000000494a23: call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x000000000044ea61: call rsi; 
0x0000000000494487: call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000049497f: call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000492687: call rsi; cld; idiv bh; ret; 
0x000000000044a6a1: call rsp; 
0x00000000004ab65f: call rsp; adc dh, bh; jmp rdi; 
0x0000000000418fc9: cmovae eax, dword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000418fc8: cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x00000000004480e4: cmove eax, ecx; pop rbx; ret; 
0x0000000000471e81: cmove eax, ecx; ret; 
0x0000000000423713: cmove eax, edx; add rsp, 8; ret; 
0x00000000004480ac: cmove eax, edx; pop rbx; ret; 
0x000000000042384f: cmove eax, edx; ret; 
0x0000000000414a1f: cmove ebp, esp; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414a1e: cmove ebp, r12d; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047e738: cmove ecx, eax; mov rax, rcx; ret; 
0x000000000048857a: cmove edx, eax; call 0x78be0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000044bd04: cmove edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000471e80: cmove r8, rcx; ret; 
0x00000000004480e3: cmove rax, rcx; pop rbx; ret; 
0x0000000000423712: cmove rax, rdx; add rsp, 8; ret; 
0x00000000004480ab: cmove rax, rdx; pop rbx; ret; 
0x000000000042384e: cmove rax, rdx; ret; 
0x000000000047e737: cmove rcx, rax; mov rax, rcx; ret; 
0x000000000044bd03: cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000422d4a: cmovne eax, ecx; ret; 
0x0000000000470a61: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000416a09: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000044813c: cmovne eax, edx; pop rbx; ret; 
0x00000000004237d6: cmovne eax, edx; ret; 
0x0000000000440554: cmovne eax, edx; vzeroupper; ret; 
0x00000000004733c1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004733c5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000422d49: cmovne rax, rcx; ret; 
0x000000000044813b: cmovne rax, rdx; pop rbx; ret; 
0x00000000004237d5: cmovne rax, rdx; ret; 
0x0000000000440553: cmovne rax, rdx; vzeroupper; ret; 
0x00000000004733c0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004733c4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000045a27d: cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000044c638: cmovs eax, dword ptr [rbp + 0x480a74d2]; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000478ad9: cmovs eax, dword ptr [rbx + 0x55e8f0e7]; jns 0x78ada; dec dword ptr [rax - 0x77]; ret; 
0x0000000000450b4c: cmovs eax, edx; ret; 
0x00000000004384e5: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048db48: cmovs ecx, dword ptr [rcx + 0x1bffe]; add byte ptr [rax], al; jmp rax; 
0x0000000000471be8: cmovs edi, dword ptr [rcx]; int1; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x000000000044808e: cmovs esp, dword ptr [rbx + 0xc]; xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x0000000000448120: cmovs esp, dword ptr [rbx + 4]; xchg esi, eax; add rax, rsi; jmp rax; 
0x0000000000485216: cmp ah, byte ptr [rbx + 0x1f]; adc dh, byte ptr [rbx - 0xc]; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446b28: cmp ah, byte ptr [rbx - 0x27]; add cl, byte ptr [rdi]; xchg edx, eax; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x0000000000446b72: cmp ah, byte ptr [rbx - 0x37]; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000043ddca: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e92a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e10a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043d8ea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043e44a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dc2a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d40a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e5ea: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043d74a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d880: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e580: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e0a0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e8c0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dbc0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d6e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e3e0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000401280: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x00000000004ab8c0: cmp al, 0; add byte ptr [rax], al; test al, 1; add byte ptr [rax], al; sbb byte ptr [rcx - 0xb], ah; call qword ptr [rbx + 1]; 
0x00000000004af3c1: cmp al, 0; add byte ptr [rsi + rcx], bh; clc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000488380: cmp al, 0x23; add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000455972: cmp al, 0x24; add byte ptr [rcx - 0x77], al; ret; 
0x000000000044f802: cmp al, 0x24; add byte ptr [rdi], cl; xchg esp, eax; ret 0xd5e9; 
0x00000000004165d7: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000473dc3: cmp al, 0x24; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046e913: cmp al, 0x29; ja 0x6e940; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048afaf: cmp al, 0x2f; ja 0x8b861; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048d16c: cmp al, 0x31; or byte ptr [rbp + 4], dh; mov qword ptr [rax], rdx; ret; 
0x000000000048d0fd: cmp al, 0x32; or byte ptr [rbp + 0x1a], dh; mov rax, qword ptr [rax]; ret; 
0x00000000004b4e54: cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x00000000004af858: cmp al, 0x41; add byte ptr [rax], al; add al, 0x83; stc; call qword ptr [rdx]; 
0x00000000004a7a00: cmp al, 0x46; clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004a75a8: cmp al, 0x7b; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x000000000048581e: cmp al, 0xa; jne 0x8576f; nop word ptr cs:[rax + rax]; call rbx; 
0x00000000004a9535: cmp al, 0xaa; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045a361: cmp al, 0xb3; add rdi, r11; jmp rdi; 
0x00000000004a3c40: cmp al, 0xb5; cld; jmp rsp; 
0x000000000040d5a9: cmp al, 0xba; add rdi, r10; jmp rdi; 
0x00000000004a6463: cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004af3c4: cmp al, 0xe; clc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000469980: cmp al, 0xed; std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000048bffd: cmp al, 0xee; ja 0x8c119; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004ac4cd: cmp al, 0xf6; call qword ptr [rdi]; 
0x0000000000493ec9: cmp al, 0xf9; jmp qword ptr [rax + 0x3e]; 
0x000000000044b5ad: cmp al, 0xff; dec dword ptr [rax - 0x7f]; ret; 
0x000000000046f230: cmp al, 3; add byte ptr [rax], al; lea rdx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000430629: cmp al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046c923: cmp al, 7; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8d0: cmp al, 7; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c3a3: cmp al, 7; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c742: cmp al, 7; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6fd: cmp al, 7; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6b8: cmp al, 7; lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c669: cmp al, 7; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460dbc: cmp al, 7; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046116b: cmp al, 7; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046111d: cmp al, 7; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046106e: cmp al, 7; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461012: cmp al, 7; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d72: cmp al, 7; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d24: cmp al, 7; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608c3: cmp al, 7; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000044637e: cmp al, byte ptr [rsi - 1]; jne 0x464f5; xor eax, eax; ret; 
0x00000000004307c6: cmp al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cf1b: cmp al, cl; jne 0x2d7f0; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000446432: cmp al, cl; jne 0x464f5; cmp eax, ecx; jne 0x464f5; xor eax, eax; ret; 
0x00000000004464ef: cmp al, cl; jne 0x464f5; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000042b346: cmp al, dh; ret; 
0x000000000042b345: cmp al, r14b; ret; 
0x000000000048aee6: cmp bh, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e086: cmp bh, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eee6: cmp bh, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f956: cmp bh, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x000000000048aece: cmp bh, 0x30; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048e06c: cmp bh, 0x30; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eecc: cmp bh, 0x30; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048aec8: cmp bh, 0x50; je 0x8aeeb; cmp dil, 0x30; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048e041: cmp bh, 4; jne 0x8e055; mov eax, 8; ret; 
0x0000000000494935: cmp bh, dl; call rax; 
0x0000000000494935: cmp bh, dl; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494975: cmp bh, dl; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000410942: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000048d080: cmp byte ptr [r9 + 0xdf], 0; je 0x8d06c; add rsp, 0x18; ret; 
0x0000000000476d2b: cmp byte ptr [rax + 0x29], cl; ret 0x8d49; 
0x00000000004122ff: cmp byte ptr [rax + 0x29], cl; ret; 
0x0000000000412da9: cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x00000000004016eb: cmp byte ptr [rax + 0x39], cl; ret 0x4f76; 
0x000000000041039e: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000046ff90: cmp byte ptr [rax + 1], cl; ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000042b387: cmp byte ptr [rax + 1], cl; clc; ret; 
0x0000000000470505: cmp byte ptr [rax + 1], cl; ret; 
0x000000000045afc7: cmp byte ptr [rax - 0x73], cl; dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000411806: cmp byte ptr [rax - 0x75], cl; adc byte ptr [r13 + r9*4 + 0x44], cl; and al, 0x10; call qword ptr [rbp + 0x18]; 
0x0000000000451198: cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000481b25: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab3: cmp byte ptr [rax - 0x75], cl; and al, 0x40; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004530d0: cmp byte ptr [rax - 0x75], cl; je 0x530f9; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045b144: cmp byte ptr [rax - 0x75], cl; jl 0x5b16d; and byte ptr [rax + 1], cl; ret; 
0x0000000000410943: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000048473f: cmp byte ptr [rax - 0x77], cl; xlatb; mov byte ptr [rsi], al; jne 0x84720; mov rax, rsi; ret; 
0x0000000000452aa4: cmp byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000046fd36: cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000494944: cmp byte ptr [rax], 0xfa; call qword ptr [rax]; 
0x000000000042b376: cmp byte ptr [rax], ah; ret; 
0x000000000048d06f: cmp byte ptr [rax], al; je 0x8d090; add rsp, 0x18; ret; 
0x00000000004400f0: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x000000000042b366: cmp byte ptr [rax], dl; ret; 
0x000000000042b365: cmp byte ptr [rax], r10b; ret; 
0x000000000042b375: cmp byte ptr [rax], r12b; ret; 
0x00000000004400ef: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000465059: cmp byte ptr [rbp - 0x77], cl; dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004b3e8d: cmp byte ptr [rbx + 0x2030d07], al; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b3e59: cmp byte ptr [rbx + 0x2030d07], al; cld; ret; 
0x00000000004b3e25: cmp byte ptr [rbx + 0x3030d07], al; or al, byte ptr [rcx]; ret; 
0x000000000048ab88: cmp byte ptr [rbx + 0x41], bl; pop rsi; ret; 
0x000000000040daf6: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004160c0: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004b3e7b: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x1370303; ret; 
0x00000000004b3e13: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x34b0303; ret; 
0x00000000004b3e47: cmp byte ptr [rbx + rax*4 + 7], al; or rax, 0x35b0303; ret; 
0x00000000004a75a7: cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000471910: cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000048d081: cmp byte ptr [rcx + 0xdf], 0; je 0x8d06c; add rsp, 0x18; ret; 
0x0000000000416a7b: cmp byte ptr [rcx + rcx*4 + 0x63], cl; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d16b: cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x000000000045dd1c: cmp byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000480026: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000004179a4: cmp byte ptr [rcx], 0xa; je 0x179b8; cmp rsi, rcx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x00000000004491b1: cmp byte ptr [rcx], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000048d151: cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004b1654: cmp byte ptr [rdi], bl; add byte ptr [rax], cl; xchg ebp, eax; cli; call qword ptr [rdi]; 
0x0000000000455144: cmp byte ptr [rdi], cl; test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000042d780: cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000042d769: cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d752: cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042c20e: cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cc6d: cmp byte ptr [rdi], dl; ret; 
0x000000000048d0fc: cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000495eb8: cmp byte ptr [rdx - 5], ch; call qword ptr [rax]; 
0x00000000004af138: cmp byte ptr [rdx - 9], dl; jmp qword ptr [rbx]; 
0x00000000004244f9: cmp byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x237dd; cmovne rax, rdx; ret; 
0x000000000047f310: cmp byte ptr [rip + 0x23d4b1], 0; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x00000000004af49c: cmp byte ptr [rip - 0x69b00000], 0xf8; call qword ptr [rax]; 
0x00000000004309b4: cmp byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc7a: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000045e26a: cmp cl, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000480ea5: cmp cl, 9; jbe 0x80e90; cmp r8d, eax; je 0x80df6; sub eax, r8d; ret; 
0x0000000000493ebd: cmp cl, bh; jmp rax; 
0x0000000000446b75: cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000004465f4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x46610; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x465f0; ret; 
0x00000000004466a4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x466c0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x466a0; ret; 
0x0000000000488c62: cmp cl, byte ptr [rax - 0x7d]; ret 0xf08; 
0x000000000046faa4: cmp cl, byte ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; pop rdi; ret 0xfffd; 
0x000000000047b6c2: cmp cl, byte ptr [rcx - 0x48]; jmp qword ptr [rsi + 0x2e]; 
0x0000000000404867: cmp cl, ch; ret 0xfffb; 
0x0000000000484525: cmp cx, 0x7fff; je 0x84514; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000440551: cmp dh, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004964a4: cmp dh, byte ptr [rbx - 5]; dec dword ptr [rdi]; jo 0x964a6; dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x0000000000447fca: cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000494b28: cmp dh, byte ptr [rdx + rdi*8]; dec edx; xor edi, edx; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x00000000004ac419: cmp dh, dh; jmp qword ptr [rcx + 1]; 
0x000000000048aee5: cmp dil, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e085: cmp dil, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eee5: cmp dil, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f955: cmp dil, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x000000000048aecd: cmp dil, 0x30; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048e06b: cmp dil, 0x30; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eecb: cmp dil, 0x30; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048aec7: cmp dil, 0x50; je 0x8aeeb; cmp dil, 0x30; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048e040: cmp dil, 4; jne 0x8e055; mov eax, 8; ret; 
0x0000000000494934: cmp dil, dl; call rax; 
0x0000000000494934: cmp dil, dl; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000446c46: cmp dl, 0x20; jb 0x46c55; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446c33: cmp dl, 0x40; jb 0x46c46; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446f11: cmp dl, 1; ja 0x46f3c; jb 0x46f1d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447271: cmp dl, 1; ja 0x472b1; jb 0x4727d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004476c1: cmp dl, 1; ja 0x47719; jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447c90: cmp dl, 1; ja 0x47caa; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x0000000000447dfe: cmp dl, 1; ja 0x47e2f; jb 0x47e07; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447fc6: cmp dl, 1; ja 0x48005; jb 0x47fcf; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000043851b: cmp dl, 1; jb 0x38524; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446c8a: cmp dl, 1; jb 0x46c91; mov byte ptr [rdi], cl; ret; 
0x0000000000446c7d: cmp dl, 2; jb 0x46c8a; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000446c72: cmp dl, 4; jb 0x46c7d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446c5f: cmp dl, 8; jb 0x46c6e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000422db5: cmp dl, al; jne 0x22da0; sub rax, 0x10; ret; 
0x0000000000494945: cmp dl, bh; call qword ptr [rax]; 
0x0000000000494a01: cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x0000000000494a01: cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x0000000000494b41: cmp dl, bh; jmp qword ptr [rax]; 
0x0000000000494981: cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494a05: cmp dl, bh; jmp rdx; 
0x0000000000422db4: cmp dl, r8b; jne 0x22da0; sub rax, 0x10; ret; 
0x000000000040eaa1: cmp dword ptr [rax - 0x39], ecx; ret; 
0x000000000048c900: cmp dword ptr [rbp + 8], 5; ja 0x8c93d; mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x0000000000400b8c: cmp dword ptr [rbp - 4], 0x11; jle 0xb6e; nop; pop rbp; ret; 
0x000000000047563e: cmp dword ptr [rbx + 0x2471c705], ecx; add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000047c788: cmp dword ptr [rbx + 8], 0x25; jne 0x7c7a0; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000401071: cmp dword ptr [rbx + 8], 0x25; mov r14, qword ptr [rbx]; jne 0x1290; call qword ptr [rbx + 0x10]; 
0x00000000004347a8: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000488f0d: cmp dword ptr [rbx], esp; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000048d06d: cmp dword ptr [rcx + 0x38], 0; je 0x8d090; add rsp, 0x18; ret; 
0x0000000000471be4: cmp dword ptr [rcx], 0xa; je 0x71bf8; cmp rcx, rsi; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x0000000000418fc5: cmp dword ptr [rdi + 0x10], eax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000042e673: cmp dword ptr [rdx + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042454a: cmp dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x2390c; cmovne rax, rdx; ret; 
0x00000000004179a5: cmp dword ptr [rdx], ecx; je 0x179b8; cmp rsi, rcx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x0000000000471be5: cmp dword ptr [rdx], ecx; je 0x71bf8; cmp rcx, rsi; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x0000000000487774: cmp dword ptr [rip + 0x2317fd], 0; jne 0x8777f; pop rbx; ret; 
0x000000000045e733: cmp dword ptr [rip + 0x39480001], ebx; ret; 
0x0000000000430916: cmp dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000475cd0: cmp dword ptr [rsi], eax; je 0x75dc8; xor eax, eax; leave; ret; 
0x000000000042370f: cmp eax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f8af: cmp eax, -1; cmove rax, rdx; ret; 
0x0000000000401555: cmp eax, -1; je 0x162b; add rsp, 0x98; ret; 
0x0000000000416678: cmp eax, -1; je 0x165f8; mov eax, 0xffffffff; ret; 
0x0000000000416868: cmp eax, -1; je 0x167e8; mov eax, 0xffffffff; ret; 
0x00000000004718d6: cmp eax, -1; je 0x718e0; pop rbx; pop rbp; pop r12; ret; 
0x000000000041795e: cmp eax, -1; jne 0x1791f; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d452: cmp eax, 0x16; ja 0x4d4a0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000044d4c9: cmp eax, 0x17; ja 0x4d4a0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044c72d: cmp eax, 0x1e; ja 0x4c754; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000487775: cmp eax, 0x2317fd; add byte ptr [rbp + 2], dh; pop rbx; ret; 
0x000000000047f311: cmp eax, 0x23d4b1; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000480fa9: cmp eax, 0x23f4c; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000460e11: cmp eax, 0x25590a; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047d752: cmp eax, 0x277a3; mov eax, 0x15; syscall; 
0x000000000047c9c0: cmp eax, 0x283d3; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046f0ad: cmp eax, 0x29; ja 0x6f140; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000412852: cmp eax, 0x2a6750; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000040389a: cmp eax, 0x2b56c0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046f1c8: cmp eax, 0x34adf; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046ea76: cmp eax, 0x37; ja 0x6ee30; lea rcx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046f22b: cmp eax, 0x37; ja 0x6f570; lea rdx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004955d5: cmp eax, 0x3d51fffb; sti; call qword ptr [rcx + 0x3d]; sti; call qword ptr [rdx]; 
0x00000000004955d9: cmp eax, 0x3d51fffb; sti; call qword ptr [rdx]; 
0x00000000004955d1: cmp eax, 0x3d64fffb; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004957e1: cmp eax, 0x3d64fffb; sti; push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x0000000000495775: cmp eax, 0x3d74fffb; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004955fd: cmp eax, 0x3d84fffb; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495719: cmp eax, 0x3d84fffb; sti; jmp rsp; 
0x0000000000495669: cmp eax, 0x3da2fffb; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004956a1: cmp eax, 0x3da2fffb; sti; dec ebp; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495771: cmp eax, 0x3db6fffb; sti; push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x0000000000495729: cmp eax, 0x3ddefffb; sti; call qword ptr [rdx]; 
0x0000000000495609: cmp eax, 0x3de8fffb; sti; dec dword ptr [rsi - 0x170004c3]; cmp eax, 0x3e44fffb; sti; jmp qword ptr [rsi]; 
0x0000000000495611: cmp eax, 0x3de8fffb; sti; inc dword ptr [rsi + rdi - 5]; jmp qword ptr [rsi]; 
0x0000000000495849: cmp eax, 0x3e1cfffb; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495615: cmp eax, 0x3e44fffb; sti; jmp qword ptr [rsi]; 
0x0000000000495741: cmp eax, 0x3e89fffb; sti; jmp qword ptr [rsi]; 
0x00000000004956a5: cmp eax, 0x3ecdfffb; sti; call qword ptr [rcx + 0x3d]; 
0x000000000049593d: cmp eax, 0x3f14fffb; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000475758: cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x000000000044c00f: cmp eax, 0x49b11; mov eax, 0x15; syscall; 
0x0000000000430500: cmp eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a78e1: cmp eax, 0x7170d773; mov ebp, 0xfb67d10d; ret; 
0x00000000004a78de: cmp eax, 0x733db8a1; xlatb; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x000000000044c42f: cmp eax, 0x83482f74; ret; 
0x000000000044c256: cmp eax, 0x83497174; ret; 
0x000000000040ec1e: cmp eax, 0x83fea; mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000040d2b9: cmp eax, 0x854a2; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000473524: cmp eax, 0x89000001; ret 0x8948; 
0x00000000004af4b1: cmp eax, 0x964c0000; clc; jmp qword ptr [rsi]; 
0x00000000004af49d: cmp eax, 0x96500000; clc; call qword ptr [rax]; 
0x0000000000402109: cmp eax, 0xa; ja 0x1e31; lea rdx, [rip + 0x90507]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021f5: cmp eax, 0xa; ja 0x1e5f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004af4c5: cmp eax, 0xb8680000; clc; call qword ptr [rax]; 
0x00000000004247a2: cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000423842: cmp eax, 0xc00; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x0000000000424772: cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x0000000000424382: cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727e2: cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bf2: cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727b2: cmp eax, 0xc00; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x00000000004166e9: cmp eax, 0xd8af8b48; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004af4ed: cmp eax, 0xd9900000; clc; call qword ptr [rax]; 
0x00000000004af515: cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x0000000000448fa7: cmp eax, 0xfffff000; ja 0x48fd0; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x00000000004494d8: cmp eax, 0xfffff001; jae 0x494e0; ret; 
0x000000000044a568: cmp eax, 0xfffff001; jae 0x4a570; ret; 
0x000000000044a598: cmp eax, 0xfffff001; jae 0x4a5a0; ret; 
0x000000000044a5c8: cmp eax, 0xfffff001; jae 0x4a5d0; ret; 
0x000000000044bc7b: cmp eax, 0xfffff001; jae 0x4bc83; ret; 
0x000000000044bca8: cmp eax, 0xfffff001; jae 0x4bcb0; ret; 
0x00000000004754f8: cmp eax, 0xfffff001; jae 0x75500; ret; 
0x0000000000488528: cmp eax, 0xfffff001; jae 0x88530; ret; 
0x0000000000448646: cmp eax, 1; je 0x48660; cmp eax, 2; je 0x48658; xor eax, eax; ret; 
0x000000000044864b: cmp eax, 2; je 0x48658; xor eax, eax; ret; 
0x000000000044bdea: cmp eax, 4; je 0x4bdf0; ret; 
0x00000000004af2e5: cmp eax, dword ptr [rax]; add al, ch; ret 0xfff7; 
0x0000000000471c6d: cmp eax, dword ptr [rdx + 0x18]; jbe 0x71c96; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004852db: cmp eax, dword ptr [rip + 0x236e8f]; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043071a: cmp eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000416c94: cmp eax, eax; jbe 0x16ca8; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000480eab: cmp eax, eax; je 0x80df6; sub eax, r8d; ret; 
0x00000000004165a8: cmp eax, ecx; jbe 0x165c0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000416709: cmp eax, ecx; jbe 0x167c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416931: cmp eax, ecx; jbe 0x169c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416aaf: cmp eax, ecx; jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b28: cmp eax, ecx; jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178b8: cmp eax, ecx; jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041794f: cmp eax, ecx; jbe 0x17970; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471aed: cmp eax, ecx; jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff73: cmp eax, ecx; jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000446adf: cmp eax, ecx; jle 0x46b18; movsxd rax, ecx; ret; 
0x00000000004462d2: cmp eax, ecx; jne 0x464e0; xor eax, eax; ret; 
0x000000000044643a: cmp eax, ecx; jne 0x464f5; xor eax, eax; ret; 
0x00000000004464f3: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000410681: cmp eax, edi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000413ab3: cmp eax, edi; jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000045deb5: cmp eax, edi; jbe 0x5f4d5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e45b: cmp eax, edi; jbe 0x5f569; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000041874b: cmp eax, edx; jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x000000000044bd20: cmp eax, edx; jne 0x4bd2c; nop; mov eax, 0xca; syscall; 
0x000000000047f2d5: cmp eax, edx; jne 0x7f2ec; mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x00000000004164b2: cmp eax, esi; jbe 0x16510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000045e974: cmp eax, esi; jbe 0x5f4ed; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e630: cmp eax, esi; jbe 0x5f551; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046a1a8: cmp eax, esi; jbe 0x6af20; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000470d08: cmp eax, esi; jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000471b87: cmp eax, esi; jbe 0x71ba0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000453ee9: cmp ebp, dword ptr [rip - 0x4145fffc]; add dword ptr [rax], eax; add al, ch; fdiv st(2), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000044bd86: cmp ebx, 0xa; je 0x4bd8c; ret; 
0x0000000000484526: cmp ecx, 0xe8747fff; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000044bfa1: cmp ecx, dword ptr [rax + 0x18]; ja 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfcf: cmp ecx, dword ptr [rax + 0x18]; jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044e8b2: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000041ec04: cmp ecx, dword ptr [rax - 0x7f]; in al, dx; add byte ptr [rax], 0; add al, ch; call rax; 
0x0000000000471394: cmp ecx, dword ptr [rbp - 0x75]; mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000047f8f8: cmp ecx, dword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000488071: cmp ecx, dword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x0000000000471e7e: cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000042d395: cmp ecx, eax; jne 0x2d7c3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042ce3b: cmp ecx, eax; jne 0x2d7c3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cd8f: cmp ecx, eax; jne 0x2d7c3; xor eax, eax; ret; 
0x000000000042ce86: cmp ecx, eax; jne 0x2d7cf; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cdb7: cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x000000000042d088: cmp ecx, eax; jne 0x2d7da; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000047e688: cmp ecx, eax; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x00000000004826b8: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000484222: cmp ecx, ecx; ret; 
0x0000000000493ec1: cmp ecx, edi; jmp qword ptr [rax + 0x3b]; 
0x0000000000471bea: cmp ecx, esi; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x000000000047175e: cmp edi, dword ptr [rax + 0x18]; jbe 0x7178b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004900b1: cmp edi, dword ptr [rdx + riz + 0x5be17500]; ret; 
0x0000000000465e40: cmp edi, eax; ja 0x65e20; mov eax, r9d; ret; 
0x0000000000446ef9: cmp edi, ecx; jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447254: cmp edi, ecx; jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044769f: cmp edi, ecx; jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000493ec5: cmp edi, ecx; jmp rax; 
0x0000000000446e92: cmp edi, edx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048831e: cmp edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000465e3f: cmp edi, r8d; ja 0x65e20; mov eax, r9d; ret; 
0x0000000000494ee5: cmp edx, -1; jo 0x94e6f; cli; call qword ptr [rax]; 
0x0000000000473c5d: cmp edx, 0x1000; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x0000000000447bef: cmp edx, 0x20; ja 0x47bff; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447b9f: cmp edx, 0x20; ja 0x47c08; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000045cee5: cmp edx, 0x24; jbe 0x5cf00; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000040f285: cmp edx, 0x24; jbe 0xf2a0; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000447d47: cmp edx, 0x40; ja 0x47d5a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447cf7: cmp edx, 0x40; ja 0x47d63; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000004480dd: cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x000000000040e9c3: cmp edx, 3; jne 0xe8f0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000004719d0: cmp edx, dword ptr [rax + 0x18]; jbe 0x719f4; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000042b7d5: cmp edx, eax; jbe 0x2b830; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000042b7f5: cmp edx, eax; jbe 0x2b830; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000042b815: cmp edx, eax; jbe 0x2b830; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c5: cmp edx, eax; jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x0000000000447de2: cmp edx, ecx; jne 0x47dc7; vzeroupper; ret; 
0x0000000000447fa5: cmp edx, ecx; jne 0x47f82; vzeroupper; ret; 
0x000000000049497d: cmp edx, edi; call rsi; 
0x000000000049497d: cmp edx, edi; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494979: cmp edx, edi; inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x0000000000494979: cmp edx, edi; inc dword ptr [rsi + 0x39]; cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x00000000004949fd: cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x00000000004949fd: cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x0000000000494939: cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x00000000004949f9: cmp edx, edi; push qword ptr [rdx]; cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000044bd0a: cmp edx, edi; setae al; ret; 
0x000000000049497c: cmp edx, r15d; call rsi; 
0x000000000049497c: cmp edx, r15d; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000418789: cmp esi, -1; setne al; neg eax; ret; 
0x00000000004499f8: cmp esi, 9; jne 0x499c7; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000470ea5: cmp esi, dword ptr [rax + 0x18]; jbe 0x70ece; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471055: cmp esi, dword ptr [rax + 0x18]; jbe 0x71082; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047534b: cmp esi, dword ptr [rcx]; sal byte ptr [rcx], cl; imul al; sti; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000447275: cmp esi, dword ptr [rdx + 5]; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004a7b98: cmp esi, dword ptr [rsi + 0x33]; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000473ab5: cmp esi, eax; jbe 0x73b30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004a8d84: cmp esi, ebp; xlatb; ret 0x4e27; 
0x00000000004179aa: cmp esi, ecx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x00000000004ac469: cmp esi, esi; call qword ptr [rax]; 
0x000000000048842e: cmp esp, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000413e3a: cmp esp, edx; jbe 0x14020; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000048d06c: cmp qword ptr [r9 + 0x38], 0; je 0x8d090; add rsp, 0x18; ret; 
0x0000000000418fc4: cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000487773: cmp qword ptr [rip + 0x2317fd], 0; jne 0x8777f; pop rbx; ret; 
0x0000000000475ccf: cmp qword ptr [rsi], rax; je 0x75dc8; xor eax, eax; leave; ret; 
0x00000000004476c0: cmp r10b, 1; ja 0x47719; jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044bd85: cmp r11d, 0xa; je 0x4bd8c; ret; 
0x0000000000413e39: cmp r12, rdx; jbe 0x14020; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000480eaa: cmp r8d, eax; je 0x80df6; sub eax, r8d; ret; 
0x0000000000480ea4: cmp r9b, 9; jbe 0x80e90; cmp r8d, eax; je 0x80df6; sub eax, r8d; ret; 
0x0000000000448fa6: cmp rax, -0x1000; ja 0x48fd0; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x00000000004494d7: cmp rax, -0xfff; jae 0x494e0; ret; 
0x000000000044a567: cmp rax, -0xfff; jae 0x4a570; ret; 
0x000000000044a597: cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a5c7: cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x000000000044bc7a: cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000044bca7: cmp rax, -0xfff; jae 0x4bcb0; ret; 
0x00000000004754f7: cmp rax, -0xfff; jae 0x75500; ret; 
0x0000000000488527: cmp rax, -0xfff; jae 0x88530; ret; 
0x000000000042370e: cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f8ae: cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044d451: cmp rax, 0x16; ja 0x4d4a0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000044d4c8: cmp rax, 0x17; ja 0x4d4a0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044c72c: cmp rax, 0x1e; ja 0x4c754; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000471c6c: cmp rax, qword ptr [rdx + 0x18]; jbe 0x71c96; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004852da: cmp rax, qword ptr [rip + 0x236e8f]; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000416c93: cmp rax, r8; jbe 0x16ca8; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004165a7: cmp rax, rcx; jbe 0x165c0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000416708: cmp rax, rcx; jbe 0x167c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416930: cmp rax, rcx; jbe 0x169c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416aae: cmp rax, rcx; jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b27: cmp rax, rcx; jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178b7: cmp rax, rcx; jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041794e: cmp rax, rcx; jbe 0x17970; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471aec: cmp rax, rcx; jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff72: cmp rax, rcx; jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000410680: cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000413ab2: cmp rax, rdi; jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000045deb4: cmp rax, rdi; jbe 0x5f4d5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e45a: cmp rax, rdi; jbe 0x5f569; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000041874a: cmp rax, rdx; jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x000000000047f2d4: cmp rax, rdx; jne 0x7f2ec; mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x00000000004164b1: cmp rax, rsi; jbe 0x16510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000045e973: cmp rax, rsi; jbe 0x5f4ed; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e62f: cmp rax, rsi; jbe 0x5f551; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000046a1a7: cmp rax, rsi; jbe 0x6af20; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000470d07: cmp rax, rsi; jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000471b86: cmp rax, rsi; jbe 0x71ba0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000044bfa0: cmp rcx, qword ptr [rax + 0x18]; ja 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfce: cmp rcx, qword ptr [rax + 0x18]; jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000047f8f7: cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000488070: cmp rcx, qword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x0000000000471e7d: cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000047e687: cmp rcx, r8; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000042d394: cmp rcx, rax; jne 0x2d7c3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042ce3a: cmp rcx, rax; jne 0x2d7c3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cd8e: cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x00000000004826b7: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000471be9: cmp rcx, rsi; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x000000000047175d: cmp rdi, qword ptr [rax + 0x18]; jbe 0x7178b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000446ef8: cmp rdi, r9; jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447253: cmp rdi, r9; jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044769e: cmp rdi, r9; jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446e91: cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447bee: cmp rdx, 0x20; ja 0x47bff; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447b9e: cmp rdx, 0x20; ja 0x47c08; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447d46: cmp rdx, 0x40; ja 0x47d5a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447cf6: cmp rdx, 0x40; ja 0x47d63; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000040e9c2: cmp rdx, 3; jne 0xe8f0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x00000000004719cf: cmp rdx, qword ptr [rax + 0x18]; jbe 0x719f4; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000042b7d4: cmp rdx, rax; jbe 0x2b830; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000042b7f4: cmp rdx, rax; jbe 0x2b830; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000042b814: cmp rdx, rax; jbe 0x2b830; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c4: cmp rdx, rax; jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x0000000000447de1: cmp rdx, rcx; jne 0x47dc7; vzeroupper; ret; 
0x0000000000447fa4: cmp rdx, rcx; jne 0x47f82; vzeroupper; ret; 
0x000000000044bd09: cmp rdx, rdi; setae al; ret; 
0x0000000000470ea4: cmp rsi, qword ptr [rax + 0x18]; jbe 0x70ece; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471054: cmp rsi, qword ptr [rax + 0x18]; jbe 0x71082; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000473ab4: cmp rsi, rax; jbe 0x73b30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x00000000004179a9: cmp rsi, rcx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x0000000000440550: cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000475d75: cmp word ptr [rsi + 0x14], 0x2f75; jne 0x75c85; mov eax, 1; leave; ret; 
0x000000000042d219: cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x0000000000481a1c: cmpsb byte ptr [rsi], byte ptr [rdi]; and eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000436086: cmpsb byte ptr [rsi], byte ptr [rdi]; call 0x634c6091; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c86: cmpsb byte ptr [rsi], byte ptr [rdi]; fadd qword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436986: cmpsb byte ptr [rsi], byte ptr [rdi]; fild word ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f86: cmpsb byte ptr [rsi], byte ptr [rdi]; fld dword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436386: cmpsb byte ptr [rsi], byte ptr [rdi]; in eax, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004905da: cmpsb byte ptr [rsi], byte ptr [rdi]; mov eax, 0x22; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000043df06: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000495140: cmpsb byte ptr [rsi], byte ptr [rdi]; xor bl, bh; jmp qword ptr [rcx + 0x30]; 
0x00000000004b00ad: cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x000000000047c9c8: cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; jmp rax; 
0x00000000004307c5: cmpsd dword ptr [rsi], dword ptr [rdi]; cmp al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048f655: cmpsd dword ptr [rsi], dword ptr [rdi]; or dword ptr [rdi - 0x2776b701], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a98d5: cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x0000000000494f51: cmpsd dword ptr [rsi], dword ptr [rdi]; cli; jmp rax; 
0x00000000004421f1: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x00000000004421f2: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x0000000000438a92: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x00000000004477b5: dec byte ptr [rax + 0x7f]; je 0x477d1; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000447993: dec byte ptr [rax + 0x7f]; jg 0x4799b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447b39: dec byte ptr [rax + 0x7f]; jg 0x47b41; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004477bd: dec byte ptr [rax + 0x7f]; jl 0x477d9; cld; vzeroupper; ret; 
0x00000000004478c6: dec byte ptr [rax + 0x7f]; jns 0x478c9; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447a5f: dec byte ptr [rax + 0x7f]; jns 0x47a62; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000004478cd: dec byte ptr [rax + 0x7f]; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x000000000045dc79: dec byte ptr [rax - 0x75]; mov ebp, 0xfffff758; call rax; 
0x0000000000480cff: dec byte ptr [rax - 0x77]; fisttp word ptr [rax - 0x77]; ret 0x9de8; 
0x00000000004726d0: dec byte ptr [rax - 0x77]; ret; 
0x0000000000480c9d: dec byte ptr [rax - 0x7d]; ret; 
0x000000000044a812: dec byte ptr [rbx + rcx*4 + 0x5f]; or byte ptr [rcx - 0xa], al; ret; 
0x000000000040e446: dec byte ptr [rcx + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000040dff7: dec byte ptr [rcx + rcx*4 - 0x11]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000046505c: dec byte ptr [rcx + rcx*4 - 0x16]; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004499f9: dec byte ptr [rcx]; jne 0x499c7; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000446f40: dec byte ptr [rdi]; mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000456893: dec dword ptr [r8 - 0x7d]; ret 0x8801; 
0x000000000045dd16: dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x0000000000442332: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000004829c1: dec dword ptr [rax + 0x29]; ret 0x8948; 
0x0000000000482b01: dec dword ptr [rax + 0x29]; ret 0x894c; 
0x000000000041e685: dec dword ptr [rax + 0x29]; ret 0x8d4c; 
0x0000000000469230: dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000041120d: dec dword ptr [rax + 0x29]; ret; 
0x00000000004732b7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000046f022: dec dword ptr [rax + 0x39]; add dword ptr [rbp + 0xf48ff78], ecx; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x000000000041303d: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x00000000004891c9: dec dword ptr [rax + 0x39]; ret 0xf48; 
0x000000000047630b: dec dword ptr [rax + 0x39]; ret; 
0x0000000000492883: dec dword ptr [rax + 0x45fff7af]; mov al, 0xf7; jmp qword ptr [rcx]; 
0x000000000041c93f: dec dword ptr [rax + 0x48282454]; mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004846be: dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x000000000045f4c2: dec dword ptr [rax + 0x63]; rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x00000000004a4d3f: dec dword ptr [rax + 0x77]; std; jmp qword ptr [rax]; 
0x000000000046eda2: dec dword ptr [rax + 0xf]; add dword ptr [r8 - 0x7d], ecx; ret 0x8502; 
0x00000000004734b9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x000000000045afcb: dec dword ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000472821: dec dword ptr [rax + 1]; ret; 
0x00000000004964ab: dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x0000000000490e5b: dec dword ptr [rax - 0x39]; add eax, 0x22b151; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004905d6: dec dword ptr [rax - 0x39]; add eax, 0x22b8a6; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000481a17: dec dword ptr [rax - 0x39]; add eax, 0x23a62d; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000044945f: dec dword ptr [rax - 0x39]; ret 0; 
0x0000000000449404: dec dword ptr [rax - 0x39]; ret 0x8000; 
0x000000000045dce0: dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000449377: dec dword ptr [rax - 0x39]; ret 0xff80; 
0x0000000000468976: dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x00000000004496f5: dec dword ptr [rax - 0x39]; ret 0xffc0; 
0x00000000004492cc: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000485af1: dec dword ptr [rax - 0x39]; sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000403063: dec dword ptr [rax - 0x39]; ret; 
0x000000000048bd0f: dec dword ptr [rax - 0x46]; mov eax, 0xf; syscall; 
0x00000000004022de: dec dword ptr [rax - 0x73]; adc eax, 0x90392; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402111: dec dword ptr [rax - 0x73]; adc eax, 0x90507; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000401f8d: dec dword ptr [rax - 0x73]; adc eax, 0x9065f; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004567a4: dec dword ptr [rax - 0x73]; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000042435d: dec dword ptr [rax - 0x73]; add eax, 0x221ab; cmove rax, rdx; ret; 
0x000000000046eef3: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000041785f: dec dword ptr [rax - 0x73]; push -0x3a171115; add r8d, dword ptr [r8]; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000047fad5: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000041ead8: dec dword ptr [rax - 0x73]; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000048c202: dec dword ptr [rax - 0x75]; add byte ptr [rcx + 1], cl; ret 0xef89; 
0x000000000041093f: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000044f04c: dec dword ptr [rax - 0x75]; jne 0x4efe1; call rsi; 
0x0000000000491ff7: dec dword ptr [rax - 0x75]; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000046918b: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000045e46c: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000048ca2f: dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x0000000000413bc1: dec dword ptr [rax - 0x75]; push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004165cc: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004607a7: dec dword ptr [rax - 0x75]; xchg ebp, eax; call 0x490607aa; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004585c8: dec dword ptr [rax - 0x75]; xchg ebp, eax; push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000484213: dec dword ptr [rax - 0x75]; clc; xor rax, qword ptr fs:[0x28]; jne 0x8425e; leave; ret; 
0x0000000000481c3c: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000041f784: dec dword ptr [rax - 0x77]; add eax, 0x29a0d4; ret; 
0x000000000041f776: dec dword ptr [rax - 0x77]; add eax, 0x29a0ea; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000048a3b7: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x000000000041c9fd: dec dword ptr [rax - 0x77]; bnd jmp 0x1c80e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047f451: dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000046b769: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000045ff0e: dec dword ptr [rax - 0x77]; mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000041ca05: dec dword ptr [rax - 0x77]; push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x00000000004758de: dec dword ptr [rax - 0x77]; ret 0x1477; 
0x000000000041ef7f: dec dword ptr [rax - 0x77]; ret 0x2948; 
0x000000000046dcf6: dec dword ptr [rax - 0x77]; ret 0x29e8; 
0x000000000042432b: dec dword ptr [rax - 0x77]; ret 0x5ae9; 
0x000000000047583d: dec dword ptr [rax - 0x77]; ret 0x7577; 
0x000000000041ecfc: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000423687: dec dword ptr [rax - 0x77]; ret 0x854d; 
0x000000000045adf2: dec dword ptr [rax - 0x77]; ret 0x870f; 
0x000000000046d988: dec dword ptr [rax - 0x77]; ret 0x8b44; 
0x00000000004491f6: dec dword ptr [rax - 0x77]; ret 0x8b48; 
0x000000000047866c: dec dword ptr [rax - 0x77]; ret 0x8d4c; 
0x0000000000423da6: dec dword ptr [rax - 0x77]; ret 0x90e9; 
0x000000000044a525: dec dword ptr [rax - 0x77]; ret 0xa076; 
0x0000000000449351: dec dword ptr [rax - 0x77]; ret 0xa0e9; 
0x000000000047cc87: dec dword ptr [rax - 0x77]; ret 0xa8e8; 
0x00000000004567bd: dec dword ptr [rax - 0x77]; ret 0xb2eb; 
0x000000000044933d: dec dword ptr [rax - 0x77]; ret 0xb4e9; 
0x00000000004241b8: dec dword ptr [rax - 0x77]; ret 0xb60f; 
0x000000000046ba99: dec dword ptr [rax - 0x77]; ret 0xb848; 
0x0000000000475e1c: dec dword ptr [rax - 0x77]; ret 0xefeb; 
0x000000000046fd3a: dec dword ptr [rax - 0x77]; ret 0xf41; 
0x000000000040587f: dec dword ptr [rax - 0x77]; ret 0xf748; 
0x0000000000401acd: dec dword ptr [rax - 0x77]; ret; 
0x000000000044cf74: dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x73], 0x3d; adc byte ptr [rcx + 0xf480004], 0x44; ret; 
0x0000000000475a36: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000484d2f: dec dword ptr [rax - 0x7b]; sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x235e24; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fde: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000048755c: dec dword ptr [rax - 0x7d]; call 0x7c93bd65; ret; 
0x0000000000455f1a: dec dword ptr [rax - 0x7d]; jl 0x55f43; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x00000000004545c1: dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000452cab: dec dword ptr [rax - 0x7d]; ret 0x4804; 
0x0000000000405dcb: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x0000000000456894: dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000048dff7: dec dword ptr [rax - 0x7d]; ret 0xe902; 
0x0000000000459398: dec dword ptr [rax - 0x7d]; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x0000000000469983: dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004047cf: dec dword ptr [rax - 0x7d]; ret; 
0x00000000004347ac: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000044b5b0: dec dword ptr [rax - 0x7f]; ret; 
0x0000000000477037: dec dword ptr [rax - 9]; fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x000000000048e9f4: dec dword ptr [rax - 9]; ret; 
0x00000000004a4d7f: dec dword ptr [rax]; jbe 0xa4d80; call qword ptr [rax]; 
0x00000000004a4d7f: dec dword ptr [rax]; jbe 0xa4d80; call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x00000000004940af: dec dword ptr [rax]; mov dl, 0xf9; call rax; 
0x00000000004601eb: dec dword ptr [rbp + 0x29]; fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000461be4: dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x00000000004059cb: dec dword ptr [rbp - 0x73]; je 0x59d6; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000046fd01: dec dword ptr [rbp - 0x75]; mov esp, 0xd824; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000467e0d: dec dword ptr [rbp - 0x77]; ret 0x894c; 
0x000000000045c436: dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000423fe3: dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret; 
0x0000000000400e44: dec dword ptr [rbx + 0x2bafb115]; add bh, dh; ret 0; 
0x0000000000422cfd: dec dword ptr [rbx + 0x90c2454]; ret 0xbae9; 
0x000000000045cb34: dec dword ptr [rbx + rcx*4 + 0x15]; in al, dx; ret 0x25; 
0x0000000000465331: dec dword ptr [rbx - 0x1237b]; inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000471b28: dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x000000000046d885: dec dword ptr [rbx - 0x177cefbe]; xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x00000000004710bb: dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049406b: dec dword ptr [rbx - 0x69]; stc; call rax; 
0x000000000049406b: dec dword ptr [rbx - 0x69]; stc; call rax; xchg edi, eax; stc; jmp qword ptr [rax - 0x72]; 
0x0000000000495743: dec dword ptr [rcx + 0x26fffb3e]; sti; push qword ptr [rax]; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000461b3f: dec dword ptr [rcx + 0x39]; ret 0x850f; 
0x000000000047c329: dec dword ptr [rcx + 0x39]; ret 0x860f; 
0x0000000000460423: dec dword ptr [rcx + 0x39]; ret; 
0x0000000000484c14: dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000046ae27: dec dword ptr [rcx + 0x63]; ret 0x8545; 
0x00000000004021fd: dec dword ptr [rcx + 0x63]; test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000046b2a5: dec dword ptr [rcx + 0x63]; ret; 
0x0000000000448102: dec dword ptr [rcx + 0x6e8c1c8]; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000473c3c: dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000047c5a5: dec dword ptr [rcx + rax - 0x28]; call rax; 
0x000000000046b512: dec dword ptr [rcx + rbp - 0x1f]; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000494bef: dec dword ptr [rcx + rbp - 6]; push rdx; xor dl, bh; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x00000000004845ed: dec dword ptr [rcx + rcx*4 + 0x4f]; or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000042f43e: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000048464c: dec dword ptr [rcx + rcx*4 + 7]; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000469e87: dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x0000000000469e7d: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000045fca9: dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000469181: dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000046cba8: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046bbda: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cd25: dec dword ptr [rcx + rcx*4 - 0xe]; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cbb2: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rax + 0x38]; 
0x000000000046bbe7: dec dword ptr [rcx + rcx*4 - 1]; call qword ptr [rcx + 0x38]; 
0x000000000044f049: dec dword ptr [rcx + rcx*4 - 1]; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045dc76: dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000460115: dec dword ptr [rcx + rcx*4 - 9]; call qword ptr [rax + 0x38]; 
0x00000000004582f1: dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000004585cf: dec dword ptr [rcx + rcx*4 - 9]; call rdx; 
0x000000000045dad6: dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000046b51f: dec dword ptr [rcx - 0x3f]; inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000489427: dec dword ptr [rcx - 0x73]; or byte ptr [rax - 0x77], r9b; ret; 
0x0000000000455352: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x77], r9b; fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x000000000040e2bf: dec dword ptr [rcx - 0x75]; add byte ptr [r8 - 0x7d], r9b; ret; 
0x000000000040e164: dec dword ptr [rcx - 0x75]; add cl, byte ptr [rcx - 0x77]; add dword ptr [rcx - 0x73], ecx; or byte ptr [r8 + 0x39], cl; ret; 
0x000000000047c670: dec dword ptr [rcx - 0x77]; ret 0x13e9; 
0x0000000000404811: dec dword ptr [rcx - 0x77]; ret 0x149; 
0x000000000047d010: dec dword ptr [rcx - 0x77]; ret 0x9be9; 
0x000000000046adf4: dec dword ptr [rcx - 0x77]; ret 0xff31; 
0x0000000000460387: dec dword ptr [rcx - 0x77]; ret; 
0x000000000041c1b6: dec dword ptr [rcx - 0x7b]; ret; 
0x000000000046018f: dec dword ptr [rcx - 0x7d]; ret; 
0x000000000046068b: dec dword ptr [rdi + rcx + 0x48]; ret 0x958b; 
0x0000000000493f6f: dec dword ptr [rdi - 0x72]; stc; jmp qword ptr [rax]; 
0x000000000049645b: dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x00000000004964a7: dec dword ptr [rdi]; jo 0x964a6; dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x00000000004166c0: dec dword ptr [rdi]; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004619f0: dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x00000000004531af: dec dword ptr [rdi]; test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x000000000042c146: dec dword ptr [rdi]; test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x0000000000446380: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045f96f: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000046dff6: dec dword ptr [rdi]; test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000047d76a: dec dword ptr [rdi]; xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000042128c: dec dword ptr [rdi]; xchg ebp, eax; ret 0xd020; 
0x000000000041878b: dec dword ptr [rdi]; xchg ebp, eax; sal bh, 0xd8; ret; 
0x00000000004674a5: dec dword ptr [rdi]; xchg esp, eax; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000049560f: dec dword ptr [rsi - 0x170004c3]; cmp eax, 0x3e44fffb; sti; jmp qword ptr [rsi]; 
0x0000000000493f77: dec dword ptr [rsi]; nop; stc; call qword ptr [rax]; 
0x00000000004956a7: dec ebp; sti; call qword ptr [rcx + 0x3d]; 
0x000000000049576f: dec edx; cmp eax, 0x3db6fffb; sti; push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x0000000000494b2b: dec edx; xor edi, edx; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x0000000000442331: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x00000000004732b6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000484454: div byte ptr [rbp + 0x29]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004736a2: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000484522: div byte ptr [rbp - 0x11]; cmp cx, 0x7fff; je 0x84514; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000047e6d5: div byte ptr [rbx + rax + 0x48]; mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x0000000000424602: div byte ptr [rdi + 0x29]; add byte ptr [rdx], al; lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x000000000048d14e: div byte ptr [rdi + rcx - 0x80]; mov esp, 0xd837; add byte ptr [rax], al; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x0000000000484b36: div byte ptr [rdx - 4]; jmp qword ptr [rsi + 0xf]; 
0x000000000048d0f2: div dword ptr [rbp + 0x1b]; lea rdx, [rip + 0x22f0a4]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000465e56: div eax; add r9d, eax; mov eax, r9d; ret; 
0x00000000004481b8: div ecx; mov eax, eax; ret; 
0x000000000044819f: div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000480d08: div edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000465e55: div r8d; add r9d, eax; mov eax, r9d; ret; 
0x000000000048d154: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000048d113: fadd dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + rbx*8 - 0xd], dh; ret; 
0x0000000000412a50: fadd dword ptr [rax]; add byte ptr [rax], al; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000040fc38: fadd dword ptr [rax]; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000040f7b7: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x000000000048ddab: fadd dword ptr [rcx]; add byte ptr [rdi], cl; mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000437107: fadd dword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437106: fadd dword ptr es:[rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000465e43: fadd qword ptr [rcx + rcx*4 - 0x38]; ret; 
0x0000000000444b40: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x44b00; lea rax, [rdi + 7]; ret; 
0x0000000000436c87: fadd qword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ce11: fbld tbyte ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048ff24: fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042ce0f: fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000440bfb: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000045eb56: fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x00000000004af5b8: fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x000000000048d119: fcomi st(3); ret; 
0x0000000000410429: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x0000000000414666: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044a3c1: fcomp dword ptr [rbx + 0x5d]; ret; 
0x00000000004a98f9: fcomp dword ptr [rdx + 0x21]; ret; 
0x0000000000488418: fdiv dword ptr [rbp + 0x11]; add rsp, 0x40; pop rbx; ret; 
0x00000000004884ff: fdiv dword ptr [rbp + 0x12]; add rsp, 0x50; pop rbx; ret; 
0x0000000000482594: fdiv dword ptr [rbp + 0x1e]; add rsp, 0x110; pop rbx; ret; 
0x000000000042d2df: fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d0df: fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044e860: fdiv qword ptr [rdx]; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000047281f: fdiv st(0), st(0); dec dword ptr [rax + 1]; ret; 
0x0000000000494379: fdiv st(1), st(0); jmp qword ptr [rax]; 
0x0000000000494359: fdiv st(1), st(0); push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x0000000000494359: fdiv st(1), st(0); push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x00000000004b2768: fdiv st(2); sti; jmp qword ptr [rbx]; 
0x0000000000434950: fdiv st(2), st(0); add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000453ef4: fdiv st(2), st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000048ad69: fdiv st(3); ret; 
0x00000000004b41cd: fdiv st(4), st(0); jmp qword ptr [rbx + 1]; 
0x0000000000422867: fdiv st(5), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000462373: fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x000000000046dc64: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000004725e4: fdivp st(0); jmp qword ptr [rsi + 0xf]; 
0x000000000049435d: fdivp st(1); call qword ptr [rax - 0x20]; 
0x000000000049435d: fdivp st(1); call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x000000000049437d: fdivp st(1); call qword ptr [rax]; 
0x000000000049431d: fdivp st(1); call rax; 
0x0000000000453cf4: fdivp st(2); jmp qword ptr [rsi + 0xf]; 
0x0000000000494391: fdivr st(1); jmp qword ptr [rax]; 
0x0000000000494371: fdivr st(1); push qword ptr [rax - 0x26]; stc; inc dword ptr [rax - 0x24]; stc; jmp qword ptr [rax]; 
0x0000000000494351: fdivr st(1); push qword ptr [rax - 0x6f000626]; fdiv st(1), st(0); push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x00000000004a6eb5: fdivr st(4); test al, 0x97; xchg esp, eax; ret; 
0x000000000046dfff: fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000004464f8: fdivr st(7); ret; 
0x0000000000444ca2: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x44d90; lea rax, [rdi + 0xf]; ret; 
0x000000000040f058: fiadd dword ptr [rbp + 0x450f48c9]; ret 0x8348; 
0x000000000048ad8a: fiadd dword ptr [rbx]; add al, byte ptr [rax]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004596b5: fiadd dword ptr [rbx]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000041248a: fiadd word ptr [rcx + rcx*4 - 0x11]; mov eax, r9d; syscall; 
0x000000000042b64e: fiadd word ptr [rcx]; add byte ptr [rax], al; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000413e3e: fiadd word ptr [rcx]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000436b07: fiadd word ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b06: fiadd word ptr es:[rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a9746: ficomp word ptr [rdx - 0x19]; cmc; mov ch, 0xab; ret; 
0x000000000042d1df: fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000045ea5e: fidiv word ptr [rax]; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000042cedf: fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000488075: fidivr dword ptr [rax + 1]; ret; 
0x0000000000436e07: fild dword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e06: fild dword ptr es:[rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048d083: fild word ptr [rax]; add byte ptr [rax], al; add byte ptr [rdx + riz*8 + 0x48], dh; add esp, 0x18; ret; 
0x0000000000464c32: fild word ptr [rbp - 0x77]; ret 0x8b4c; 
0x00000000004582e8: fild word ptr [rcx + rcx*4 + 0x45]; mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x0000000000436987: fild word ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000419c2c: fimul dword ptr [rax + 0x21]; ret 0x8948; 
0x0000000000455359: fimul dword ptr [rax + 0x29]; ret 0x8348; 
0x0000000000480cf7: fimul dword ptr [rax + 0x39]; ret 0x7472; 
0x00000000004657cd: fimul dword ptr [rax + 0x39]; ret 0xe57f; 
0x0000000000446b35: fimul dword ptr [rax + 0x63]; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000474515: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000473855: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000042a3a6: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000046c14d: fimul dword ptr [rax - 0x3f]; clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000040eab7: fimul dword ptr [rax - 9]; ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648e36c8; ret; 
0x000000000045e63a: fimul dword ptr [rcx + rcx*4 - 0x12]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000042f4c1: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450cef: fimul word ptr [rax + 1]; ret; 
0x000000000042f4c2: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004601f1: fimul word ptr [rcx + rcx*4 - 9]; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004498bf: fistp qword ptr [rax + 1]; syscall; 
0x0000000000411767: fistp word ptr [rbx + 0x48]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041666e: fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000470d90: fistp word ptr [rbx + 0x5d]; pop r12; jmp rax; 
0x000000000048ff21: fisttp dword ptr [rax - 0x77]; fbstp tbyte ptr [rbp - 0x17]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000458927: fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004900ad: fisttp dword ptr [rax - 0x77]; sbb eax, 0x22bc3b; jne 0x90098; pop rbx; ret; 
0x0000000000483351: fisttp dword ptr [rax - 0x77]; ret; 
0x000000000046661c: fisttp dword ptr [rax - 0x7b]; rol byte ptr [rcx + 0xf], 0x94; ret; 
0x000000000047f4c6: fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x00000000004672c8: fisttp dword ptr [rax - 0x7d]; jl 0x672f1; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret; 
0x0000000000477f3e: fisttp dword ptr [rax - 0x7d]; ret; 
0x000000000048c540: fisttp dword ptr [rbx + 0x63]; add al, 0x99; add rax, r9; jmp rax; 
0x000000000048336b: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000455037: fisttp dword ptr [rcx - 0x7d]; ret; 
0x000000000048dfbd: fisttp dword ptr [rdi]; mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000420e7b: fisttp dword ptr [rdi]; xchg ebp, eax; ret 0xd020; 
0x000000000047d5e4: fisttp dword ptr [rdi]; xchg ebp, eax; ret; 
0x000000000042f6a1: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000405dee: fisttp qword ptr [rax - 0x7d]; ret 0x4401; 
0x0000000000446a32: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042f6a2: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f2f1: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3ed: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f339: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044a630: fisttp word ptr [rax - 0x77]; call 0x5c460393; mov esi, 2; jmp rax; 
0x0000000000480d02: fisttp word ptr [rax - 0x77]; ret 0x9de8; 
0x0000000000401933: fisttp word ptr [rax - 0x7d]; ret; 
0x00000000004833ef: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000449b7d: fisttp word ptr [rcx + 0x3b8c2]; add byte ptr [rax], al; syscall; 
0x000000000042f2f2: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3ee: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f33a: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004601ee: fisttp word ptr [rcx + rcx*4 - 0x22]; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046f1c9: fisttp word ptr [rdx + 3]; add byte ptr [rax + 0x63], cl; add al, 0x87; add rax, rdi; jmp rax; 
0x000000000043f23d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x000000000042d1e1: fisub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444adf: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000047e992: fisub word ptr [rbx]; add bh, al; test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x000000000042cee1: fisub word ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444b21: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x000000000041b9bf: fisubr word ptr [rcx]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040e93f: fisubr word ptr [rdx]; add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x3d3; 
0x0000000000436f87: fld dword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000483664: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x00000000004a7ba1: fld qword ptr [rsi + 0x32]; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004734f2: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000004a98d1: fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004246e3: fldenv [rdi]; add al, byte ptr [rax]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x000000000042b289: fldenv [rsi + 0xf]; je 0x2b2dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042b567: fldenv [rsi + 0xf]; je 0x2b5bb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042d261: fldenv [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042b181: fldenv [rsi + 0xf]; xlatb; ret; 
0x0000000000484404: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000041ad2f: fmul dword ptr [rax + 0x39]; ret; 
0x0000000000412108: fmul dword ptr [rax - 0x77]; ret; 
0x000000000040e0d1: fmul dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000489974: fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000047703a: fmul dword ptr [rcx + 0x21]; ret 0x394c; 
0x000000000048d487: fmul dword ptr [rcx + rcx*4 - 0x1f]; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cdd1: fmul dword ptr [rcx + rcx*4 - 0x1f]; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x00000000004b00f4: fmul dword ptr [rcx]; add byte ptr [rax], ch; stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x000000000042f891: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000486c02: fmul qword ptr [rax - 0x77]; ret; 
0x000000000042f892: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000424999: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000438ebf: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000045f74f: fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x00000000004b3f24: fmul st(2), st(0); cld; call rdx; 
0x00000000004734f0: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x00000000004244ff: fnsave dword ptr [rdi]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000042cfdf: fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d25f: fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cfe1: frstor dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a7887: fstp dword ptr [rbx + 0x4a315a58]; ret 0x1b49; 
0x000000000042e3d3: fstp dword ptr [rsi + rax]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a7c00: fstp st(0); ret 0xde5d; 
0x00000000004b3118: fsub dword ptr [rbx]; cld; jmp qword ptr [rcx]; 
0x00000000004494e8: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000449578: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000449828: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000042d2e1: fsub dword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000441064: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000042d0e1: fsub qword ptr [rsi + 0xf]; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044025c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x0000000000404a17: fsub st(0), st(0); sbb edi, dword ptr [rdx - 0x73740001]; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x000000000040ebcd: fsubr qword ptr [rdx]; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000449b24: fsubr st(3); ret 0xf66; 
0x000000000047a171: fucomi st(3); ret 0x1f0f; 
0x000000000042be9e: fucomi st(4); vptest ymm5, ymm0; jae 0x2c140; xor eax, eax; vzeroupper; ret; 
0x0000000000471ff7: fucompi st(0); ret; 
0x000000000048b411: fucompi st(1); ret; 
0x000000000045dadc: idiv bh; call rax; 
0x0000000000469189: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000045e46a: idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000046917f: idiv bh; dec dword ptr [rcx + rcx*4 - 0xa]; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000045dc74: idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045dad4: idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x000000000045dc6d: idiv bh; inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d05dc6e; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045ed24: idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000045e836: idiv bh; jmp qword ptr [rax]; 
0x0000000000467593: idiv bh; jmp qword ptr [rsi + 0x2e]; 
0x0000000000407474: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x000000000049268a: idiv bh; ret; 
0x00000000004a7b97: idiv byte ptr [rbx]; jbe 0xa7bce; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x0000000000450b46: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x000000000049491d: idiv cl; call qword ptr [rax]; 
0x00000000004524ec: idiv dl; inc dword ptr [rcx - 0x77]; ret; 
0x000000000047242f: idiv eax; jmp qword ptr [rsi + 0x2e]; 
0x00000000004948e1: idiv ecx; call qword ptr [rax]; 
0x000000000045ddf6: idiv edi; call qword ptr [rax]; 
0x00000000004698c7: idiv edi; call qword ptr [rbx + 0xf]; 
0x000000000045dd14: idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x000000000046922e: idiv edi; dec dword ptr [rax + 0x29]; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045dcde: idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000041c9fb: idiv edi; dec dword ptr [rax - 0x77]; bnd jmp 0x1c80e; mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000046a7c1: idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000469e85: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; call qword ptr [rbx + 0x38]; 
0x0000000000469e7b: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1a]; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000469a1d: idiv edi; inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000046a2bf: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000046741b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000492886: idiv edi; mov r8b, 0xf7; jmp qword ptr [rcx]; 
0x0000000000494ff5: idiv edx; call qword ptr [rax - 9]; 
0x0000000000494ff5: idiv edx; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x0000000000495019: idiv edx; call qword ptr [rax]; 
0x0000000000495011: idiv edx; call rax; 
0x0000000000495011: idiv edx; call rax; idiv edx; push rax; idiv edx; call qword ptr [rax]; 
0x0000000000495001: idiv edx; inc dword ptr [rax - 0x5f000509]; idiv edx; push qword ptr [rax - 0x3f000509]; idiv edx; call rax; 
0x0000000000494ff1: idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x0000000000494ff1: idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x000000000049500d: idiv edx; inc eax; idiv edx; call rax; 
0x0000000000494ff9: idiv edx; jmp qword ptr [rax - 9]; 
0x0000000000495009: idiv edx; push qword ptr [rax - 0x3f000509]; idiv edx; call rax; 
0x0000000000495015: idiv edx; push rax; idiv edx; call qword ptr [rax]; 
0x0000000000478a07: imul al; jnp 0x78a85; clc; dec dword ptr [rax - 0x7d]; ret; 
0x000000000047534f: imul al; sti; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000459117: imul eax; ret; 
0x000000000047062e: imul eax, dword ptr [rax], -0x15; nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004b20fd: imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x0000000000444b61: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x0000000000468102: imul eax, dword ptr [rcx], 0xc7480000; ret 0xffe0; 
0x00000000004387da: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x3882f; adc dword ptr [rcx + 7], edi; ret; 
0x00000000004557d3: imul eax, ebx, 0x8941fffa; ret 0x5be9; 
0x000000000041f773: imul ebp, ebx, 0x8948ffff; add eax, 0x29a0ea; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x0000000000489df0: imul ecx, dword ptr [rax], 0x74; jl 0x89d80; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000438673: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438439: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000495e81: imul edi, ebx, -1; jo 0x95ef1; sti; call qword ptr [rax + 0x6b]; 
0x0000000000495e8d: imul edi, ebx, -1; or byte ptr [rbx - 5], ch; jmp rax; 
0x0000000000495e61: imul edi, ebx, -1; hlt; push 0x6bb0fffb; sti; jmp rax; 
0x0000000000493f4d: imul edi, ecx, 0xf96a80ff; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x0000000000407133: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004049a4: imul edi, edx, -1; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000430b03: imul esi, dword ptr [rdi], 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004181fe: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x0000000000443fdc: imul esp, dword ptr [rsi + 0xf], 0x74; ret 0xff3; 
0x0000000000449b78: in al, 0x21; add byte ptr [rax], al; mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000497358: in al, 0x30; cld; call qword ptr [rsi + rbp]; cld; call rsp; 
0x000000000042f896: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000040d339: in al, 0x74; mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x0000000000440cec: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000044c253: in al, 0x80; cli; cmp eax, 0x83497174; ret; 
0x00000000004abbdc: in al, 0x94; cmc; call rsp; 
0x000000000044f9c4: in al, 0xe8; pop rbp; or edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000045e3d0: in al, 0xf; lahf; ret; 
0x0000000000434bca: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000447c7e: in al, 0xf3; ret; 
0x0000000000494349: in al, 0xf9; jmp qword ptr [rax - 0x1a]; 
0x0000000000494369: in al, 0xf9; jmp qword ptr [rax]; 
0x0000000000494309: in al, 0xf9; jmp rax; 
0x000000000046af14: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000436507: in al, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444708: in al, 8; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041ec07: in al, dx; add byte ptr [rax], 0; add al, ch; call rax; 
0x000000000046faa7: in al, dx; add byte ptr [rax], 0; add al, ch; pop rdi; ret 0xfffd; 
0x0000000000421144: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x2ab; 
0x000000000041e344: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x2d9; 
0x000000000040e944: in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x3d3; 
0x000000000041f673: in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x000000000047fa07: in al, dx; add byte ptr [rax], dl; add byte ptr [rax], al; mov rbx, rsp; mov rsi, rbx; syscall; 
0x000000000045e874: in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000045e6b1: in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x000000000045dad3: in al, dx; idiv bh; dec dword ptr [rcx - 0x2f42763f]; idiv bh; call rax; 
0x0000000000434fc0: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000414a21: in al, dx; mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000044bde3: in al, dx; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bdf0; ret; 
0x000000000042f89a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434fca: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004abdd4: in al, dx; movsd dword ptr [rdi], dword ptr [rsi]; cmc; jmp qword ptr [rdx + 0x36]; 
0x000000000048d177: in al, dx; or al, ch; or bh, al; jmp qword ptr [rsi - 0x70]; 
0x000000000047ba8c: in al, dx; or bh, bh; adc eax, 0x23e78c; xor eax, eax; add rsp, 8; ret; 
0x000000000041ed1f: in al, dx; or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000042a794: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041b229: in al, dx; or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x000000000041a96a: in al, dx; or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x000000000045cb38: in al, dx; ret 0x25; 
0x000000000048dcf9: in al, dx; sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x000000000048a774: in al, dx; sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000477e7d: in al, dx; sub byte ptr [rbp + rcx*4 + 0x15], cl; pushfq; ret 2; 
0x000000000042be9f: in al, dx; vptest ymm5, ymm0; jae 0x2c140; xor eax, eax; vzeroupper; ret; 
0x0000000000449246: in eax, 0; add byte ptr [rax], al; syscall; 
0x00000000004a7a23: in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004a98d3: in eax, 0x2d; cmpsd dword ptr [rsi], dword ptr [rdi]; xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x00000000004846c2: in eax, 0x48; mov eax, esi; ret; 
0x000000000042f6a6: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004a6cb9: in eax, 0x6a; mov eax, 0x45155e93; ret 0x591c; 
0x000000000048c23a: in eax, 0x83; call qword ptr [rcx]; 
0x0000000000444087: in eax, 0xe; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004a98d9: in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000474813: in eax, 0xf; je 0x74830; add rax, 2; ret; 
0x0000000000448139: in eax, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000434c4a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000048f683: in eax, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x00000000004942e9: in eax, 0xf9; call qword ptr [rax]; 
0x00000000004942c9: in eax, 0xf9; inc dword ptr [rax - 0x19]; stc; call rax; 
0x00000000004942a9: in eax, 0xf9; jmp qword ptr [rax - 0x19]; 
0x000000000049438d: in eax, 0xf9; push qword ptr [rax - 0x28]; stc; jmp qword ptr [rax]; 
0x0000000000465deb: in eax, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004a8da1: in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000436387: in eax, 5; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000466bc8: in eax, dx; add al, 0x84; ror byte ptr [rdi], 0x84; ret 0x17; 
0x0000000000469d58: in eax, dx; add dword ptr [rax - 0x91743], eax; jmp qword ptr [rax]; 
0x0000000000435c07: in eax, dx; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048ff6f: in eax, dx; jne 0x8ff48; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004901c2: in eax, dx; jne 0x901a8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490d7c: in eax, dx; jne 0x90d60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000435040: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446822: in eax, dx; lea rax, [rcx - 1]; ret; 
0x000000000042f6aa: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043504a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000446972: in eax, dx; sub rax, 1; ret; 
0x000000000047d74d: in eax, dx; xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x0000000000446602: in eax, dx; ret; 
0x0000000000494905: in eax, dx; stc; call qword ptr [rax]; 
0x0000000000469981: in eax, dx; std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000044a82c: inc byte ptr [rbp - 0x60f0be13]; ret 0x8545; 
0x000000000046b522: inc byte ptr [rdx]; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000434627: inc byte ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047f178: inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000494653: inc dword ptr [rax + 0x10]; cli; call rax; 
0x000000000049443b: inc dword ptr [rax + 0x13]; cli; call rax; 
0x000000000049443b: inc dword ptr [rax + 0x13]; cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000493e67: inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x0000000000494b4b: inc dword ptr [rax + 0x37]; cli; call rax; 
0x0000000000494b4b: inc dword ptr [rax + 0x37]; cli; call rax; cli; jmp qword ptr [rax + 0x36]; 
0x0000000000494933: inc dword ptr [rax + 0x3a]; cli; call rax; 
0x0000000000494933: inc dword ptr [rax + 0x3a]; cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494e63: inc dword ptr [rax + 0x41]; cli; call qword ptr [rax + 0x43]; 
0x0000000000494e63: inc dword ptr [rax + 0x41]; cli; call qword ptr [rax + 0x43]; cli; jmp qword ptr [rax + 0x45]; 
0x0000000000494113: inc dword ptr [rax + 0x60fff9b3]; mov ch, 0xf9; inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x0000000000494197: inc dword ptr [rax + 0x60fff9b4]; mov dh, 0xf9; inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x0000000000493f5f: inc dword ptr [rax + 0x6e]; stc; push qword ptr [rax]; outsd dx, dword ptr [rsi]; stc; jmp qword ptr [rax]; 
0x000000000048aec3: inc dword ptr [rax + 0x74]; sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x0000000000496457: inc dword ptr [rax + 0x75]; sti; dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x000000000049489b: inc dword ptr [rax + 0xfffa05]; add eax, 0x470fffa; cli; jmp rax; 
0x000000000045dc6f: inc dword ptr [rax + rcx*4 - 0x7b]; call 0x4d05dc6e; mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000465600: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x74]; 
0x0000000000465982: inc dword ptr [rax - 0x15343]; jmp qword ptr [rdi + 0x75]; 
0x00000000004942cb: inc dword ptr [rax - 0x19]; stc; call rax; 
0x00000000004942c7: inc dword ptr [rax - 0x1b]; stc; inc dword ptr [rax - 0x19]; stc; call rax; 
0x00000000004942f7: inc dword ptr [rax - 0x23]; stc; jmp qword ptr [rax]; 
0x0000000000494377: inc dword ptr [rax - 0x24]; stc; jmp qword ptr [rax]; 
0x0000000000494f5b: inc dword ptr [rax - 0x2f000555]; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000494407: inc dword ptr [rax - 0x2f000636]; retf; stc; jmp qword ptr [rax]; 
0x0000000000494227: inc dword ptr [rax - 0x2f000654]; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x000000000049423b: inc dword ptr [rax - 0x2f000662]; lahf; stc; jmp qword ptr [rax]; 
0x000000000049419f: inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x000000000049411b: inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x0000000000495003: inc dword ptr [rax - 0x5f000509]; idiv edx; push qword ptr [rax - 0x3f000509]; idiv edx; call rax; 
0x0000000000494fd3: inc dword ptr [rax - 0x5f00050d]; cli; inc eax; cli; jmp rax; 
0x0000000000494097: inc dword ptr [rax - 0x6c]; stc; call rax; 
0x0000000000494097: inc dword ptr [rax - 0x6c]; stc; call rax; xchg esp, eax; stc; jmp qword ptr [rax - 0x6b]; 
0x00000000004a39d3: inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; call qword ptr [rax - 0x50]; 
0x00000000004a39c3: inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax - 0x50]; 
0x00000000004a39f7: inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax]; 
0x0000000000494287: inc dword ptr [rax - 0x7f00061b]; out 0xf9, eax; call qword ptr [rax]; 
0x000000000046a4ad: inc dword ptr [rax - 0x91743]; jmp qword ptr [rax]; 
0x000000000045ed65: inc dword ptr [rax - 0x93b43]; jmp qword ptr [rax]; 
0x0000000000494fcb: inc dword ptr [rax - 0xd]; cli; jmp qword ptr [rax - 0xd]; 
0x0000000000494f9b: inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; 
0x0000000000494f9b: inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x0000000000494863: inc dword ptr [rax - 0xf0005fc]; add edi, edx; jmp qword ptr [rax + 3]; 
0x0000000000494ff3: inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x0000000000494ff3: inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x000000000046b777: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; xor eax, 0x24b69d; jmp rax; 
0x000000000047e99a: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000463341: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rdi + rcx - 0x4a], al; or al, 0x89; ret 0xc689; 
0x000000000045ed26: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000046a667: inc dword ptr [rax]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000042d7f1: inc dword ptr [rax]; add byte ptr [rax], al; and ecx, 0xff; sub eax, ecx; ret; 
0x00000000004480df: inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x000000000042d7f7: inc dword ptr [rax]; add byte ptr [rax], al; sub eax, ecx; ret; 
0x000000000049489f: inc dword ptr [rax]; add eax, 0x470fffa; cli; jmp rax; 
0x00000000004942ff: inc dword ptr [rax]; loope 0x942fc; jmp rax; 
0x0000000000494157: inc dword ptr [rax]; mov ch, 0xf9; jmp rax; 
0x000000000049412b: inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x0000000000494e93: inc dword ptr [rax]; pop rdx; cli; call qword ptr [rax]; 
0x0000000000493f0b: inc dword ptr [rax]; push rsi; stc; push qword ptr [rax + 0x57]; stc; jmp rax; 
0x0000000000493e63: inc dword ptr [rax]; sbb edi, ecx; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x0000000000494da7: inc dword ptr [rax]; sub bh, dl; push qword ptr [rax + 0x29]; cli; call rax; 
0x0000000000494ba3: inc dword ptr [rax]; sub edi, edx; push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x000000000049242e: inc dword ptr [rax]; sub rsp, 8; add rsp, 8; ret; 
0x0000000000494963: inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000494f8b: inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x0000000000494f8b: inc dword ptr [rax]; cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000494fc3: inc dword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000493d7f: inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x0000000000494fe3: inc dword ptr [rax]; hlt; cli; jmp qword ptr [rax]; 
0x0000000000455034: inc dword ptr [rbp + 0x31]; fisttp dword ptr [rcx - 0x7d]; ret; 
0x000000000047d74a: inc dword ptr [rbp + 0x31]; in eax, dx; xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x00000000004848d0: inc dword ptr [rbp + 0x480e74c0]; lea eax, [rip + 0x2377a4]; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x000000000047bbef: inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x000000000045eef2: inc dword ptr [rbp + 0x79850fc9]; add eax, dword ptr [rax]; add byte ptr [rcx - 0x77], al; ret; 
0x000000000048c53c: inc dword ptr [rbp + 0xf]; mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x0000000000488352: inc dword ptr [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000048254c: inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000402790: inc dword ptr [rbp - 0x7aa48740]; ror byte ptr [rdi], 0x84; ret; 
0x0000000000411c0e: inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000400937: inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x0000000000415656: inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000046a7bc: inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000040d51b: inc dword ptr [rbx - 0x2f7cfe08]; dec dword ptr [rax - 0x7d]; ret; 
0x000000000048e269: inc dword ptr [rbx - 0x38b7f808]; ret 0xffff; 
0x0000000000459790: inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x000000000045600b: inc dword ptr [rbx - 0x7af0f808]; xchg esi, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x000000000048c463: inc dword ptr [rbx - 0x7bf0bf1e]; ret; 
0x000000000041e63e: inc dword ptr [rbx - 0x7bf0fe1a]; pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x000000000045ece4: inc dword ptr [rbx - 0x8f743]; call qword ptr [rax]; 
0x000000000046561c: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0x75]; 
0x000000000044819d: inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000044810b: inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000473c5c: inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd41d6; cmove rax, rdx; ret; 
0x000000000047f179: inc dword ptr [rcx + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004600b2: inc dword ptr [rcx + 0x29]; ret 0x8545; 
0x000000000045f74c: inc dword ptr [rcx + 0x39]; fmul qword ptr [rdi]; lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000480eb2: inc dword ptr [rcx + rbp - 0x40]; ret; 
0x00000000004126eb: inc dword ptr [rcx + rcx*4 - 0x18]; syscall; 
0x0000000000493fe3: inc dword ptr [rcx - 0x6a]; stc; jmp rcx; 
0x0000000000493f7f: inc dword ptr [rcx - 0x72]; stc; call qword ptr [rax]; 
0x00000000004557d6: inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x0000000000459793: inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x00000000004524ee: inc dword ptr [rcx - 0x77]; ret; 
0x000000000045e6ae: inc dword ptr [rcx - 0x7d]; in al, dx; add dword ptr [rbp - 0x7b], eax; in al, 0xf; lahf; ret; 
0x0000000000469a1f: inc dword ptr [rcx - 1]; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004695fc: inc dword ptr [rcx - 5]; jg 0x69613; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000046aa74: inc dword ptr [rcx - 5]; jg 0x6aa8b; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x000000000046ab71: inc dword ptr [rcx - 5]; jg 0x6ab88; test byte ptr [rax - 0x7c000019], ah; ret; 
0x000000000045eaec: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000046ae71: inc dword ptr [rcx]; add byte ptr [rax], al; add dh, al; test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x0000000000494a1f: inc dword ptr [rdx + 0x35]; cli; call rdx; 
0x0000000000494a1f: inc dword ptr [rdx + 0x35]; cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494527: inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x00000000004344a7: inc dword ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa1d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000494483: inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x0000000000494483: inc dword ptr [rsi + 0x12]; cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000049497b: inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x000000000049497b: inc dword ptr [rsi + 0x39]; cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000495617: inc dword ptr [rsi + rdi - 5]; jmp qword ptr [rsi]; 
0x000000000048e042: inc dword ptr [rsi*2 + 0x8b80f]; add byte ptr [rax], al; ret; 
0x0000000000494ae7: inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000494633: inc eax; adc edi, edx; call qword ptr [rax + 0x13]; 
0x0000000000494633: inc eax; adc edi, edx; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000446a3a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000049500f: inc eax; idiv edx; call rax; 
0x0000000000446a37: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446a34: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000494e83: inc eax; push rcx; cli; call rax; 
0x0000000000494b6b: inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x0000000000494953: inc eax; cli; call qword ptr [rax + 0x36]; 
0x0000000000494953: inc eax; cli; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x0000000000494fb7: inc eax; cli; call rax; 
0x0000000000494fb7: inc eax; cli; call rax; cli; jmp rax; 
0x0000000000494fdb: inc eax; cli; jmp rax; 
0x0000000000494f7b: inc eax; int1; cli; call rax; 
0x0000000000494417: inc eax; iretd; stc; call qword ptr [rax]; 
0x0000000000494417: inc eax; iretd; stc; call qword ptr [rax]; sar ecx, 1; jmp qword ptr [rax - 0x2e]; 
0x00000000004941f7: inc eax; pushfq; stc; call qword ptr [rax]; 
0x000000000042c14c: inc ebp; std; xlatb; ret 0xe883; 
0x000000000044994a: inc ebx; nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000044a5af: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000047550f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a57f: inc ebx; nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000044bc92: inc ebx; nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x00000000004ab65b: inc ecx; adc dh, bh; call rsp; 
0x00000000004ab65b: inc ecx; adc dh, bh; call rsp; adc dh, bh; jmp rdi; 
0x0000000000486fd8: inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000465337: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000494507: inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494507: inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x00000000004949ff: inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x00000000004949ff: inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x000000000049287f: inc esi; mov al, 0xf7; dec dword ptr [rax + 0x45fff7af]; mov al, 0xf7; jmp qword ptr [rcx]; 
0x0000000000494027: inc esi; xchg esi, eax; stc; jmp qword ptr [rsi - 0x69]; 
0x000000000049499b: inc esi; xor eax, 0x3556fffa; cli; jmp rsi; 
0x00000000004945cf: inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000446a39: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446a36: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446a33: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004acb88: insb byte ptr [rdi], dx; adc al, 0; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x000000000042477b: insb byte ptr [rdi], dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000042af14: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004a98de: insb byte ptr [rdi], dx; insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x00000000004718cb: insb byte ptr [rdi], dx; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000004b1388: insb byte ptr [rdi], dx; pop rsp; add byte ptr [rax], al; add al, 0x74; cli; jmp rax; 
0x000000000045d475: insb byte ptr [rdi], dx; ret 0x4c40; 
0x0000000000493f59: insb byte ptr [rdi], dx; stc; call qword ptr [rax + 0x6d]; 
0x00000000004531a6: insd dword ptr [rdi], dx; add al, 0; add bh, dh; ret 0xf800; 
0x0000000000409f2f: insd dword ptr [rdi], dx; add al, 0; add byte ptr [rbx - 0x7bf0fe08], al; ret 4; 
0x000000000042438b: insd dword ptr [rdi], dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x00000000004730f0: insd dword ptr [rdi], dx; add byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x000000000048d4ca: insd dword ptr [rdi], dx; call 0xfffffffff07e601c; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d648: insd dword ptr [rdi], dx; call 0xfffffffff07e619a; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d794: insd dword ptr [rdi], dx; call 0xfffffffff07e62e6; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d7e0: insd dword ptr [rdi], dx; call 0xfffffffff07e6332; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d96f: insd dword ptr [rdi], dx; call 0xfffffffff07e64c1; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048dacf: insd dword ptr [rdi], dx; call 0xfffffffff07e6621; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048db20: insd dword ptr [rdi], dx; call 0xfffffffff07e6672; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x00000000004304ff: insd dword ptr [rdi], dx; cmp eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048fff2: insd dword ptr [rdi], dx; js 0x9006c; ret 0x8b48; 
0x00000000004a98df: insd dword ptr [rdi], dx; pop rbx; ret 0x6f9; 
0x00000000004a7c8d: insd dword ptr [rdi], dx; ret 0xb9b9; 
0x00000000004a8b9f: insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000046932f: insd dword ptr [rdi], dx; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000040155a: int 0; add byte ptr [rax], al; add rsp, 0x98; ret; 
0x00000000004956a8: int 0x3e; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004a9004: int 0x6b; ret; 
0x000000000048425f: int 0x7b; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004680fa: int 0x80; 
0x00000000004024a8: int 0x83; ret 0x8901; 
0x000000000048267e: int 0x90; jmp rdx; 
0x00000000004a7a46: int 0xdd; je 0xa7a0f; xor al, 0xd8; ret; 
0x00000000004a6eb3: int 0xe0; fdivr st(4); test al, 0x97; xchg esp, eax; ret; 
0x00000000004825b4: int 0xe8; jbe 0x82550; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004b0605: int 0xf9; jmp qword ptr [rdx]; 
0x00000000004b3ff1: int 0xfc; jmp qword ptr [rsi]; 
0x000000000042cf1f: int 8; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004119a3: ja 0x119fd; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000401f88: ja 0x1d28; lea rdx, [rip + 0x9065f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000040210c: ja 0x1e31; lea rdx, [rip + 0x90507]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004021f8: ja 0x1e5f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x00000000004022d9: ja 0x1e70; lea rdx, [rip + 0x90392]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000423167: ja 0x232e0; lea rdx, [rip + 0x70bfc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424603: ja 0x2462e; add byte ptr [rdx], al; lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004246dc: ja 0x24707; add byte ptr [rdx], al; lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x000000000042c7f1: ja 0x2c7f9; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000438943: ja 0x3893e; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000444127: ja 0x4412b; ret; 
0x0000000000444143: ja 0x44149; mov dword ptr [rdi], ecx; ret; 
0x0000000000444184: ja 0x4418e; mov qword ptr [rdi], rcx; ret; 
0x0000000000444209: ja 0x4421b; ret; 
0x000000000044425f: ja 0x44275; ret; 
0x00000000004442e1: ja 0x442fb; ret; 
0x0000000000444747: ja 0x4474b; lea rax, [rdi + 2]; ret; 
0x0000000000444763: ja 0x44769; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004447b4: ja 0x447be; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000444899: ja 0x448ab; lea rax, [rdi + 0x10]; ret; 
0x000000000044490f: ja 0x44925; lea rax, [rdi + 0x14]; ret; 
0x0000000000444991: ja 0x449ab; lea rax, [rdi + 0x18]; ret; 
0x0000000000446f14: ja 0x46f3c; jb 0x46f1d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446ecd: ja 0x46f4d; movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004470e0: ja 0x47102; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004471ae: ja 0x471d0; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000447274: ja 0x472b1; jb 0x4727d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004474b8: ja 0x474fa; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004475d4: ja 0x47616; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004476c4: ja 0x47719; jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044798f: ja 0x47993; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447b35: ja 0x47b39; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447bf2: ja 0x47bff; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447ba2: ja 0x47c08; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c0c: ja 0x47c24; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447c93: ja 0x47caa; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x0000000000447d4a: ja 0x47d5a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447cfa: ja 0x47d63; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447e01: ja 0x47e2f; jb 0x47e07; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447ee3: ja 0x47ef7; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447e83: ja 0x47f00; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000447fc9: ja 0x48005; jb 0x47fcf; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000448fac: ja 0x48fd0; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x00000000004491d6: ja 0x49490; lea rdx, [rip + 0x4c399]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000449556: ja 0x49588; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004495a5: ja 0x495d8; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x000000000044a41e: ja 0x4a41b; jmp qword ptr [rsi + 0x2e]; 
0x000000000044bfa4: ja 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044c730: ja 0x4c754; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d4cc: ja 0x4d4a0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044d455: ja 0x4d4a0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000459e5a: ja 0x59f40; movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x000000000045a359: ja 0x5a4a0; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000045dd0a: ja 0x5dd24; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000405dfd: ja 0x5dd5; mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000465e42: ja 0x65e20; mov eax, r9d; ret; 
0x000000000046e915: ja 0x6e940; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000046ea79: ja 0x6ee30; lea rcx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046f0b0: ja 0x6f140; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046f1c4: ja 0x6f1f8; lea rdi, [rip + 0x34adf]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000046f22e: ja 0x6f570; lea rdx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473ab8: ja 0x73b02; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x0000000000474c78: ja 0x74cc2; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000474db2: ja 0x74d77; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x0000000000475566: ja 0x75598; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x00000000004755b8: ja 0x755f0; mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000047c090: ja 0x7d3e3; lea rcx, [rip + 0x28c63]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000047d754: ja 0x7d758; add byte ptr [rax + 0x15], bh; syscall; 
0x0000000000482dee: ja 0x82e39; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004848d9: ja 0x848fe; add byte ptr [rax - 0x77], cl; add eax, 0x237785; add rsp, 8; ret; 
0x00000000004848f4: ja 0x84919; add byte ptr [rax - 0x77], cl; add eax, 0x23776a; ret; 
0x0000000000486768: ja 0x86750; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048837a: ja 0x88384; mov rdi, qword ptr [rdi]; call 0x8a6c0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048844e: ja 0x88458; mov rdi, qword ptr [rdi]; call 0x8a3c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048a965: ja 0x8a96a; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000048afb1: ja 0x8b861; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048bfff: ja 0x8c119; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000048c537: ja 0x8c119; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000048c904: ja 0x8c93d; mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x00000000004a4d09: ja 0xa4d08; jmp rbx; 
0x00000000004a4d15: ja 0xa4d14; call ptr [rax]; je 0xa4d18; call ptr [rax]; je 0xa4d1c; jmp rbx; 
0x00000000004a4d41: ja 0xa4d40; jmp qword ptr [rax]; 
0x00000000004a4d45: ja 0xa4d44; jmp rax; 
0x00000000004a9324: ja 0xa92a9; ret 0x48f; 
0x000000000040d2b1: ja 0xd935; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000416a07: jae 0x16a41; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000041874d: jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x0000000000423169: jae 0x2316c; add byte ptr [rax], al; lea rdx, [rip + 0x70bfc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424549: jae 0x24584; add al, byte ptr [rax]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000042bea5: jae 0x2c140; xor eax, eax; vzeroupper; ret; 
0x000000000042cbbd: jae 0x2cbc5; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042cc37: jae 0x2cc3f; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000435885: jae 0x35920; lea r11, [rip + 0x5f09e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000447c8e: jae 0x47ca3; cmp dl, 1; ja 0x47caa; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x00000000004494dd: jae 0x494e0; ret; 
0x000000000044a56d: jae 0x4a570; ret; 
0x000000000044a59d: jae 0x4a5a0; ret; 
0x000000000044a5cd: jae 0x4a5d0; ret; 
0x000000000044bc80: jae 0x4bc83; ret; 
0x000000000044bcad: jae 0x4bcb0; ret; 
0x000000000045acfe: jae 0x5ad40; xor eax, eax; pop rbx; ret; 
0x00000000004710b6: jae 0x7100b; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004754fd: jae 0x75500; ret; 
0x000000000047f8fb: jae 0x7f8a1; xor eax, eax; ret; 
0x000000000048521a: jae 0x85210; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x00000000004852e1: jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000488074: jae 0x88050; mov eax, 1; ret; 
0x000000000048852d: jae 0x88530; ret; 
0x00000000004963fd: jae 0x963fa; jmp qword ptr [rsi]; 
0x00000000004963f3: jae 0x9645a; add byte ptr [rax], al; add byte ptr [rax + 0x5efffb70], ch; jae 0x963fa; jmp qword ptr [rsi]; 
0x000000000049645d: jae 0x9645a; call rdi; 
0x000000000049647d: jae 0x9647a; call rax; 
0x00000000004964a5: jae 0x964a2; dec dword ptr [rdi]; jo 0x964a6; dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x00000000004a78e2: jae 0xa78bb; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004a877e: jae 0xa8753; push rsi; pop rdx; je 0xa8748; ret 0xacfc; 
0x00000000004acffa: jae 0xad006; ret; 
0x00000000004af6a9: jae 0xaf6a4; call qword ptr [rdi]; 
0x00000000004b130d: jae 0xb1309; call qword ptr [rdx]; 
0x00000000004b2ab5: jae 0xb2ab7; add byte ptr [rax - 5], cl; sti; call qword ptr [rsi + 1]; 
0x00000000004b3e0c: jae 0xb3e12; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x000000000041dbd7: jb 0x1dbb8; mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x000000000042437a: jb 0x2437c; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004384b7: jb 0x384cd; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004384e4: jb 0x384f5; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004384f8: jb 0x38506; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000438509: jb 0x3851b; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000043851e: jb 0x38524; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446c36: jb 0x46c46; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c49: jb 0x46c55; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446c62: jb 0x46c6e; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000446c75: jb 0x46c7d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446c80: jb 0x46c8a; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000446c8d: jb 0x46c91; mov byte ptr [rdi], cl; ret; 
0x0000000000446e94: jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446f16: jb 0x46f1d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446efb: jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447276: jb 0x4727d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447256: jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004476c6: jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004476a1: jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447c95: jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x0000000000447e03: jb 0x47e07; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447fcb: jb 0x47fcf; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000044bf9e: jb 0x4bfe0; cmp rcx, qword ptr [rax + 0x18]; ja 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000458dc7: jb 0x58dc5; jmp qword ptr [rsi + 0xf]; 
0x0000000000484b37: jb 0x84b35; jmp qword ptr [rsi + 0xf]; 
0x0000000000494bf8: jb 0x94c2a; cli; jmp rdx; 
0x0000000000496435: jb 0x96432; call qword ptr [rdi + 0x72]; 
0x0000000000410683: jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004107af: jbe 0x107f9; add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000413ab5: jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000413e3c: jbe 0x14020; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004164b4: jbe 0x16510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004165aa: jbe 0x165c0; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004166bb: jbe 0x16622; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041670b: jbe 0x167c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416933: jbe 0x169c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416ab1: jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b2a: jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000416c96: jbe 0x16ca8; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004178ba: jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000417951: jbe 0x17970; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000401814: jbe 0x1826; syscall; 
0x0000000000418696: jbe 0x186ce; add eax, dword ptr [rax]; add rsp, 0x80; mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x0000000000424722: jbe 0x2474d; add byte ptr [rdx], al; lea rdx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x0000000000424743: jbe 0x2476e; add byte ptr [rdx], al; lea rdx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000428937: jbe 0x28944; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a097: jbe 0x2a0a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b077: jbe 0x2b084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b11f: jbe 0x2b3c0; add rax, rdi; add rax, rcx; ret; 
0x000000000042b386: jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b396: jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b3a6: jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3b6: jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b7d7: jbe 0x2b830; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000042b7f7: jbe 0x2b830; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000042b817: jbe 0x2b830; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c7: jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x000000000042c923: jbe 0x2c92b; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000044fae6: jbe 0x4faed; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000455f22: jbe 0x55f1a; ret; 
0x000000000045cee8: jbe 0x5cf00; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000045deb7: jbe 0x5f4d5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e976: jbe 0x5f4ed; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e632: jbe 0x5f551; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045e45d: jbe 0x5f569; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004620b6: jbe 0x620bf; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000046a1aa: jbe 0x6af20; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046cd19: jbe 0x6e0e0; mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000470d0a: jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000470ea8: jbe 0x70ece; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471058: jbe 0x71082; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471761: jbe 0x7178b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004719d3: jbe 0x719f4; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000471aef: jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471b89: jbe 0x71ba0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471c70: jbe 0x71c96; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000473ad7: jbe 0x73b30; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000473af7: jbe 0x73b30; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000473b17: jbe 0x73b30; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000473ab7: jbe 0x73b30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000474c77: jbe 0x74cf0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000480ea8: jbe 0x80e90; cmp r8d, eax; je 0x80df6; sub eax, r8d; ret; 
0x00000000004825b6: jbe 0x82550; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000048e069: jbe 0x8e080; cmp dil, 0x30; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eec9: jbe 0x8eee0; cmp dil, 0x30; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x0000000000490ee6: jbe 0x90ed9; clc; push rbx; ret; 
0x00000000004a4d29: jbe 0xa4d28; jmp rbx; 
0x00000000004a4d49: jbe 0xa4d48; jmp rbx; 
0x00000000004a4d81: jbe 0xa4d80; call qword ptr [rax]; 
0x00000000004a4d81: jbe 0xa4d80; call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x00000000004a7b99: jbe 0xa7bce; movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000040f288: jbe 0xf2a0; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000040ff75: jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000040118b: je 0x11b1; adc byte ptr [rbx + 0x480c247c], cl; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000411c4d: je 0x11bbe; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000411bbc: je 0x11c28; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004122fd: je 0x12323; cmp byte ptr [rax + 0x29], cl; ret; 
0x0000000000401558: je 0x162b; add rsp, 0x98; ret; 
0x000000000041667b: je 0x165f8; mov eax, 0xffffffff; ret; 
0x00000000004165d2: je 0x165f8; or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041686b: je 0x167e8; mov eax, 0xffffffff; ret; 
0x00000000004178c5: je 0x178ca; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004179a7: je 0x179b8; cmp rsi, rcx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x0000000000418744: je 0x18758; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x0000000000418785: je 0x18798; xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x0000000000418f63: je 0x18f63; dec dword ptr [rax - 0x77]; ret; 
0x000000000041965e: je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x0000000000419654: je 0x196b2; mov eax, dword ptr [rip + 0x2a2714]; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x000000000041c946: je 0x1c96c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000422842: je 0x22868; sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000422d33: je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x0000000000422d2e: je 0x22d58; test rax, rax; je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x0000000000424437: je 0x24458; test byte ptr [rip + 0x2979bd], 2; lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x00000000004244f1: je 0x24510; test eax, eax; lea rdx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x00000000004246d7: je 0x246f8; test byte ptr [rip + 0x29771d], 2; lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x0000000000425c39: je 0x25c50; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425e69: je 0x25d05; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042b05a: je 0x2b05d; xchg edx, eax; sub eax, edx; ret; 
0x000000000042b28c: je 0x2b2dd; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042b32e: je 0x2b37f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000042b428: je 0x2b440; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042b56a: je 0x2b5bb; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042b8e3: je 0x2b900; tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x000000000042bee1: je 0x2befa; vpmovmskb eax, ymm2; sub eax, -1; jne 0x2bef0; vzeroupper; ret; 
0x000000000042bf35: je 0x2bf40; sbb eax, eax; or eax, 1; ret; 
0x000000000042bfd9: je 0x2bfac; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x000000000042c017: je 0x2c030; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x000000000042c126: je 0x2c13f; vpmovmskb eax, ymm2; sub eax, -1; jne 0x2bef0; vzeroupper; ret; 
0x000000000042cb2e: je 0x2cb36; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042d557: je 0x2d55b; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000440301: je 0x40310; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x0000000000440771: je 0x40790; tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x000000000044091c: je 0x408fe; pmovmskb edx, xmm4; test edx, edx; je 0x4092a; bsf eax, edx; ret; 
0x0000000000440924: je 0x4092a; bsf eax, edx; ret; 
0x00000000004409cd: je 0x409e0; bsf rax, rdx; ret; 
0x000000000044096c: je 0x409f0; bsf rax, rdx; ret; 
0x000000000040040e: je 0x412; call rax; 
0x000000000040040e: je 0x412; call rax; add rsp, 8; ret; 
0x0000000000446b34: je 0x46b10; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000446e8b: je 0x46e98; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446fa3: je 0x46fbc; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x00000000004477b8: je 0x477d1; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x000000000044814d: je 0x48072; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004480fd: je 0x48072; mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000044864e: je 0x48658; xor eax, eax; ret; 
0x0000000000448649: je 0x48660; cmp eax, 2; je 0x48658; xor eax, eax; ret; 
0x0000000000448ac5: je 0x48acb; add dword ptr [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044902e: je 0x4902b; dec dword ptr [rax - 0x77]; ret; 
0x000000000044973e: je 0x49770; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000449ad8: je 0x49b00; mov eax, 0x48; syscall; 
0x0000000000449ca3: je 0x49c4d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000449e97: je 0x49ebd; adc byte ptr [rdi], cl; xchg esp, eax; ret 0x2044; 
0x000000000044bd89: je 0x4bd8c; ret; 
0x000000000044bded: je 0x4bdf0; ret; 
0x000000000044c009: je 0x4c030; xor esi, esi; lea rdi, [rip + 0x49b11]; mov eax, 0x15; syscall; 
0x000000000044c63c: je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000044c637: je 0x4c648; test rdx, rdx; je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x000000000044d384: je 0x4d390; mov dword ptr [rip + 0x26b72c], edx; pop rbx; ret; 
0x0000000000450d6c: je 0x50d92; sub byte ptr [rax - 0x75], cl; jl 0x50d97; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000451191: je 0x511b7; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000451485: je 0x514ab; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000452b1e: je 0x52b44; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x00000000004530d3: je 0x530f9; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000454105: je 0x5412b; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455e62: je 0x55e88; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004570a2: je 0x570c8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045874a: je 0x58759; call 0x81ca0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000045906a: je 0x5906e; call rsi; 
0x0000000000459166: je 0x5916a; call rax; 
0x00000000004059ce: je 0x59d6; add dword ptr [rax - 9], ecx; ror byte ptr [rax + 1], 1; ret; 
0x000000000045a56b: je 0x5a56f; call rax; 
0x0000000000465e39: je 0x65e50; movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x65e20; mov eax, r9d; ret; 
0x0000000000468c8c: je 0x68cb2; and byte ptr [rax + 1], cl; ret; 
0x000000000046c3a8: je 0x6c353; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046eeee: je 0x6ea68; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000046f58e: je 0x6f21d; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000470a66: je 0x70ab0; add esp, 0x20; pop rbx; ret; 
0x0000000000470f2d: je 0x70f40; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047112d: je 0x71140; mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004718d9: je 0x718e0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000471913: je 0x71970; pop rbp; pop r12; ret; 
0x000000000047199f: je 0x719fc; pop rbp; pop r12; ret; 
0x0000000000471afa: je 0x71aff; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000471b2a: je 0x71b50; or al, 0xeb; ret 0x5590; 
0x0000000000471b56: je 0x71b5b; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000471be7: je 0x71bf8; cmp rcx, rsi; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x0000000000473230: je 0x733f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004734b4: je 0x733f0; bsr rax, rsi; add rax, rdi; ret; 
0x00000000004732be: je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000047364f: je 0x73604; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000473674: je 0x73690; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004737a4: je 0x737b3; sar rdx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x00000000004737ac: je 0x737d0; bsf rax, rdx; ret; 
0x000000000047373c: je 0x737e0; bsf rax, rdx; ret; 
0x000000000047422e: je 0x74254; sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x000000000047446c: je 0x74490; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000474400: je 0x744a0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004747f9: je 0x74810; mov cl, dl; and cl, 0xf; je 0x74820; ret; 
0x0000000000474800: je 0x74820; ret; 
0x0000000000474815: je 0x74830; add rax, 2; ret; 
0x000000000047563d: je 0x75678; mov eax, dword ptr [rip + 0x2471c7]; test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x00000000004756cb: je 0x756f1; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000047575d: je 0x75788; mov eax, 0x101; syscall; 
0x0000000000475cd2: je 0x75dc8; xor eax, eax; leave; ret; 
0x000000000047ba88: je 0x7baa0; sub rsp, 8; call qword ptr [rip + 0x23e78c]; xor eax, eax; add rsp, 8; ret; 
0x000000000047e6d6: je 0x7e6db; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000047f175: je 0x7f178; lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f4c2: je 0x7f4e8; and byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret; 
0x0000000000480ead: je 0x80df6; sub eax, r8d; ret; 
0x00000000004826b5: je 0x826a0; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000048452a: je 0x84514; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004848d3: je 0x848e3; lea rax, [rip + 0x2377a4]; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x0000000000484d33: je 0x84d3f; lea rdx, [rip + 0x235e24]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fe2: je 0x84ff0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004854e8: je 0x8550e; or byte ptr [rax + 1], cl; ret; 
0x00000000004867b3: je 0x8671f; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000486c2c: je 0x86c38; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000487b20: je 0x87b30; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048aaed: je 0x8ab13; adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000048aee3: je 0x8aeeb; cmp dil, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048aecb: je 0x8aeeb; cmp dil, 0x30; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048afad: je 0x8b010; cmp al, 0x2f; ja 0x8b861; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048d088: je 0x8d06c; add rsp, 0x18; ret; 
0x000000000048d071: je 0x8d090; add rsp, 0x18; ret; 
0x000000000048d14f: je 0x8d160; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000048d159: je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000048d1f3: je 0x8d200; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000048db47: je 0x8db58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000048defb: je 0x8df10; xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048e083: je 0x8e08b; cmp dil, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048e067: je 0x8e090; jbe 0x8e080; cmp dil, 0x30; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eee3: je 0x8eeeb; cmp dil, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048eec7: je 0x8eef0; jbe 0x8eee0; cmp dil, 0x30; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048f953: je 0x8f95b; cmp dil, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x0000000000490cf3: je 0x90cfc; call rax; 
0x0000000000490cea: je 0x90d01; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x0000000000490f47: je 0x90f31; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000495778: je 0x957b7; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004957e8: je 0x95827; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004957f0: je 0x9582f; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495844: je 0x95883; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495938: je 0x95977; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004a4d05: je 0xa4d04; call rax; 
0x00000000004a4d05: je 0xa4d04; call rax; ja 0xa4d08; jmp rbx; 
0x00000000004a4d19: je 0xa4d18; call ptr [rax]; je 0xa4d1c; jmp rbx; 
0x00000000004a4d1d: je 0xa4d1c; jmp rbx; 
0x00000000004a4d85: je 0xa4d84; jmp rbx; 
0x00000000004a7a48: je 0xa7a0f; xor al, 0xd8; ret; 
0x00000000004a8782: je 0xa8748; ret 0xacfc; 
0x0000000000400a99: je 0xaa8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400adb: je 0xae8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x00000000004af94c: je 0xaf8d3; stc; call qword ptr [rcx + 1]; 
0x00000000004b138d: je 0xb1389; jmp rax; 
0x00000000004b199c: je 0xb194e; cli; call qword ptr [rdx]; 
0x00000000004b2b35: je 0xb2b37; add al, cl; cld; sti; jmp qword ptr [rsi]; 
0x0000000000416a42: jg 0x16a7c; add byte ptr [rcx + rcx - 0xd], dh; ret; 
0x000000000042dc4e: jg 0x2dc9f; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dded: jg 0x2ddef; add rsi, rdx; lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de8e: jg 0x2de90; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df3d: jg 0x2df3f; add rsi, rdx; lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfde: jg 0x2dfe0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e08d: jg 0x2e08f; add rsi, rdx; lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e12e: jg 0x2e130; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1dd: jg 0x2e1df; add rsi, rdx; lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e27e: jg 0x2e280; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e32d: jg 0x2e32f; add rsi, rdx; lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3ce: jg 0x2e3d0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e47d: jg 0x2e47f; add rsi, rdx; lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e51e: jg 0x2e520; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5cd: jg 0x2e5cf; add rsi, rdx; lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e66e: jg 0x2e670; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e725: jg 0x2e727; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7be: jg 0x2e7c0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e86d: jg 0x2e86f; add rsi, rdx; lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e90e: jg 0x2e910; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9bd: jg 0x2e9bf; add rsi, rdx; lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea5e: jg 0x2ea60; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb0d: jg 0x2eb0f; add rsi, rdx; lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebae: jg 0x2ebb0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec5d: jg 0x2ec5f; add rsi, rdx; lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecfe: jg 0x2ed00; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edad: jg 0x2edaf; add rsi, rdx; lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee4e: jg 0x2ee50; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eefd: jg 0x2eeff; add rsi, rdx; lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef9e: jg 0x2efa0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f04d: jg 0x2f04f; add rsi, rdx; lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0ee: jg 0x2f0f0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042fa59: jg 0x2faaa; ret; 
0x000000000042fadf: jg 0x2fb28; ret; 
0x000000000042fc59: jg 0x2fcaa; ret 0x894c; 
0x000000000042fcdf: jg 0x2fd28; ret 0x894c; 
0x000000000043061e: jg 0x3066f; ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307bd: jg 0x307bf; add rsi, rdx; lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043085e: jg 0x30860; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043090d: jg 0x3090f; add rsi, rdx; lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309ae: jg 0x309b0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a5d: jg 0x30a5f; add rsi, rdx; lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430afe: jg 0x30b00; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bad: jg 0x30baf; add rsi, rdx; lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c4e: jg 0x30c50; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cfd: jg 0x30cff; add rsi, rdx; lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e4d: jg 0x30e4f; add rsi, rdx; lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430eee: jg 0x30ef0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f9d: jg 0x30f9f; add rsi, rdx; lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043103e: jg 0x31040; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f5: jg 0x310f7; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043118e: jg 0x31190; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043123d: jg 0x3123f; add rsi, rdx; lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312de: jg 0x312e0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043138d: jg 0x3138f; add rsi, rdx; lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043142e: jg 0x31430; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314dd: jg 0x314df; add rsi, rdx; lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043157e: jg 0x31580; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043162d: jg 0x3162f; add rsi, rdx; lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043177d: jg 0x3177f; add rsi, rdx; lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043181e: jg 0x31820; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318cd: jg 0x318cf; add rsi, rdx; lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a1d: jg 0x31a1f; add rsi, rdx; lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431abe: jg 0x31ac0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432429: jg 0x3247a; ret; 
0x00000000004324af: jg 0x324f8; ret; 
0x0000000000432629: jg 0x3267a; ret 0x894c; 
0x00000000004326af: jg 0x326f8; ret 0x894c; 
0x0000000000432d4e: jg 0x32d10; sub rdx, 0x40; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434a18: jg 0x34a61; loope 0x34a0f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434a8f: jg 0x34ad8; ret 0xff2; 
0x0000000000434b1f: jg 0x34b68; ret; 
0x0000000000434bc8: jg 0x34c11; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434c48: jg 0x34c91; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434cc8: jg 0x34d11; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434d48: jg 0x34d91; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434fc8: jg 0x35011; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435048: jg 0x35091; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350d8: jg 0x35121; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435158: jg 0x351a1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004351cc: jg 0x351d5; ret; 
0x0000000000435226: jg 0x35237; ret; 
0x0000000000435221: jg 0x3526a; psllq mm1, qword ptr [rdi]; jg 0x35237; ret; 
0x0000000000435296: jg 0x352a7; ret; 
0x0000000000435306: jg 0x35317; ret; 
0x00000000004352f3: jg 0x3533c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435301: jg 0x3534a; or eax, 0xf7f0ff3; ret; 
0x0000000000435376: jg 0x35387; ret; 
0x0000000000435371: jg 0x353ba; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004353e6: jg 0x353f7; ret; 
0x00000000004353e1: jg 0x3542a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000435456: jg 0x35467; ret; 
0x0000000000435451: jg 0x3549a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000004354c6: jg 0x354d7; ret; 
0x00000000004354c1: jg 0x3550a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000435536: jg 0x35547; ret; 
0x0000000000435531: jg 0x3557a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004355a6: jg 0x355b7; ret; 
0x0000000000435616: jg 0x35627; ret; 
0x0000000000435686: jg 0x35697; ret; 
0x0000000000435673: jg 0x356bc; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435681: jg 0x356ca; add eax, 0xf7f0ff3; ret; 
0x00000000004356f6: jg 0x35707; ret; 
0x00000000004356f1: jg 0x3573a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000435766: jg 0x35777; ret; 
0x0000000000435761: jg 0x357aa; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004357d6: jg 0x357e7; ret; 
0x00000000004357d1: jg 0x3581a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000435846: jg 0x35857; ret; 
0x0000000000435841: jg 0x3588a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000437538: jg 0x37581; loope 0x3752f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004375af: jg 0x375f8; ret 0xff2; 
0x000000000043763f: jg 0x37688; ret; 
0x00000000004376e8: jg 0x37731; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000437768: jg 0x377b1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004377e8: jg 0x37831; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000437868: jg 0x378b1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000437ae8: jg 0x37b31; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437b68: jg 0x37bb1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437bf8: jg 0x37c41; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437c78: jg 0x37cc1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437cec: jg 0x37cf5; ret; 
0x0000000000437d46: jg 0x37d57; ret; 
0x0000000000437d41: jg 0x37d8a; psllq mm1, qword ptr [rdi]; jg 0x37d57; ret; 
0x0000000000437db6: jg 0x37dc7; ret; 
0x0000000000437e26: jg 0x37e37; ret; 
0x0000000000437e13: jg 0x37e5c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000437e21: jg 0x37e6a; or eax, 0xf7f0ff3; ret; 
0x0000000000437e96: jg 0x37ea7; ret; 
0x0000000000437e91: jg 0x37eda; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000437f06: jg 0x37f17; ret; 
0x0000000000437f01: jg 0x37f4a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000437f76: jg 0x37f87; ret; 
0x0000000000437f71: jg 0x37fba; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000437fe6: jg 0x37ff7; ret; 
0x0000000000437fe1: jg 0x3802a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000438056: jg 0x38067; ret; 
0x0000000000438051: jg 0x3809a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004380c6: jg 0x380d7; ret; 
0x0000000000438136: jg 0x38147; ret; 
0x00000000004381a6: jg 0x381b7; ret; 
0x0000000000438193: jg 0x381dc; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004381a1: jg 0x381ea; add eax, 0xf7f0ff3; ret; 
0x0000000000438216: jg 0x38227; ret; 
0x0000000000438211: jg 0x3825a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000438286: jg 0x38297; ret; 
0x0000000000438281: jg 0x382ca; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004382f6: jg 0x38307; ret; 
0x00000000004382f1: jg 0x3833a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000438366: jg 0x38377; ret; 
0x0000000000438361: jg 0x383aa; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004384a0: jg 0x384a9; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004384c4: jg 0x384cd; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004384d8: jg 0x384e1; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043894a: jg 0x38944; ret; 
0x00000000004441f6: jg 0x441ff; ret; 
0x0000000000444206: jg 0x4420f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044421a: jg 0x44223; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000444239: jg 0x44242; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444249: jg 0x44252; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444259: jg 0x44262; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044427a: jg 0x44283; mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044429a: jg 0x442a3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004442ba: jg 0x442c3; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004442da: jg 0x442e3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442fe: jg 0x44307; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044431d: jg 0x44326; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044433d: jg 0x44346; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044435b: jg 0x44364; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044437b: jg 0x44384; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000044439b: jg 0x443a4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004443bb: jg 0x443c4; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444886: jg 0x4488f; lea rax, [rdi + 0xf]; ret; 
0x0000000000444896: jg 0x4489f; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004448aa: jg 0x448b3; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x00000000004448c9: jg 0x448d2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x00000000004448e9: jg 0x448f2; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444909: jg 0x44912; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044492a: jg 0x44933; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044494a: jg 0x44953; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044496a: jg 0x44973; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044498a: jg 0x44993; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004449ae: jg 0x449b7; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004449cd: jg 0x449d6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x00000000004449ed: jg 0x449f6; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444a0b: jg 0x44a14; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444a2b: jg 0x44a34; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444a4b: jg 0x44a54; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000444a0f: jg 0x44a68; or eax, 0x1c478d48; ret; 
0x0000000000444a6b: jg 0x44a74; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x0000000000446c57: jg 0x46c60; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000446c4d: jg 0x46c66; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004470e4: jg 0x47116; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004471b2: jg 0x471e4; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004471f3: jg 0x471fc; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044722f: jg 0x47238; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044728a: jg 0x47293; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447356: jg 0x4735f; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x000000000044741b: jg 0x47440; vzeroupper; ret; 
0x0000000000447415: jg 0x47458; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447410: jg 0x4748b; rol ch, 0x7e; jg 0x47458; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000004474c2: jg 0x474c7; vzeroupper; ret; 
0x00000000004474bd: jg 0x4751f; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x000000000044754e: jg 0x47573; vzeroupper; ret; 
0x0000000000447548: jg 0x4758b; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447543: jg 0x475be; rol ch, 0x7e; jg 0x4758b; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x00000000004475de: jg 0x475e3; vzeroupper; ret; 
0x000000000044762c: jg 0x47635; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000004475d9: jg 0x4763b; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000447678: jg 0x47681; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000004476da: jg 0x476e3; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004476f2: jg 0x476fb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004477e8: jg 0x477f1; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x00000000004478d6: jg 0x478fb; vzeroupper; ret; 
0x00000000004478cf: jg 0x47912; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000004478c1: jg 0x47934; jmp qword ptr [rdx - 0xf]; 
0x0000000000447996: jg 0x4799b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x000000000044799c: jg 0x479a1; vzeroupper; ret; 
0x000000000044795c: jg 0x479a7; jmp qword ptr [rdx - 0x2f]; 
0x0000000000447a6f: jg 0x47a94; vzeroupper; ret; 
0x0000000000447a68: jg 0x47aab; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447a5a: jg 0x47acd; jmp qword ptr [rdx - 0xf]; 
0x0000000000447b3c: jg 0x47b41; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447b42: jg 0x47b47; vzeroupper; ret; 
0x0000000000447bac: jg 0x47bb5; ret; 
0x0000000000447bfc: jg 0x47c05; ret; 
0x0000000000447c10: jg 0x47c19; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447c14: jg 0x47c5d; adc bl, dh; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447d04: jg 0x47d0d; vzeroupper; ret; 
0x0000000000447d54: jg 0x47d5d; vzeroupper; ret; 
0x0000000000447d6e: jg 0x47d77; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000447e13: jg 0x47e1c; vzeroupper; ret; 
0x0000000000447e91: jg 0x47e9a; vzeroupper; ret; 
0x0000000000447ef1: jg 0x47efa; vzeroupper; ret; 
0x0000000000447f0d: jg 0x47f16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000447fdb: jg 0x47fe4; vzeroupper; ret; 
0x0000000000447fe9: jg 0x47ff2; vzeroupper; ret; 
0x0000000000448040: jg 0x4807b; ret 0x2b77; 
0x00000000004481b7: jg 0x481b0; int1; mov eax, eax; ret; 
0x000000000044bfd2: jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000454038: jg 0x53fc3; ret 0xdb76; 
0x000000000045f032: jg 0x5f043; test byte ptr [rip - 0x7c000011], al; ret; 
0x0000000000469602: jg 0x69613; test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000046aa7a: jg 0x6aa8b; test byte ptr [rbp - 0x7c000018], bl; ret; 
0x000000000046ab77: jg 0x6ab88; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000482675: jg 0x8269f; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000484529: jg 0x8459f; call 0x847f7; add byte ptr [rax], al; mov eax, 1; ret; 
0x000000000048a932: jg 0x8a934; add byte ptr [rcx + 0x7fffe1], al; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000048a938: jg 0x8a93a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000042bea2: jge 0x2bebb; call 0x29841b8; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000042c1da: jge 0x2c1e2; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043acff: jge 0x3acd7; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9ff: jge 0x3e99a; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044466f: jge 0x4467a; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000447af9: jge 0x47b43; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x0000000000477f00: jge 0x77f11; test dword ptr [rcx], esp; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000487772: jge 0x877bc; cmp dword ptr [rip + 0x2317fd], 0; jne 0x8777f; pop rbx; ret; 
0x000000000048c901: jge 0x8c90b; add eax, 0x458b3777; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x000000000048d4d2: jge 0x8d4cc; leave; ret; 
0x000000000048d650: jge 0x8d64a; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d79c: jge 0x8d796; leave; ret; 
0x000000000048d7e8: jge 0x8d7e2; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d977: jge 0x8d971; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048dad7: jge 0x8dad1; leave; ret; 
0x000000000048db28: jge 0x8db22; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048def8: jge 0x8df03; jp 0x8df70; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000400b8d: jge 0xb8b; adc dword ptr [rsi - 0x24], edi; nop; pop rbp; ret; 
0x000000000040df6a: jge 0xdf6c; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040118f: jl 0x11b5; or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004015b1: jl 0x15d7; sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000416f12: jl 0x16f29; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041e95b: jl 0x1e953; ret 0x7508; 
0x0000000000423fe0: jl 0x23fa6; std; dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret; 
0x000000000042c2e9: jl 0x2c2f1; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000043842f: jl 0x38479; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438436: jl 0x38480; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043843d: jl 0x38487; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438444: jl 0x3848e; adc dword ptr [rcx - 1], edi; ret; 
0x000000000043846c: jl 0x384b6; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438472: jl 0x384bc; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438479: jl 0x384c3; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438480: jl 0x384ca; adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000438669: jl 0x386b3; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438670: jl 0x386ba; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438677: jl 0x386c1; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043867e: jl 0x386c8; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004387d7: jl 0x38821; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387de: jl 0x38828; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387e5: jl 0x3882f; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000438932: jl 0x3897c; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438939: jl 0x38983; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438940: jl 0x3898a; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438947: jl 0x38991; adc dword ptr [rdi - 8], edi; ret; 
0x0000000000446bf7: jl 0x46c41; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446bfe: jl 0x46c48; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c05: jl 0x46c4f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c0c: jl 0x46c56; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446c19: jl 0x46c63; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c1f: jl 0x46c69; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c26: jl 0x46c70; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c2d: jl 0x46c77; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446c3a: jl 0x46c84; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c40: jl 0x46c8a; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d00: jl 0x46d4a; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d07: jl 0x46d51; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d0e: jl 0x46d58; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d15: jl 0x46d5f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d59: jl 0x46da3; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d5f: jl 0x46da9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d66: jl 0x46db0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d6d: jl 0x46db7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446dfc: jl 0x46e46; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e03: jl 0x46e4d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e0a: jl 0x46e54; adc dword ptr [rsi + 7], edx; ret; 
0x00000000004477c0: jl 0x477d9; cld; vzeroupper; ret; 
0x000000000044a7a2: jl 0x4a7c8; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000404aa6: jl 0x4acc; sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000044bfcc: jl 0x4bfb6; cmp rcx, qword ptr [rax + 0x18]; jg 0x4bfb6; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000450d71: jl 0x50d97; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000451196: jl 0x511bc; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x00000000004530d8: jl 0x530fe; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045410a: jl 0x54130; cmp byte ptr [rax - 0x75], cl; and al, 0x18; call rax; 
0x0000000000455f1d: jl 0x55f43; add byte ptr [rsi + rsi*2 - 0xa], sil; ret; 
0x000000000045664d: jl 0x56673; or al, 0xe9; ret; 
0x000000000045715d: jl 0x57183; add byte ptr [rdx + rdi*2 - 0xa], sil; ret; 
0x0000000000458ec2: jl 0x58ee8; sbb al, ch; xchg esi, eax; jno 0x58ec5; jmp qword ptr [rsi + 0xf]; 
0x000000000045a27b: jl 0x5a2a1; cmovns eax, dword ptr [rbx + 0x149f0e7]; ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x000000000045b147: jl 0x5b16d; and byte ptr [rax + 1], cl; ret; 
0x000000000045b5be: jl 0x5b5e4; or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000045b906: jl 0x5b92c; xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x00000000004672cb: jl 0x672f1; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret; 
0x00000000004689b5: jl 0x689db; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000469f14: jl 0x69f0f; jmp qword ptr [rsi + 0xf]; 
0x00000000004756cf: jl 0x756f5; sbb byte ptr [rax + 0x101], bh; syscall; 
0x0000000000478ad7: jl 0x78afd; cmovs eax, dword ptr [rbx + 0x55e8f0e7]; jns 0x78ada; dec dword ptr [rax - 0x77]; ret; 
0x000000000047b565: jl 0x7b58b; or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x0000000000482555: jl 0x8257b; sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x0000000000489df3: jl 0x89d80; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000489f34: jl 0x89f2d; jmp qword ptr [rsi + 0xf]; 
0x000000000048a6b0: jl 0x8a6c9; cld; jmp qword ptr [rsi - 0x70]; 
0x00000000004b1998: jl 0xb19fc; add byte ptr [rax], al; je 0xb194e; cli; call qword ptr [rdx]; 
0x00000000004b336d: jl 0xb336f; add byte ptr [rax + 0x2b], al; cld; call qword ptr [rax + 5]; 
0x000000000040d498: jl 0xd4be; or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x0000000000416bca: jle 0x16bcd; call qword ptr [rbx + 0x18]; 
0x000000000042bfd5: jle 0x2bfed; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x000000000044096e: jle 0x40970; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x0000000000446ae1: jle 0x46b18; movsxd rax, ecx; ret; 
0x0000000000446c70: jle 0x46c33; cmp dl, 4; jb 0x46c7d; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446ece: jle 0x46edf; adc byte ptr [rsi], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447414: jle 0x47495; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447547: jle 0x475c8; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000458762: jle 0x5876c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000463040: jle 0x62f36; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000475d77: jle 0x75d8d; jne 0x75daa; jne 0x75c85; mov eax, 1; leave; ret; 
0x00000000004a4e29: jle 0xa4e28; jmp qword ptr [rax + 0x7e]; 
0x00000000004a8d9a: jle 0xa8d35; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000400b90: jle 0xb6e; nop; pop rbp; ret; 
0x000000000040d2b3: jle 0xd2bb; add byte ptr [rax], al; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000494443: jmp qword ptr [rax + 0x12]; 
0x0000000000494b6f: jmp qword ptr [rax + 0x29]; 
0x000000000049511b: jmp qword ptr [rax + 0x30]; 
0x0000000000493eb3: jmp qword ptr [rax + 0x35]; 
0x0000000000494b53: jmp qword ptr [rax + 0x36]; 
0x0000000000493ebb: jmp qword ptr [rax + 0x38]; 
0x000000000049493b: jmp qword ptr [rax + 0x39]; 
0x0000000000493ec3: jmp qword ptr [rax + 0x3b]; 
0x0000000000493ecb: jmp qword ptr [rax + 0x3e]; 
0x0000000000493ed3: jmp qword ptr [rax + 0x41]; 
0x00000000004ab6bb: jmp qword ptr [rax + 0x43]; 
0x0000000000493edb: jmp qword ptr [rax + 0x44]; 
0x0000000000494e6b: jmp qword ptr [rax + 0x45]; 
0x0000000000493ee3: jmp qword ptr [rax + 0x47]; 
0x0000000000493ef3: jmp qword ptr [rax + 0x4d]; 
0x0000000000495eaf: jmp qword ptr [rax + 0x6a]; 
0x0000000000493f57: jmp qword ptr [rax + 0x6c]; 
0x00000000004964af: jmp qword ptr [rax + 0x74]; 
0x00000000004a4e2b: jmp qword ptr [rax + 0x7e]; 
0x000000000049465b: jmp qword ptr [rax + 0xf]; 
0x00000000004b4ca3: jmp qword ptr [rax + 1]; 
0x000000000049486b: jmp qword ptr [rax + 3]; 
0x00000000004942ab: jmp qword ptr [rax - 0x19]; 
0x000000000049434b: jmp qword ptr [rax - 0x1a]; 
0x00000000004942a7: jmp qword ptr [rax - 0x1b]; 
0x0000000000494347: jmp qword ptr [rax - 0x1c]; 
0x00000000004942a3: jmp qword ptr [rax - 0x1d]; 
0x0000000000494343: jmp qword ptr [rax - 0x1e]; 
0x00000000004942f3: jmp qword ptr [rax - 0x25]; 
0x000000000049441f: jmp qword ptr [rax - 0x2e]; 
0x00000000004943cb: jmp qword ptr [rax - 0x35]; 
0x00000000004940df: jmp qword ptr [rax - 0x47]; 
0x00000000004940fb: jmp qword ptr [rax - 0x49]; 
0x000000000049419b: jmp qword ptr [rax - 0x4a]; 
0x0000000000494117: jmp qword ptr [rax - 0x4b]; 
0x00000000004941b3: jmp qword ptr [rax - 0x4e]; 
0x000000000049414f: jmp qword ptr [rax - 0x4f]; 
0x00000000004941cf: jmp qword ptr [rax - 0x50]; 
0x0000000000494253: jmp qword ptr [rax - 0x5a]; 
0x00000000004941ff: jmp qword ptr [rax - 0x61]; 
0x0000000000494f33: jmp qword ptr [rax - 0x62]; 
0x000000000049409f: jmp qword ptr [rax - 0x6b]; 
0x0000000000494073: jmp qword ptr [rax - 0x72]; 
0x0000000000494fcf: jmp qword ptr [rax - 0xd]; 
0x0000000000494fa3: jmp qword ptr [rax - 0xe]; 
0x0000000000492673: jmp qword ptr [rax - 4]; 
0x0000000000494ffb: jmp qword ptr [rax - 9]; 
0x000000000040e371: jmp qword ptr [rax]; 
0x00000000004231fd: jmp qword ptr [rbp + 0x29]; 
0x00000000004ab793: jmp qword ptr [rbp + 2]; 
0x00000000004b484b: jmp qword ptr [rbp]; 
0x00000000004af67b: jmp qword ptr [rbx + 0x17]; 
0x00000000004b41cf: jmp qword ptr [rbx + 1]; 
0x00000000004af243: jmp qword ptr [rbx + 2]; 
0x00000000004b2103: jmp qword ptr [rbx + 8]; 
0x00000000004a6466: jmp qword ptr [rbx - 0x40]; 
0x0000000000478f17: jmp qword ptr [rbx]; 
0x0000000000495143: jmp qword ptr [rcx + 0x30]; 
0x00000000004b3743: jmp qword ptr [rcx + 0xe]; 
0x00000000004ac41b: jmp qword ptr [rcx + 1]; 
0x00000000004ac237: jmp qword ptr [rcx + 2]; 
0x00000000004b51f3: jmp qword ptr [rcx + 9]; 
0x00000000004a6dc3: jmp qword ptr [rcx - 0x69]; 
0x000000000049260f: jmp qword ptr [rcx - 6]; 
0x000000000049288b: jmp qword ptr [rcx]; 
0x00000000004b0f33: jmp qword ptr [rdi + 0x11]; 
0x00000000004af3c7: jmp qword ptr [rdi + 0x2b]; 
0x0000000000495123: jmp qword ptr [rdi + 0x30]; 
0x000000000047e94b: jmp qword ptr [rdi + 0x6d]; 
0x0000000000465606: jmp qword ptr [rdi + 0x74]; 
0x0000000000465988: jmp qword ptr [rdi + 0x75]; 
0x00000000004ad6d7: jmp qword ptr [rdi + 2]; 
0x00000000004af64b: jmp qword ptr [rdi + 6]; 
0x0000000000495163: jmp qword ptr [rdi]; 
0x0000000000494c1f: jmp qword ptr [rdx + 0x2b]; 
0x0000000000494c17: jmp qword ptr [rdx + 0x2c]; 
0x0000000000494c0f: jmp qword ptr [rdx + 0x2d]; 
0x0000000000494c07: jmp qword ptr [rdx + 0x2e]; 
0x0000000000494bff: jmp qword ptr [rdx + 0x2f]; 
0x0000000000494a27: jmp qword ptr [rdx + 0x34]; 
0x00000000004abdd7: jmp qword ptr [rdx + 0x36]; 
0x00000000004387b2: jmp qword ptr [rdx + 0x51]; 
0x0000000000438913: jmp qword ptr [rdx + 0x71]; 
0x00000000004b566b: jmp qword ptr [rdx + 1]; 
0x00000000004b453f: jmp qword ptr [rdx + 5]; 
0x00000000004388cb: jmp qword ptr [rdx - 0x2f]; 
0x00000000004a6e10: jmp qword ptr [rdx - 0x71]; 
0x00000000004a8f33: jmp qword ptr [rdx - 0x78]; 
0x0000000000438411: jmp qword ptr [rdx - 0xf]; 
0x000000000049451f: jmp qword ptr [rdx]; 
0x000000000049448b: jmp qword ptr [rsi + 0x11]; 
0x00000000004018e4: jmp qword ptr [rsi + 0x2e]; 
0x0000000000494983: jmp qword ptr [rsi + 0x38]; 
0x0000000000458387: jmp qword ptr [rsi + 0x41]; 
0x0000000000446873: jmp qword ptr [rsi + 0x44]; 
0x00000000004330ef: jmp qword ptr [rsi + 0x45]; 
0x000000000047eb3f: jmp qword ptr [rsi + 0x48]; 
0x0000000000465622: jmp qword ptr [rsi + 0x75]; 
0x00000000004b111b: jmp qword ptr [rsi + 0xa]; 
0x0000000000401f26: jmp qword ptr [rsi + 0xf]; 
0x00000000004b3a03: jmp qword ptr [rsi + 5]; 
0x00000000004b3b23: jmp qword ptr [rsi + 7]; 
0x000000000048ebbf: jmp qword ptr [rsi - 0x3f]; 
0x000000000049402b: jmp qword ptr [rsi - 0x69]; 
0x000000000049400f: jmp qword ptr [rsi - 0x6d]; 
0x0000000000494007: jmp qword ptr [rsi - 0x6e]; 
0x0000000000493fff: jmp qword ptr [rsi - 0x6f]; 
0x00000000004015bd: jmp qword ptr [rsi - 0x70]; 
0x0000000000493ff7: jmp qword ptr [rsi - 0x71]; 
0x000000000046815c: jmp qword ptr [rsi - 0x7b]; 
0x000000000044a0b1: jmp qword ptr [rsi - 0x7d]; 
0x00000000004641fd: jmp qword ptr [rsi - 0x7f]; 
0x0000000000494023: jmp qword ptr [rsi]; 
0x0000000000400aa1: jmp rax; 
0x0000000000480021: jmp rbx; 
0x00000000004223b2: jmp rcx; 
0x000000000040d5ae: jmp rdi; 
0x000000000040d2c5: jmp rdx; 
0x0000000000459e67: jmp rsi; 
0x000000000046d44d: jmp rsp; 
0x00000000004107ae: jne 0x10826; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004111d4: jne 0x111dd; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000041183e: jne 0x118ed; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000401078: jne 0x1290; call qword ptr [rbx + 0x10]; 
0x00000000004132a8: jne 0x132b1; mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004160b7: jne 0x16176; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000416398: jne 0x163e4; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x00000000004175b9: jne 0x17866; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000417961: jne 0x1791f; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004179ac: jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x0000000000418303: jne 0x18310; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000418ecc: jne 0x18ecc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000419f20: jne 0x19f28; add rsp, 0x20; pop rbx; ret; 
0x0000000000422aaa: jne 0x22a2f; ret; 
0x0000000000422db7: jne 0x22da0; sub rax, 0x10; ret; 
0x00000000004245dd: jne 0x245cd; test byte ptr [rip + 0x297817], 2; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000425e9c: jne 0x25e80; xor eax, eax; sub eax, ecx; ret; 
0x000000000042b295: jne 0x2b370; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b337: jne 0x2b390; xor eax, eax; ret; 
0x000000000042b307: jne 0x2b3b0; xor eax, eax; ret; 
0x000000000042b573: jne 0x2b5c0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b7b3: jne 0x2b7d0; xor eax, eax; vzeroupper; ret; 
0x000000000042b776: jne 0x2b810; xor eax, eax; vzeroupper; ret; 
0x000000000042bfe4: jne 0x2bef0; ret; 
0x000000000042beea: jne 0x2bef0; vzeroupper; ret; 
0x000000000042d397: jne 0x2d7c3; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042ce3d: jne 0x2d7c3; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cd91: jne 0x2d7c3; xor eax, eax; ret; 
0x000000000042ce88: jne 0x2d7cf; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042cdb9: jne 0x2d7cf; xor eax, eax; ret; 
0x000000000042d08a: jne 0x2d7da; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf1d: jne 0x2d7f0; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x0000000000444c10: jne 0x44b00; lea rax, [rdi + 0xb]; ret; 
0x0000000000444bca: jne 0x44b00; lea rax, [rdi + 0xf]; ret; 
0x0000000000444b75: jne 0x44b00; lea rax, [rdi + 3]; ret; 
0x0000000000444b47: jne 0x44b00; lea rax, [rdi + 7]; ret; 
0x0000000000444af2: jne 0x44b04; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000444b6c: jne 0x44ce0; test dl, 4; jne 0x44b00; lea rax, [rdi + 3]; ret; 
0x0000000000444c4e: jne 0x44d10; test al, 0x40; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x0000000000444c56: jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x0000000000444b3e: jne 0x44d20; test dl, 0x40; jne 0x44b00; lea rax, [rdi + 7]; ret; 
0x0000000000444c07: jne 0x44d50; test dh, 4; jne 0x44b00; lea rax, [rdi + 0xb]; ret; 
0x0000000000444ca0: jne 0x44d80; test ah, 0x40; jne 0x44d90; lea rax, [rdi + 0xf]; ret; 
0x0000000000444ca9: jne 0x44d90; lea rax, [rdi + 0xf]; ret; 
0x0000000000444bc1: jne 0x44d90; test dh, 0x40; jne 0x44b00; lea rax, [rdi + 0xf]; ret; 
0x0000000000445fa5: jne 0x46020; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000004462d4: jne 0x464e0; xor eax, eax; ret; 
0x0000000000446434: jne 0x464f5; cmp eax, ecx; jne 0x464f5; xor eax, eax; ret; 
0x00000000004464f1: jne 0x464f5; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x00000000004464d0: jne 0x464f5; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x464f5; xor eax, eax; ret; 
0x0000000000446381: jne 0x464f5; xor eax, eax; ret; 
0x0000000000446601: jne 0x465f0; ret; 
0x00000000004465f8: jne 0x46610; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x465f0; ret; 
0x00000000004466b1: jne 0x466a0; ret; 
0x00000000004466a8: jne 0x466c0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x466a0; ret; 
0x0000000000446821: jne 0x46810; lea rax, [rcx - 1]; ret; 
0x0000000000446818: jne 0x46830; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x46810; lea rax, [rcx - 1]; ret; 
0x0000000000446971: jne 0x46960; sub rax, 1; ret; 
0x0000000000446968: jne 0x46980; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46960; sub rax, 1; ret; 
0x0000000000447de4: jne 0x47dc7; vzeroupper; ret; 
0x0000000000447fa7: jne 0x47f82; vzeroupper; ret; 
0x000000000044877f: jne 0x487a4; add rsp, 0x20; pop rbx; ret; 
0x000000000044923b: jne 0x491d0; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000449537: jne 0x49549; add rsp, 0x28; ret; 
0x0000000000449628: jne 0x4968b; mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000449655: jne 0x49709; add rsp, 0x68; ret; 
0x0000000000449767: jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004497b8: jne 0x497d0; xor eax, eax; syscall; 
0x0000000000449888: jne 0x498a0; mov eax, 1; syscall; 
0x00000000004499fb: jne 0x499c7; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004499bb: jne 0x499f8; mov eax, dword ptr [rip + 0x272e49]; test eax, eax; jne 0x49a28; mov eax, 0x48; syscall; 
0x00000000004499c5: jne 0x49a28; mov eax, 0x48; syscall; 
0x00000000004499e8: jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449af7: jne 0x49b43; add rsp, 0x68; ret; 
0x0000000000449b58: jne 0x49b70; mov eax, 3; syscall; 
0x000000000044a466: jne 0x4a477; add rsp, 0x28; ret; 
0x000000000044bb4a: jne 0x4bb56; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bbda: jne 0x4bbe6; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000044bd32: jne 0x4bd24; pop rdx; pop r10; ret; 
0x000000000044bd22: jne 0x4bd2c; nop; mov eax, 0xca; syscall; 
0x000000000044bd7f: jne 0x4bd68; and r11d, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x000000000044bde2: jne 0x4bdd0; mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bdf0; ret; 
0x000000000044e00c: jne 0x4dfbb; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000044f043: jne 0x4efd5; call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000044f04f: jne 0x4efe1; call rsi; 
0x000000000044f551: jne 0x4f5f1; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457b1f: jne 0x57bdf; add rsp, 0xb8; pop rbx; pop r12; ret; 
0x000000000045a554: jne 0x5a550; jmp qword ptr [rsi + 0xf]; 
0x000000000045ac6f: jne 0x5ac76; add rsp, 0x18; ret; 
0x000000000045aeb7: jne 0x5af03; add rsp, 0x148; ret; 
0x0000000000405e1c: jne 0x5e28; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000004688b2: jne 0x688bc; add rsp, 0xd8; ret; 
0x00000000004718ca: jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000471bec: jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x0000000000471cf8: jne 0x71d10; sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000471e79: jne 0x71e88; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000471f28: jne 0x71f7a; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004736a3: jne 0x736a9; xor rax, rax; ret; 
0x0000000000473aa3: jne 0x73ad0; mov rax, r8; vzeroupper; ret; 
0x0000000000473a6a: jne 0x73b10; mov rax, r8; vzeroupper; ret; 
0x0000000000473d0d: jne 0x73e21; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x0000000000474363: jne 0x74369; xor rax, rax; ret; 
0x0000000000474c63: jne 0x74c90; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000474c2d: jne 0x74cd0; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x00000000004754b0: jne 0x754ea; add rsp, 0xa8; pop rbx; pop rbp; ret; 
0x0000000000475647: jne 0x756a6; mov eax, 0x101; syscall; 
0x000000000047566a: jne 0x75729; add rsp, 0x78; ret; 
0x000000000047577c: jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004757ff: jne 0x75809; movzx eax, al; add rsp, 0x58; ret; 
0x00000000004758ae: jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000475d6f: jne 0x75c85; cmp word ptr [rsi + 0x14], 0x2f75; jne 0x75c85; mov eax, 1; leave; ret; 
0x0000000000475d7b: jne 0x75c85; mov eax, 1; leave; ret; 
0x0000000000475d79: jne 0x75daa; jne 0x75c85; mov eax, 1; leave; ret; 
0x000000000047c277: jne 0x7c506; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047c78c: jne 0x7c7a0; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047cb9f: jne 0x7d176; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047de93: jne 0x7ddd0; lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000047e68a: jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000047f21e: jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000047f2d7: jne 0x7f2ec; mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x000000000047f317: jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000480e29: jne 0x80dfa; movsx eax, cl; neg eax; ret; 
0x0000000000481bfa: jne 0x81c02; add rsp, 0x20; pop rbx; ret; 
0x0000000000481cf5: jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481db5: jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f16: jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821e5: jne 0x8220e; add rsp, 0x68; ret; 
0x000000000048254f: jne 0x825a0; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000482595: jne 0x825b5; add rsp, 0x110; pop rbx; ret; 
0x0000000000482616: jne 0x82621; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000484221: jne 0x8425e; leave; ret; 
0x0000000000484450: jne 0x84468; test rsi, rsi; jne 0x84480; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000484455: jne 0x84480; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000484523: jne 0x84514; cmp cx, 0x7fff; je 0x84514; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004846c1: jne 0x846a8; mov rax, rsi; ret; 
0x0000000000484745: jne 0x84720; mov rax, rsi; ret; 
0x00000000004847e8: jne 0x848a4; add rsp, 0x30; pop rbx; ret; 
0x00000000004849a9: jne 0x84b35; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000484dc2: jne 0x84e68; mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000484ecd: jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fb0: jne 0x84fc4; add rsp, 0x38; ret; 
0x00000000004855b0: jne 0x855b5; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000485820: jne 0x8576f; nop word ptr cs:[rax + rax]; call rbx; 
0x0000000000485b65: jne 0x85b71; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000048777b: jne 0x8777f; pop rbx; ret; 
0x0000000000487771: jne 0x877f0; cmp qword ptr [rip + 0x2317fd], 0; jne 0x8777f; pop rbx; ret; 
0x000000000048830b: jne 0x8831c; add rsp, 0x38; ret; 
0x0000000000488419: jne 0x8842c; add rsp, 0x40; pop rbx; ret; 
0x0000000000488500: jne 0x88514; add rsp, 0x50; pop rbx; ret; 
0x000000000048aa30: jne 0x8a960; add rsp, 0x38; ret; 
0x000000000048ab7f: jne 0x8ac59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048aed1: jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048aee9: jne 0x8af08; xor eax, eax; ret; 
0x000000000048d06a: jne 0x8d080; cmp qword ptr [r9 + 0x38], 0; je 0x8d090; add rsp, 0x18; ret; 
0x000000000048d0f3: jne 0x8d110; lea rdx, [rip + 0x22f0a4]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x000000000048d100: jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x000000000048d16f: jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x000000000048d4ce: jne 0x8d4c0; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d64c: jne 0x8d63e; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d798: jne 0x8d78a; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048d7e4: jne 0x8d7d6; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d973: jne 0x8d965; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048dad3: jne 0x8dac5; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048db24: jne 0x8db16; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048dfbc: jne 0x8df99; movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048e044: jne 0x8e055; mov eax, 8; ret; 
0x000000000048e06f: jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048e089: jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eecf: jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eee9: jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f959: jne 0x8f978; xor eax, eax; ret; 
0x000000000048ff25: jne 0x8ff10; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048ff70: jne 0x8ff48; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004900b5: jne 0x90098; pop rbx; ret; 
0x00000000004901c3: jne 0x901a8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490d7d: jne 0x90d60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490f01: jne 0x90f10; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000496455: jne 0x96452; inc dword ptr [rax + 0x75]; sti; dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x0000000000496459: jne 0x96456; dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x00000000004b2cfd: jne 0xb2cff; add al, al; or edi, esp; jmp qword ptr [rax]; 
0x00000000004b3e40: jne 0xb3e46; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000040dc3b: jne 0xdc5c; add rsp, 0x118; ret; 
0x000000000040e9c6: jne 0xe8f0; mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040f7b2: jne 0xf7bc; add rsp, 0xd8; ret; 
0x000000000040faa4: jne 0xfaaf; add rsp, 0xd0; pop rbx; ret; 
0x000000000040fc33: jne 0xfc3f; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000042476a: jno 0x2476c; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000042d04e: jno 0x2d057; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000438440: jno 0x38440; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043867a: jno 0x3867a; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004387e1: jno 0x387e9; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000438931: jno 0x389af; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438938: jno 0x389b6; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043893f: jno 0x389bd; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438946: jno 0x389c4; adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000447054: jno 0x47046; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447142: jno 0x47134; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044740c: jno 0x473ee; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044753f: jno 0x47521; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000004478cc: jno 0x478cc; jg 0x47912; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447a65: jno 0x47a65; jg 0x47aab; std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000458eb3: jno 0x58e6f; jmp qword ptr [rsi + 0x2e]; 
0x0000000000458ec7: jno 0x58ec5; jmp qword ptr [rsi + 0xf]; 
0x000000000045e978: jno 0x5e985; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x0000000000475642: jno 0x75668; add byte ptr [rbp - 0x47a28a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000482ce4: jno 0x82d2f; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004a78d9: jno 0xa786f; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004b282d: jno 0xb282f; add byte ptr [rax], al; cmc; sti; jmp qword ptr [rdx]; 
0x000000000040ff76: jno 0xffc0; mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000419161: jnp 0x19169; sub al, byte ptr [rax]; ret; 
0x0000000000424751: jnp 0x2477d; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x000000000042c41a: jnp 0x2c422; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000044f9c0: jnp 0x4fa02; add byte ptr [rsp + riz*8 - 0x18], dh; pop rbp; or edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x0000000000468974: jnp 0x6896f; dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x0000000000475384: jnp 0x7538a; sub rsp, 0x80; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x0000000000478a09: jnp 0x78a85; clc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000484260: jnp 0x8425e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004a7765: jnp 0xa7720; ret; 
0x00000000004a8ffe: jnp 0xa9016; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004243ef: jns 0x243f1; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x000000000042443c: jns 0x24467; add byte ptr [rdx], al; lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424443: jns 0x2446f; add al, byte ptr [rax]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x00000000004244a3: jns 0x244ce; add byte ptr [rdx], al; lea rdx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000042c616: jns 0x2c61e; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000438447: jns 0x38448; ret; 
0x0000000000438681: jns 0x38682; ret; 
0x00000000004387e8: jns 0x387f1; ret; 
0x000000000043ecf7: jns 0x3ed5c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ed48: jns 0x3edad; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ee47: jns 0x3eeac; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043efe6: jns 0x3f04b; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043f237: jns 0x3f29c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f3d8: jns 0x3f43d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043f4d7: jns 0x3f53c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f528: jns 0x3f58d; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043f627: jns 0x3f68c; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fa17: jns 0x3fa7c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043fd08: jns 0x3fd6d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fe07: jns 0x3fe6c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000447058: jns 0x4703a; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447146: jns 0x47128; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447411: jns 0x473d3; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447544: jns 0x47506; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000004478c9: jns 0x478c9; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447a62: jns 0x47a62; vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000448063: jns 0x48035; add al, 0; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000478ae0: jns 0x78ada; dec dword ptr [rax - 0x77]; ret; 
0x000000000048adbe: jns 0x8adc3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048d06e: jns 0x8d0a8; add byte ptr [rbp + rbx + 0x48], dh; add esp, 0x18; ret; 
0x000000000048ddde: jns 0x8dde3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f9de: jns 0x8f9e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000490363: jns 0x90313; sti; jmp qword ptr [rsi + 0xf]; 
0x00000000004a686e: jns 0xa6802; ret 0xf869; 
0x00000000004b3115: jns 0xb3117; add al, bl; and edi, esp; jmp qword ptr [rcx]; 
0x00000000004b53e1: jns 0xb53e0; jmp qword ptr [rsi]; 
0x00000000004107ea: jo 0x10824; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000411805: jo 0x1183f; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000414594: jo 0x145de; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004145c4: jo 0x1460e; add esp, 8; pop rbx; pop rbp; ret; 
0x00000000004186a4: jo 0x186dc; sub al, byte ptr [rax]; add dword ptr [rip + 0x2a3665], 1; ret; 
0x0000000000404498: jo 0x4482; ret 0x1bb; 
0x000000000044a20d: jo 0x4a20c; dec dword ptr [rax - 0x77]; ret; 
0x000000000044bfc2: jo 0x4bfe4; ret; 
0x000000000045aacf: jo 0x5aacb; jmp qword ptr [rsi + 0x2e]; 
0x000000000046a1ac: jo 0x6a1bb; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000470a1a: jo 0x70a2c; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a5f: jo 0x70a91; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000470ea6: jo 0x70ec0; jbe 0x70ece; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471056: jo 0x71070; jbe 0x71082; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000473d16: jo 0x73d73; pop rbp; pop r12; ret; 
0x0000000000473f2d: jo 0x73f8a; pop rbp; pop r12; ret; 
0x00000000004820d4: jo 0x82131; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000493d7c: jo 0x93d73; clc; inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x0000000000493e70: jo 0x93e93; stc; call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x0000000000493e90: jo 0x93ebc; stc; call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000493f69: jo 0x93f64; call qword ptr [rax + 0x62]; 
0x0000000000493f69: jo 0x93f64; call qword ptr [rax + 0x62]; stc; dec dword ptr [rdi - 0x72]; stc; jmp qword ptr [rax]; 
0x0000000000493f10: jo 0x93f69; stc; jmp rax; 
0x0000000000493f54: jo 0x93fc1; stc; jmp qword ptr [rax + 0x6c]; 
0x00000000004941f4: jo 0x94191; stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x00000000004942a0: jo 0x94283; stc; jmp qword ptr [rax - 0x1d]; 
0x00000000004942bc: jo 0x9429d; stc; call qword ptr [rax - 0x1f]; 
0x00000000004942d8: jo 0x942b7; stc; call qword ptr [rax - 0x21]; 
0x000000000049435c: jo 0x9433c; stc; call qword ptr [rax - 0x20]; 
0x000000000049435c: jo 0x9433c; stc; call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x0000000000494374: jo 0x94350; stc; inc dword ptr [rax - 0x24]; stc; jmp qword ptr [rax]; 
0x0000000000494390: jo 0x9436a; stc; jmp qword ptr [rax]; 
0x0000000000494414: jo 0x943e4; stc; inc eax; iretd; stc; call qword ptr [rax]; 
0x0000000000494698: jo 0x946a0; cli; push rax; add eax, 0x570fffa; cli; jmp rax; 
0x00000000004946a0: jo 0x946a7; cli; jmp rax; 
0x00000000004948a4: jo 0x948aa; cli; jmp rax; 
0x0000000000494960: jo 0x94997; cli; inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000494b30: jo 0x94b65; cli; jmp rax; 
0x0000000000494ba8: jo 0x94bd4; cli; jmp rax; 
0x0000000000494dac: jo 0x94dd7; cli; call rax; 
0x0000000000494ee8: jo 0x94e6f; cli; call qword ptr [rax]; 
0x0000000000494f08: jo 0x94e9c; cli; call qword ptr [rax]; 
0x000000000049504c: jo 0x95047; cli; call qword ptr [rax - 0x4f000507]; stc; cli; call rax; 
0x0000000000495e84: jo 0x95ef1; sti; call qword ptr [rax + 0x6b]; 
0x00000000004963f9: jo 0x963f6; call ptr [rsi + 0x73]; sti; jmp qword ptr [rsi]; 
0x000000000049642d: jo 0x9642a; call qword ptr [rdx + 0x71]; 
0x00000000004964a9: jo 0x964a6; dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x00000000004964ad: jo 0x964aa; jmp qword ptr [rax + 0x74]; 
0x0000000000497308: jo 0x97335; cld; jmp qword ptr [rax]; 
0x00000000004a39c0: jo 0xa3972; cld; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax - 0x50]; 
0x00000000004a78e4: jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004ab78c: jo 0xab78e; add byte ptr [rax], al; nop; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004ae934: jo 0xae939; ret 0xa01; 
0x00000000004af630: jo 0xaf679; stc; jmp qword ptr [rbx]; 
0x00000000004b0450: jo 0xb040c; stc; call qword ptr [rcx]; 
0x00000000004b1350: jo 0xb1344; std; jmp qword ptr [rdi]; 
0x00000000004b1970: jo 0xb1922; cli; call qword ptr [rbx]; 
0x00000000004b2765: jo 0xb2767; add al, bl; sti; jmp qword ptr [rbx]; 
0x00000000004b3a00: jo 0xb39a5; cld; jmp qword ptr [rsi + 5]; 
0x00000000004b5bb0: jo 0xb5b4f; std; jmp qword ptr [rcx]; 
0x000000000048d150: jo 0xe10912; add byte ptr [rax], al; add byte ptr [rbp + rax + 0x48], dh; mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000040e906: jo 0xe928; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000424353: jp 0x2437e; add byte ptr [rax], dl; lea rdx, [rip - 0x59e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000457162: jp 0x5715a; ret; 
0x0000000000478a0a: jp 0x78a04; dec dword ptr [rax - 0x7d]; ret; 
0x000000000048defa: jp 0x8df70; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004a75a5: jp 0xa7600; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004af7e5: jp 0xaf7e0; call rsp; 
0x0000000000412958: js 0x12990; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000424542: js 0x2456d; add byte ptr [rdx], al; lea rdx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000424587: js 0x2457f; add eax, 0x297862; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000042459c: js 0x245c7; add byte ptr [rdx], al; lea rdx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x00000000004245e2: js 0x2460d; add byte ptr [rdx], al; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004246c7: js 0x246bf; add eax, 0x297722; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x000000000042c6ad: js 0x2c6b5; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042c72b: js 0x2c733; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000044a3d3: js 0x4a3b4; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x000000000047175f: js 0x71779; jbe 0x7178b; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004718b9: js 0x718eb; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x000000000047bbf2: js 0x7bc02; pop rbx; ret; 
0x000000000047c594: js 0x7c5b5; add byte ptr [rax], al; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000048d326: js 0x8d32a; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000048d333: js 0x8d337; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000048fff3: js 0x9006c; ret 0x8b48; 
0x00000000004a4e28: js 0xa4ea8; std; jmp qword ptr [rax + 0x7e]; 
0x00000000004b0018: js 0xaffbf; stc; jmp qword ptr [rcx]; 
0x00000000004b1988: js 0xb193a; cli; call qword ptr [rax]; 
0x000000000040ea05: js 0xea27; call rdx; 
0x000000000043fe0d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004351bc: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435446: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353d6: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435366: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f6: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435286: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435216: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435836: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357c6: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435756: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356e6: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435676: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435606: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435596: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435526: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354b6: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004349a6: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043514c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350cc: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043503c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434fbc: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f3c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ebc: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e3c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434dbc: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d3c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cbc: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c3c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bbc: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b2c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a9c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a0c: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043499c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004351c6: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435151: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350d1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435041: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434fc1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f41: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ec1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e41: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434dc1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d41: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cc1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c41: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bc1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434aa1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a11: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043544b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353db: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043536b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352fb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043528b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043521b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043583b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357cb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043575b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356eb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043567b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043560b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043559b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043552b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354bb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004179bb: lea eax, [r8 - 1]; ret; 
0x000000000048addc: lea eax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000042b364: lea eax, [rax + rdi + 0x10]; ret; 
0x000000000042b374: lea eax, [rax + rdi + 0x20]; ret; 
0x000000000042b344: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000047b5cd: lea eax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x00000000004179bc: lea eax, [rax - 1]; ret; 
0x0000000000400c03: lea eax, [rbp - 0x40]; mov rdi, rax; call 0xb5d; mov eax, 0; leave; ret; 
0x00000000004733cd: lea eax, [rcx + rsi]; ret; 
0x0000000000446824: lea eax, [rcx - 1]; ret; 
0x000000000044489c: lea eax, [rdi + 0x10]; ret; 
0x00000000004448b1: lea eax, [rdi + 0x11]; ret; 
0x00000000004448cf: lea eax, [rdi + 0x12]; ret; 
0x00000000004448ef: lea eax, [rdi + 0x13]; ret; 
0x0000000000444912: lea eax, [rdi + 0x14]; ret; 
0x0000000000444931: lea eax, [rdi + 0x15]; ret; 
0x0000000000444951: lea eax, [rdi + 0x16]; ret; 
0x0000000000444971: lea eax, [rdi + 0x17]; ret; 
0x0000000000444994: lea eax, [rdi + 0x18]; ret; 
0x00000000004449b9: lea eax, [rdi + 0x19]; ret; 
0x00000000004449d7: lea eax, [rdi + 0x1a]; ret; 
0x00000000004449f7: lea eax, [rdi + 0x1b]; ret; 
0x0000000000444a13: lea eax, [rdi + 0x1c]; ret; 
0x0000000000444a33: lea eax, [rdi + 0x1d]; ret; 
0x0000000000444a53: lea eax, [rdi + 0x1e]; ret; 
0x0000000000444a73: lea eax, [rdi + 0x1f]; ret; 
0x00000000004447ed: lea eax, [rdi + 0xa]; ret; 
0x000000000044480d: lea eax, [rdi + 0xb]; ret; 
0x000000000044482f: lea eax, [rdi + 0xc]; ret; 
0x000000000044484f: lea eax, [rdi + 0xd]; ret; 
0x000000000044486f: lea eax, [rdi + 0xe]; ret; 
0x0000000000444889: lea eax, [rdi + 0xf]; ret; 
0x0000000000444737: lea eax, [rdi + 1]; ret; 
0x000000000044474a: lea eax, [rdi + 2]; ret; 
0x0000000000444755: lea eax, [rdi + 3]; ret; 
0x0000000000444768: lea eax, [rdi + 4]; ret; 
0x000000000044477d: lea eax, [rdi + 5]; ret; 
0x000000000044479b: lea eax, [rdi + 6]; ret; 
0x00000000004447a7: lea eax, [rdi + 7]; ret; 
0x00000000004447ba: lea eax, [rdi + 8]; ret; 
0x00000000004447cf: lea eax, [rdi + 9]; ret; 
0x000000000042b399: lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000440687: lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000042b3a9: lea eax, [rdi + rax + 0x20]; ret; 
0x000000000042b2a3: lea eax, [rdi + rax + 0x30]; ret; 
0x00000000004406a7: lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406e5: lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000473615: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004400ec: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044054d: lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440307: lea eax, [rdi + rax]; ret; 
0x0000000000446b7a: lea eax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000004732c9: lea eax, [rdi + rsi]; ret; 
0x0000000000465e50: lea eax, [rdi - 1]; xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x0000000000444723: lea eax, [rdi]; ret; 
0x0000000000443d0d: lea eax, [rdx + 0xa]; ret; 
0x0000000000443d2d: lea eax, [rdx + 0xb]; ret; 
0x0000000000443d4f: lea eax, [rdx + 0xc]; ret; 
0x0000000000443d6f: lea eax, [rdx + 0xd]; ret; 
0x0000000000443d8f: lea eax, [rdx + 0xe]; ret; 
0x0000000000443c1f: lea eax, [rdx + 0xf]; ret; 
0x0000000000443c47: lea eax, [rdx + 1]; ret; 
0x0000000000443c5d: lea eax, [rdx + 2]; ret; 
0x0000000000443c75: lea eax, [rdx + 3]; ret; 
0x0000000000443c8b: lea eax, [rdx + 4]; ret; 
0x0000000000443c9d: lea eax, [rdx + 5]; ret; 
0x0000000000443cbb: lea eax, [rdx + 6]; ret; 
0x000000000048add1: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000443bc7: lea eax, [rdx + 7]; ret; 
0x0000000000443ccd: lea eax, [rdx + 8]; ret; 
0x0000000000443ced: lea eax, [rdx + 9]; ret; 
0x00000000004179ae: lea eax, [rdx + rdi]; ret; 
0x0000000000448153: lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000422d36: lea eax, [rdx - 0x10]; ret; 
0x0000000000443c35: lea eax, [rdx]; ret; 
0x00000000004247a8: lea eax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000048f9a8: lea eax, [rip + 0x1bd0a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000423848: lea eax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000048dda8: lea eax, [rip + 0x1d8d6]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000048ad88: lea eax, [rip + 0x203da]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000042435f: lea eax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004246e8: lea eax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004245a8: lea eax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000424448: lea eax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000042474f: lea eax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x000000000042460f: lea eax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244af: lea eax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000042472e: lea eax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245ee: lea eax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x000000000042448e: lea eax, [rip + 0x2316c]; cmovne rax, rdx; ret; 
0x00000000004237cf: lea eax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x00000000004848f1: lea eax, [rip + 0x237789]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x00000000004848d6: lea eax, [rip + 0x2377a4]; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x00000000004244fd: lea eax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000042454e: lea eax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000046c926: lea eax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8d3: lea eax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c3a6: lea eax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c745: lea eax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c700: lea eax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6bb: lea eax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c66c: lea eax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcd0: lea eax, [rip + 0x24b24a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000460dbf: lea eax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046116e: lea eax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461120: lea eax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461071: lea eax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461015: lea eax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d75: lea eax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d27: lea eax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608c6: lea eax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000459159: lea eax, [rip + 0x25fae1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x0000000000459059: lea eax, [rip + 0x25fbe1]; mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x000000000044d351: lea eax, [rip + 0x26cfa9]; ret; 
0x000000000048506f: lea eax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424778: lea eax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x0000000000424388: lea eax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727e8: lea eax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bf8: lea eax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727b8: lea eax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000041f771: lea eax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x0000000000473c57: lea eax, [rip - 0x2bf9d]; cmp edx, 0x1000; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x000000000041f77f: lea eax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000047f221: lea eax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000041180c: lea eax, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000449acf: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000045f751: lea ebp, [rdx]; add al, byte ptr [rax]; add byte ptr [rax + 0x63], cl; ret; 
0x000000000040e091: lea ebx, [rdi + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004644dd: lea ebx, [rdi + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x0000000000444706: lea ebx, [rip + 0x508e4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446d1: lea ebx, [rip + 0x50919]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446a5: lea ebx, [rip + 0x50945]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044468f: lea ebx, [rip + 0x5095b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044466d: lea ebx, [rip + 0x5097d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444648: lea ebx, [rip + 0x509a2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044462b: lea ebx, [rip + 0x509bf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445d3: lea ebx, [rip + 0x50a17]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440e6: lea ebx, [rip + 0x50e84]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440b1: lea ebx, [rip + 0x50eb9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444085: lea ebx, [rip + 0x50ee5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044406f: lea ebx, [rip + 0x50efb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044404d: lea ebx, [rip + 0x50f1d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444028: lea ebx, [rip + 0x50f42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044400b: lea ebx, [rip + 0x50f5f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443fb3: lea ebx, [rip + 0x50fb7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000437462: lea ebx, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437104: lea ebx, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004372af: lea ebx, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f84: lea ebx, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437047: lea ebx, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e04: lea ebx, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec7: lea ebx, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c84: lea ebx, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d47: lea ebx, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b04: lea ebx, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc8: lea ebx, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436984: lea ebx, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a47: lea ebx, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436804: lea ebx, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c7: lea ebx, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436684: lea ebx, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436747: lea ebx, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436504: lea ebx, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c7: lea ebx, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436384: lea ebx, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436447: lea ebx, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436204: lea ebx, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c7: lea ebx, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436084: lea ebx, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436147: lea ebx, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f04: lea ebx, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc7: lea ebx, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d84: lea ebx, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e47: lea ebx, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c04: lea ebx, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a8b: lea ebx, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc7: lea ebx, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b47: lea ebx, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043588c: lea ebx, [rip + 0x5f09e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a0a: lea ebx, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358ae: lea ebx, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043494e: lea ebx, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434624: lea ebx, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347bb: lea ebx, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004344a4: lea ebx, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434567: lea ebx, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434324: lea ebx, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e7: lea ebx, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004341a4: lea ebx, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434267: lea ebx, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434024: lea ebx, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e8: lea ebx, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ea4: lea ebx, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f67: lea ebx, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d24: lea ebx, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de7: lea ebx, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ba4: lea ebx, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c67: lea ebx, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a24: lea ebx, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae7: lea ebx, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004338a4: lea ebx, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433967: lea ebx, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433724: lea ebx, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e7: lea ebx, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335a4: lea ebx, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433667: lea ebx, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433424: lea ebx, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e7: lea ebx, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004332a4: lea ebx, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433367: lea ebx, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433124: lea ebx, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fab: lea ebx, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e7: lea ebx, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432d55: lea ebx, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c98: lea ebx, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433067: lea ebx, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dcb: lea ebx, [rip + 0x6165f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432bad: lea ebx, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f2a: lea ebx, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ae2: lea ebx, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db8: lea ebx, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ac1: lea ebx, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a23: lea ebx, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431971: lea ebx, [rip + 0x628f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318d3: lea ebx, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431821: lea ebx, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431783: lea ebx, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316d1: lea ebx, [rip + 0x62b99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431633: lea ebx, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431581: lea ebx, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314e3: lea ebx, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431431: lea ebx, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431393: lea ebx, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312e1: lea ebx, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431243: lea ebx, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431191: lea ebx, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f8: lea ebx, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431041: lea ebx, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fa3: lea ebx, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ef1: lea ebx, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e53: lea ebx, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430da1: lea ebx, [rip + 0x634c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d03: lea ebx, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c51: lea ebx, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bb3: lea ebx, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b01: lea ebx, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a63: lea ebx, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309b1: lea ebx, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430913: lea ebx, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430861: lea ebx, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307c3: lea ebx, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430717: lea ebx, [rip + 0x63b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430626: lea ebx, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430567: lea ebx, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304fd: lea ebx, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043040e: lea ebx, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301d4: lea ebx, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430349: lea ebx, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300fa: lea ebx, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0f1: lea ebx, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f053: lea ebx, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042efa1: lea ebx, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef03: lea ebx, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee51: lea ebx, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edb3: lea ebx, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed01: lea ebx, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec63: lea ebx, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebb1: lea ebx, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb13: lea ebx, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea61: lea ebx, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9c3: lea ebx, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e911: lea ebx, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e873: lea ebx, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7c1: lea ebx, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e728: lea ebx, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e671: lea ebx, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5d3: lea ebx, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e521: lea ebx, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e483: lea ebx, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3d1: lea ebx, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e333: lea ebx, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e281: lea ebx, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1e3: lea ebx, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e131: lea ebx, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e093: lea ebx, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfe1: lea ebx, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df43: lea ebx, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de91: lea ebx, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddf3: lea ebx, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd47: lea ebx, [rip + 0x66363]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc56: lea ebx, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db97: lea ebx, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db2d: lea ebx, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da3e: lea ebx, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d979: lea ebx, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc34: lea ebx, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbba: lea ebx, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb2b: lea ebx, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c920: lea ebx, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7ee: lea ebx, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c728: lea ebx, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6aa: lea ebx, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c613: lea ebx, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c417: lea ebx, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e6: lea ebx, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d7: lea ebx, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004a6eb1: lea ebx, [rsi - 0x3271f33]; test al, 0x97; xchg esp, eax; ret; 
0x0000000000473dcb: lea ecx, [rax + 1]; call rbx; 
0x0000000000473f66: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046eef5: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000443fbe: lea ecx, [rbx + rcx]; jmp rcx; 
0x000000000041ec88: lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000047e684: lea ecx, [rdx + 4]; cmp rcx, r8; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000042a220: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000422d46: lea ecx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000047c097: lea ecx, [rip + 0x28c63]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046ea80: lea ecx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000440039: lea ecx, [rip + 0x58341]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ec24: lea ecx, [rip + 0x59756]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043e9c9: lea ecx, [rip + 0x599b1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d0f4: lea ecx, [rip + 0x5b286]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044bf3a: lea ecx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000446ef5: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447250: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044769b: lea ecx, [rsi + rdx]; cmp rdi, r9; jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000472010: lea ecx, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000471f2b: lea ecx, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000473eee: lea ecx, [rsp + 0x20]; call rbx; 
0x00000000004740dc: lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000473dc6: lea ecx, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000469187: lea edi, [rax + 0x48fffff6]; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000475383: lea edi, [rbx + 4]; sub rsp, 0x80; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x000000000044c63f: lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000446e9a: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000432d4d: lea edi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480fa8: lea edi, [rip + 0x23f4c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000460e10: lea edi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047d751: lea edi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x000000000047c9bf: lea edi, [rip + 0x283d3]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046f1c7: lea edi, [rip + 0x34adf]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000044c00e: lea edi, [rip + 0x49b11]; mov eax, 0x15; syscall; 
0x000000000040ec1d: lea edi, [rip + 0x83fea]; mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000040d2b8: lea edi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x0000000000416bc9: lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x00000000004182d1: lea edx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046eef9: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042d984: lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000431ab8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431818: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431578: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431428: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312d8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431188: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431038: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ee8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430af8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309a8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430858: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0e8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef98: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee48: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecf8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea58: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e908: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e668: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e518: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3c8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e278: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e128: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfd8: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de88: lea edx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000485068: lea edx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424797: lea edx, [rip + 0x1bf63]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x00000000004246e1: lea edx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004245a1: lea edx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000424441: lea edx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424748: lea edx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000424608: lea edx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244a8: lea edx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000048d0f6: lea edx, [rip + 0x22f0a4]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000424727: lea edx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245e7: lea edx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004237c8: lea edx, [rip + 0x23282]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000484d36: lea edx, [rip + 0x235e24]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004244f6: lea edx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000424547: lea edx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000484da6: lea edx, [rip + 0x25a00]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046f235: lea edx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004491dd: lea edx, [rip + 0x4c399]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000440087: lea edx, [rip + 0x582f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044006d: lea edx, [rip + 0x5830d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ea17: lea edx, [rip + 0x59963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9fd: lea edx, [rip + 0x5997d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce67: lea edx, [rip + 0x5b513]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce4d: lea edx, [rip + 0x5b52d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ad17: lea edx, [rip + 0x5d663]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043acfd: lea edx, [rip + 0x5d67d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042316e: lea edx, [rip + 0x70bfc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424767: lea edx, [rip + 0x7133]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004022e0: lea edx, [rip + 0x90392]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402113: lea edx, [rip + 0x90507]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000401f8f: lea edx, [rip + 0x9065f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473be7: lea edx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727d7: lea edx, [rip + 0xcf3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473c64: lea edx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x0000000000424358: lea edx, [rip - 0x59e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000446e8e: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004499fe: lea edx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000449b01: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000471f27: lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000472009: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000472103: lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047de9a: lea esi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000401803: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004119a2: lea esi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046b77d: lea esi, [rip + 0x24b69d]; jmp rax; 
0x00000000004614b2: lea esi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e5a: lea esi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000448061: lea esi, [rip + 0x4d079]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000446e9f: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000046a51f: lea esp, [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044d4c5: lea esp, [rbp + 1]; cmp rax, 0x17; ja 0x4d4a0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000040eac3: lea esp, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000047e1a6: lea esp, [rbx + rdi*8 - 0x76b30001]; ret 0x2948; 
0x0000000000444705: lea r11, [rip + 0x508e4]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446d0: lea r11, [rip + 0x50919]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446a4: lea r11, [rip + 0x50945]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044468e: lea r11, [rip + 0x5095b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044466c: lea r11, [rip + 0x5097d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444647: lea r11, [rip + 0x509a2]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044462a: lea r11, [rip + 0x509bf]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445d2: lea r11, [rip + 0x50a17]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440e5: lea r11, [rip + 0x50e84]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440b0: lea r11, [rip + 0x50eb9]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444084: lea r11, [rip + 0x50ee5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044406e: lea r11, [rip + 0x50efb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044404c: lea r11, [rip + 0x50f1d]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444027: lea r11, [rip + 0x50f42]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044400a: lea r11, [rip + 0x50f5f]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443fb2: lea r11, [rip + 0x50fb7]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000437461: lea r11, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437103: lea r11, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004372ae: lea r11, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f83: lea r11, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437046: lea r11, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e03: lea r11, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec6: lea r11, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c83: lea r11, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d46: lea r11, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b03: lea r11, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc7: lea r11, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436983: lea r11, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a46: lea r11, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436803: lea r11, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c6: lea r11, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436683: lea r11, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436746: lea r11, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436503: lea r11, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c6: lea r11, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436383: lea r11, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436446: lea r11, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436203: lea r11, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c6: lea r11, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436083: lea r11, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436146: lea r11, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f03: lea r11, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc6: lea r11, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d83: lea r11, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e46: lea r11, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c03: lea r11, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a8a: lea r11, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc6: lea r11, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b46: lea r11, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043588b: lea r11, [rip + 0x5f09e]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a09: lea r11, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358ad: lea r11, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043494d: lea r11, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434623: lea r11, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347ba: lea r11, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004344a3: lea r11, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434566: lea r11, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434323: lea r11, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e6: lea r11, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004341a3: lea r11, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434266: lea r11, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434023: lea r11, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e7: lea r11, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ea3: lea r11, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f66: lea r11, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d23: lea r11, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de6: lea r11, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ba3: lea r11, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c66: lea r11, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a23: lea r11, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae6: lea r11, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004338a3: lea r11, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433966: lea r11, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433723: lea r11, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e6: lea r11, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335a3: lea r11, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433666: lea r11, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433423: lea r11, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e6: lea r11, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004332a3: lea r11, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433366: lea r11, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433123: lea r11, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432faa: lea r11, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e6: lea r11, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432d54: lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c97: lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433066: lea r11, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dca: lea r11, [rip + 0x6165f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432bac: lea r11, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f29: lea r11, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ae1: lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db7: lea r11, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ac0: lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a22: lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431970: lea r11, [rip + 0x628f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318d2: lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431820: lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431782: lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316d0: lea r11, [rip + 0x62b99]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431632: lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431580: lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314e2: lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431430: lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431392: lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312e0: lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431242: lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431190: lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f7: lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431040: lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fa2: lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ef0: lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e52: lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430da0: lea r11, [rip + 0x634c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d02: lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c50: lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bb2: lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b00: lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a62: lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309b0: lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430912: lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430860: lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307c2: lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430716: lea r11, [rip + 0x63b53]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430625: lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430566: lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304fc: lea r11, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043040d: lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301d3: lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430348: lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f9: lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0f0: lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f052: lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042efa0: lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef02: lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee50: lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edb2: lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed00: lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec62: lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebb0: lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb12: lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea60: lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9c2: lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e910: lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e872: lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7c0: lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e727: lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e670: lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5d2: lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e520: lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e482: lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3d0: lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e332: lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e280: lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1e2: lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e130: lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e092: lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfe0: lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df42: lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de90: lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddf2: lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd46: lea r11, [rip + 0x66363]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc55: lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db96: lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db2c: lea r11, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da3d: lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d978: lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc33: lea r11, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbb9: lea r11, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb2a: lea r11, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c91f: lea r11, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7ed: lea r11, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c727: lea r11, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6a9: lea r11, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c612: lea r11, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c416: lea r11, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e5: lea r11, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d6: lea r11, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000044d4c4: lea r12, [r13 + 1]; cmp rax, 0x17; ja 0x4d4a0; movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000040eac2: lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000416bc8: lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x000000000048f9a7: lea r8, [rip + 0x1bd0a]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000048dda7: lea r8, [rip + 0x1d8d6]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000048ad87: lea r8, [rip + 0x203da]; movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000041180b: lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000446ef4: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044724f: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044769a: lea r9, [rsi + rdx]; cmp rdi, r9; jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047200f: lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000471f2a: lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000473eed: lea r9, [rsp + 0x20]; call rbx; 
0x00000000004740db: lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000473dc5: lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000048addb: lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000042b363: lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b373: lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b343: lea rax, [rax + rdi - 0x10]; ret; 
0x000000000047b5cc: lea rax, [rax + rdx*4]; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x0000000000400c02: lea rax, [rbp - 0x40]; mov rdi, rax; call 0xb5d; mov eax, 0; leave; ret; 
0x00000000004733cc: lea rax, [rcx + rsi]; ret; 
0x0000000000446823: lea rax, [rcx - 1]; ret; 
0x000000000044489b: lea rax, [rdi + 0x10]; ret; 
0x00000000004448b0: lea rax, [rdi + 0x11]; ret; 
0x00000000004448ce: lea rax, [rdi + 0x12]; ret; 
0x00000000004448ee: lea rax, [rdi + 0x13]; ret; 
0x0000000000444911: lea rax, [rdi + 0x14]; ret; 
0x0000000000444930: lea rax, [rdi + 0x15]; ret; 
0x0000000000444950: lea rax, [rdi + 0x16]; ret; 
0x0000000000444970: lea rax, [rdi + 0x17]; ret; 
0x0000000000444993: lea rax, [rdi + 0x18]; ret; 
0x00000000004449b8: lea rax, [rdi + 0x19]; ret; 
0x00000000004449d6: lea rax, [rdi + 0x1a]; ret; 
0x00000000004449f6: lea rax, [rdi + 0x1b]; ret; 
0x0000000000444a12: lea rax, [rdi + 0x1c]; ret; 
0x0000000000444a32: lea rax, [rdi + 0x1d]; ret; 
0x0000000000444a52: lea rax, [rdi + 0x1e]; ret; 
0x0000000000444a72: lea rax, [rdi + 0x1f]; ret; 
0x00000000004447ec: lea rax, [rdi + 0xa]; ret; 
0x000000000044480c: lea rax, [rdi + 0xb]; ret; 
0x000000000044482e: lea rax, [rdi + 0xc]; ret; 
0x000000000044484e: lea rax, [rdi + 0xd]; ret; 
0x000000000044486e: lea rax, [rdi + 0xe]; ret; 
0x0000000000444888: lea rax, [rdi + 0xf]; ret; 
0x0000000000444736: lea rax, [rdi + 1]; ret; 
0x0000000000444749: lea rax, [rdi + 2]; ret; 
0x0000000000444754: lea rax, [rdi + 3]; ret; 
0x0000000000444767: lea rax, [rdi + 4]; ret; 
0x000000000044477c: lea rax, [rdi + 5]; ret; 
0x000000000044479a: lea rax, [rdi + 6]; ret; 
0x00000000004447a6: lea rax, [rdi + 7]; ret; 
0x00000000004447b9: lea rax, [rdi + 8]; ret; 
0x00000000004447ce: lea rax, [rdi + 9]; ret; 
0x000000000042b398: lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000440686: lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000042b3a8: lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b2a2: lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004406a6: lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406e4: lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000473614: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004400eb: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000044054c: lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440306: lea rax, [rdi + rax]; ret; 
0x0000000000446b79: lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x00000000004732c8: lea rax, [rdi + rsi]; ret; 
0x0000000000444722: lea rax, [rdi]; ret; 
0x0000000000443d0c: lea rax, [rdx + 0xa]; ret; 
0x0000000000443d2c: lea rax, [rdx + 0xb]; ret; 
0x0000000000443d4e: lea rax, [rdx + 0xc]; ret; 
0x0000000000443d6e: lea rax, [rdx + 0xd]; ret; 
0x0000000000443d8e: lea rax, [rdx + 0xe]; ret; 
0x0000000000443c1e: lea rax, [rdx + 0xf]; ret; 
0x0000000000443c46: lea rax, [rdx + 1]; ret; 
0x0000000000443c5c: lea rax, [rdx + 2]; ret; 
0x0000000000443c74: lea rax, [rdx + 3]; ret; 
0x0000000000443c8a: lea rax, [rdx + 4]; ret; 
0x0000000000443c9c: lea rax, [rdx + 5]; ret; 
0x0000000000443cba: lea rax, [rdx + 6]; ret; 
0x000000000048add0: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x0000000000443bc6: lea rax, [rdx + 7]; ret; 
0x0000000000443ccc: lea rax, [rdx + 8]; ret; 
0x0000000000443cec: lea rax, [rdx + 9]; ret; 
0x0000000000422d35: lea rax, [rdx - 0x10]; ret; 
0x0000000000443c34: lea rax, [rdx]; ret; 
0x00000000004247a7: lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x0000000000423847: lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000042435e: lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004246e7: lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004245a7: lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000424447: lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000042474e: lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x000000000042460e: lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244ae: lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000042472d: lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245ed: lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x000000000042448d: lea rax, [rip + 0x2316c]; cmovne rax, rdx; ret; 
0x00000000004237ce: lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x00000000004848f0: lea rax, [rip + 0x237789]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x00000000004848d5: lea rax, [rip + 0x2377a4]; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x00000000004244fc: lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000042454d: lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000046c925: lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8d2: lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c3a5: lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c744: lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6ff: lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6ba: lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c66b: lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bccf: lea rax, [rip + 0x24b24a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000460dbe: lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046116d: lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046111f: lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461070: lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461014: lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d74: lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d26: lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608c5: lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000459158: lea rax, [rip + 0x25fae1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x0000000000459058: lea rax, [rip + 0x25fbe1]; mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x000000000044d350: lea rax, [rip + 0x26cfa9]; ret; 
0x000000000048506e: lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424777: lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x0000000000424387: lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727e7: lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bf7: lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727b7: lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000041f770: lea rax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x0000000000473c56: lea rax, [rip - 0x2bf9d]; cmp edx, 0x1000; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x000000000041f77e: lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000047f220: lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x0000000000449ace: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000040e090: lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000443fbd: lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000473dca: lea rcx, [rax + 1]; call rbx; 
0x0000000000473f65: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000046eef4: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047e683: lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000042a21f: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000422d45: lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000047c096: lea rcx, [rip + 0x28c63]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046ea7f: lea rcx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x0000000000440038: lea rcx, [rip + 0x58341]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ec23: lea rcx, [rip + 0x59756]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043e9c8: lea rcx, [rip + 0x599b1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d0f3: lea rcx, [rip + 0x5b286]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044bf39: lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000475382: lea rdi, [rbx + 4]; sub rsp, 0x80; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x000000000044c63e: lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000446e99: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000432d4c: lea rdi, [rdi - 0x40]; sub rdx, 0x40; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480fa7: lea rdi, [rip + 0x23f4c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x0000000000460e0f: lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000047d750: lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x000000000047c9be: lea rdi, [rip + 0x283d3]; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046f1c6: lea rdi, [rip + 0x34adf]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000044c00d: lea rdi, [rip + 0x49b11]; mov eax, 0x15; syscall; 
0x000000000040ec1c: lea rdi, [rip + 0x83fea]; mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000040d2b7: lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000042d983: lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004182d0: lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x000000000046eef8: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000431ab7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431817: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431577: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431427: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312d7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431187: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431037: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ee7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430af7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309a7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430857: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0e7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef97: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee47: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecf7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea57: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e907: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e667: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e517: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3c7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e277: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e127: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfd7: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de87: lea rdx, [rdx + 0x40]; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000485067: lea rdx, [rip + 0x102]; lea rax, [rip + 0x5b]; cmovne rax, rdx; ret; 
0x0000000000424796: lea rdx, [rip + 0x1bf63]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x00000000004246e0: lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004245a0: lea rdx, [rip + 0x22909]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x0000000000424440: lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424747: lea rdx, [rip + 0x22ac2]; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000424607: lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244a7: lea rdx, [rip + 0x22d62]; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x000000000048d0f5: lea rdx, [rip + 0x22f0a4]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000424726: lea rdx, [rip + 0x22f23]; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245e6: lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x00000000004237c7: lea rdx, [rip + 0x23282]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000484d35: lea rdx, [rip + 0x235e24]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004244f5: lea rdx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000424546: lea rdx, [rip + 0x23973]; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x0000000000484da5: lea rdx, [rip + 0x25a00]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046f234: lea rdx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004491dc: lea rdx, [rip + 0x4c399]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x0000000000440086: lea rdx, [rip + 0x582f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044006c: lea rdx, [rip + 0x5830d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ea16: lea rdx, [rip + 0x59963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9fc: lea rdx, [rip + 0x5997d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce66: lea rdx, [rip + 0x5b513]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce4c: lea rdx, [rip + 0x5b52d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ad16: lea rdx, [rip + 0x5d663]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043acfc: lea rdx, [rip + 0x5d67d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042316d: lea rdx, [rip + 0x70bfc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000424766: lea rdx, [rip + 0x7133]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004022df: lea rdx, [rip + 0x90392]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000402112: lea rdx, [rip + 0x90507]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000401f8e: lea rdx, [rip + 0x9065f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000473be6: lea rdx, [rip + 0xcd3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727d6: lea rdx, [rip + 0xcf3]; and eax, 0x20c00; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473c63: lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x0000000000424357: lea rdx, [rip - 0x59e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x0000000000446e8d: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004499fd: lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000449b00: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000471f26: lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000472008: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x10]; mov rdi, r12; call rbx; 
0x0000000000472102: lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x000000000047de99: lea rsi, [rbp - 0x430]; movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000401802: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004119a1: lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000046b77c: lea rsi, [rip + 0x24b69d]; jmp rax; 
0x00000000004614b1: lea rsi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e59: lea rsi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000448060: lea rsi, [rip + 0x4d079]; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000446e9e: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042c59e: lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048d0f9: lock and al, byte ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x000000000048d164: lock and al, byte ptr [rax]; mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x000000000047f177: lock inc dword ptr [r9 + 0x10]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004100c0: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000445f80: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000495740: lodsb al, byte ptr [rsi]; cmp eax, 0x3e89fffb; sti; jmp qword ptr [rsi]; 
0x00000000004a98d0: lodsb al, byte ptr [rsi]; fldcw word ptr [rcx - 0x7f58d21b]; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x00000000004b41c8: lodsb al, byte ptr [rsi]; mov al, byte ptr [rax]; add byte ptr [rsp + rbx*8], ah; cld; jmp qword ptr [rbx + 1]; 
0x00000000004afa34: lodsb al, byte ptr [rsi]; mov bh, cl; call qword ptr [rbp + 1]; 
0x000000000042a3d4: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004a953d: lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000046ab6e: lodsb al, byte ptr [rsi]; out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x6ab88; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000461170: lodsb al, byte ptr [rsi]; pop rcx; and eax, 0x48b4800; clc; jmp rax; 
0x0000000000401186: lodsb al, byte ptr [rsi]; sub eax, dword ptr [rax]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004b3b21: lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x0000000000494f61: lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000455790: lodsb al, byte ptr [rsi]; ret; 
0x0000000000494229: lodsb al, byte ptr [rsi]; stc; call rax; 
0x0000000000494229: lodsb al, byte ptr [rsi]; stc; call rax; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x000000000044e00d: lodsd eax, dword ptr [rsi]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004a645b: lodsd eax, dword ptr [rsi]; and al, 0x36; adc eax, 0x42d35a1d; cmp al, 0xe; push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004a79f8: lodsd eax, dword ptr [rsi]; xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x0000000000482e52: lodsd eax, dword ptr [rsi]; ret; 
0x000000000049422d: lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x000000000049422d: lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; cdq; stc; jmp rax; 
0x000000000042fe67: loope 0x2feb5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042feaf: loope 0x2fefd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042feed: loope 0x2ff3b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff25: loope 0x2ff73; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff63: loope 0x2ffb1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff9b: loope 0x2ffe9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffc3: loope 0x30011; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432837: loope 0x32885; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043287f: loope 0x328cd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004328bd: loope 0x3290b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004328f5: loope 0x32943; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432933: loope 0x32981; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043296b: loope 0x329b9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432993: loope 0x329e1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434a1a: loope 0x34a0f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000436807: loope 0x3680e; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a4a: loope 0x36a51; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043753a: loope 0x3752f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000440a7c: loope 0x40a9e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044407e: loope 0x44010; bsf rdx, rdx; lea r11, [rip + 0x50ee5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440f5: loope 0x4415d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044469e: loope 0x44630; bsf rdx, rdx; lea r11, [rip + 0x50945]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444715: loope 0x4477d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444cab: loope 0x44cad; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000044869e: loope 0x48693; ret; 
0x000000000044e02e: loope 0x4e033; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x000000000045905b: loope 0x59058; and eax, 0x34894a00; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x000000000046b515: loope 0x6b560; mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004738a8: loope 0x738ca; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000473c40: loope 0x73c42; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004747fe: loope 0x7480f; je 0x74820; ret; 
0x000000000047c98b: loope 0x7c98c; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000482ce7: loope 0x82d35; mov dword ptr [rdi], ecx; ret; 
0x0000000000482d18: loope 0x82d66; mov dword ptr [rdi - 8], ecx; ret; 
0x0000000000482d8d: loope 0x82ddb; mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000048a936: loope 0x8a937; jg 0x8a93a; add byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000048d48a: loope 0x8d4d5; mov edx, dword ptr [rsp]; mov esi, 1; mov edi, 1; call rax; 
0x00000000004900b6: loope 0x90113; ret; 
0x0000000000490d7e: loope 0x90ddb; pop rbp; pop r12; ret; 
0x00000000004942a1: loope 0x9429c; jmp qword ptr [rax - 0x1d]; 
0x00000000004942e1: loope 0x942dc; call qword ptr [rax]; 
0x0000000000494301: loope 0x942fc; jmp rax; 
0x0000000000494385: loope 0x94380; jmp rax; 
0x00000000004a68ca: mov ah, 0x13; ret; 
0x0000000000491ffa: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000049175a: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000494ae4: mov ah, 0x34; cli; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x00000000004a78db: mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004b4ad0: mov ah, 0x93; add byte ptr [rax], al; sub al, 0x10; std; call qword ptr [rax]; 
0x00000000004a6d70: mov ah, 0xa5; ret; 
0x00000000004a6174: mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x00000000004adb69: mov ah, 0xf6; call qword ptr [rdx]; 
0x00000000004866e2: mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x00000000004941b9: mov ah, 0xf9; call qword ptr [rax]; 
0x0000000000494199: mov ah, 0xf9; jmp qword ptr [rax - 0x4a]; 
0x00000000004127b4: mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004491d8: mov ah, 2; add byte ptr [rax], al; lea rdx, [rip + 0x4c399]; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x00000000004b0c2c: mov ah, 3; cli; jmp qword ptr [rdx]; 
0x00000000004abdd0: mov ah, 6; add byte ptr [rax], al; in al, dx; movsd dword ptr [rdi], dword ptr [rsi]; cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004a66c4: mov ah, bl; push rsi; ret; 
0x000000000048aed6: mov al, 0; add byte ptr [rax], al; ret; 
0x0000000000494650: mov al, 0x10; cli; inc dword ptr [rax + 0x10]; cli; call rax; 
0x0000000000494438: mov al, 0x13; cli; inc dword ptr [rax + 0x13]; cli; call rax; 
0x0000000000493e78: mov al, 0x23; stc; call rax; 
0x0000000000493e98: mov al, 0x2c; stc; call rax; 
0x0000000000493e98: mov al, 0x2c; stc; call rax; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x00000000004b4cf0: mov al, 0x2f; std; jmp qword ptr [rbp]; 
0x0000000000494b48: mov al, 0x37; cli; inc dword ptr [rax + 0x37]; cli; call rax; 
0x0000000000494e80: mov al, 0x4f; cli; inc eax; push rcx; cli; call rax; 
0x0000000000493f00: mov al, 0x51; stc; jmp qword ptr [rax]; 
0x0000000000495e68: mov al, 0x6b; sti; jmp rax; 
0x0000000000494ef0: mov al, 0x88; cli; call qword ptr [rax - 0x76]; 
0x0000000000494094: mov al, 0x93; stc; inc dword ptr [rax - 0x6c]; stc; call rax; 
0x0000000000494f10: mov al, 0x95; cli; call qword ptr [rax - 0x69]; 
0x00000000004ac1cc: mov al, 0xa; add byte ptr [rax], al; nop; sub al, 0xf6; jmp qword ptr [rax]; 
0x00000000004b3d40: mov al, 0xbc; cld; call qword ptr [rdx + 1]; 
0x00000000004406cf: mov al, 0xc5; std; xlatb; ret; 
0x0000000000494354: mov al, 0xda; stc; call qword ptr [rax + 0x70fff9dc]; fdivp st(1); call qword ptr [rax - 0x20]; 
0x0000000000494298: mov al, 0xdd; stc; call qword ptr [rax + 0x70fff9df]; loope 0x9429c; jmp qword ptr [rax - 0x1d]; 
0x0000000000494f78: mov al, 0xf1; cli; inc eax; int1; cli; call rax; 
0x0000000000492829: mov al, 0xf7; call rbx; 
0x0000000000492881: mov al, 0xf7; dec dword ptr [rax + 0x45fff7af]; mov al, 0xf7; jmp qword ptr [rcx]; 
0x000000000049287d: mov al, 0xf7; inc esi; mov al, 0xf7; dec dword ptr [rax + 0x45fff7af]; mov al, 0xf7; jmp qword ptr [rcx]; 
0x0000000000492889: mov al, 0xf7; jmp qword ptr [rcx]; 
0x0000000000486ab7: mov al, 0xf7; jmp qword ptr [rsi + 0xf]; 
0x000000000049500c: mov al, 0xf7; cli; inc eax; idiv edx; call rax; 
0x0000000000495034: mov al, 0xf8; cli; call rax; 
0x00000000004941d1: mov al, 0xf9; call qword ptr [rax]; 
0x00000000004941d1: mov al, 0xf9; call qword ptr [rax]; mov dl, 0xf9; jmp rax; 
0x00000000004941b1: mov al, 0xf9; jmp qword ptr [rax - 0x4e]; 
0x0000000000495054: mov al, 0xf9; cli; call rax; 
0x00000000004b1989: mov al, 0xfa; call qword ptr [rax]; 
0x00000000004b1971: mov al, 0xfa; call qword ptr [rbx]; 
0x00000000004b199d: mov al, 0xfa; call qword ptr [rdx]; 
0x00000000004b4620: mov al, 0xfb; cld; call qword ptr [rbx]; 
0x00000000004a39c1: mov al, 0xfc; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax - 0x50]; 
0x00000000004a39f5: mov al, 0xfc; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax]; 
0x00000000004b2b20: mov al, 0xfc; sti; jmp qword ptr [rbx]; 
0x000000000041ec89: mov al, byte ptr [rax + 2]; add byte ptr [rax], al; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000046f0b2: mov al, byte ptr [rax]; add byte ptr [rax], al; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004b41c9: mov al, byte ptr [rax]; add byte ptr [rsp + rbx*8], ah; cld; jmp qword ptr [rbx + 1]; 
0x000000000046362b: mov al, byte ptr [rbx - 0x76ffffe6]; ret 0xc389; 
0x0000000000443c56: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004424a6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000443c84: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004424c4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000443c30: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x0000000000442480: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x000000000042bf60: mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000443c94: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000004424d4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443c40: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000443c50: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004424a0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000442490: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004357e1: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x0000000000446f42: mov bh, 0x36; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x0000000000457acf: mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000444b48: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x00000000004a7ba4: mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x00000000004a6177: mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000413319: mov bh, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000443fb5: mov bh, 0xf; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004940dd: mov bh, 0xf9; jmp qword ptr [rax - 0x47]; 
0x000000000049411d: mov bh, 0xf9; jmp qword ptr [rax]; 
0x00000000004b3bc1: mov bh, 0xfc; jmp qword ptr [rdx]; 
0x0000000000487b6f: mov bh, 0xff; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048f657: mov bh, 0xff; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000487cfc: mov bh, 0xff; nop; add rsp, 8; ret; 
0x000000000045ab2a: mov bh, bh; and eax, 0xf3087400; ret; 
0x00000000004b58b1: mov bh, ch; jmp qword ptr [rbx]; 
0x00000000004afa35: mov bh, cl; call qword ptr [rbp + 1]; 
0x000000000044643e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045a362: mov bl, 0x4c; add edi, ebx; jmp rdi; 
0x00000000004a6173: mov bl, 0xb4; mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000415ab3: mov bl, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004ada91: mov bl, 0xf6; call qword ptr [rsi]; 
0x0000000000494155: mov bl, 0xf9; inc dword ptr [rax]; mov ch, 0xf9; jmp rax; 
0x0000000000494115: mov bl, 0xf9; jmp qword ptr [rax - 0x4b]; 
0x0000000000494135: mov bl, 0xf9; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x000000000044e90a: mov bl, byte ptr [rbx]; sti; jmp qword ptr [rsi - 0x70]; 
0x00000000004adc08: mov bpl, 0xf6; call qword ptr [rsi]; 
0x000000000044e2fa: mov byte ptr [r8 - 0x7d], r9b; ret 0x4830; 
0x00000000004024a4: mov byte ptr [r9 - 0x77], r8b; int 0x83; ret 0x8901; 
0x000000000044bfaa: mov byte ptr [rax + 0x28], 1; ret; 
0x0000000000446057: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000450b43: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044e2fb: mov byte ptr [rax - 0x7d], cl; ret 0x4830; 
0x00000000004b3fed: mov byte ptr [rax], al; add al, dl; int 0xfc; jmp qword ptr [rsi]; 
0x000000000044bb4f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000400de4: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000045ff03: mov byte ptr [rbp - 0x4f8], 0x20; mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045dc71: mov byte ptr [rbp - 0x918], al; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045dc70: mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000469186: mov byte ptr [rbp - 0x948], cl; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000469185: mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000046917c: mov byte ptr [rbp - 0x94c], al; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x000000000046917b: mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004af648: mov byte ptr [rbp - 7], cl; jmp qword ptr [rdi + 6]; 
0x000000000046eb87: mov byte ptr [rcx + 0xf], 0x4f; ret; 
0x0000000000459e63: mov byte ptr [rcx + rax - 0x3a], cl; jmp rsi; 
0x000000000048ad94: mov byte ptr [rcx + rax - 0x40], cl; jmp rax; 
0x00000000004024a5: mov byte ptr [rcx - 0x77], al; int 0x83; ret 0x8901; 
0x0000000000405dff: mov byte ptr [rcx], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f8f1: mov byte ptr [rcx], 0x48; shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000480e25: mov byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000045e9e3: mov byte ptr [rcx], cl; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000444898: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444208: mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044490e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044425e: mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444990: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442e0: mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000444746: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444126: mov byte ptr [rdi + 2], dh; ret; 
0x0000000000444762: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000444142: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004447b3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000444183: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000042f3fb: mov byte ptr [rdi - 1], dl; ret; 
0x0000000000412900: mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x00000000004af6a4: mov byte ptr [rdi], bh; add byte ptr [rax], al; or byte ptr [rbx - 7], dh; call qword ptr [rdi]; 
0x0000000000438522: mov byte ptr [rdi], cl; ret; 
0x0000000000447e05: mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000444720: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444100: mov byte ptr [rdi], dh; ret; 
0x0000000000435853: mov byte ptr [rdi], dl; ret; 
0x0000000000443c59: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004424a9: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000443c87: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004424c7: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000445f7b: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x0000000000443c32: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x0000000000442482: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x00000000004ac1a4: mov byte ptr [rdx], cl; add byte ptr [rax], al; mov byte ptr [rsi + rsi*8], ch; call qword ptr [rax]; 
0x000000000048b900: mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8f9: mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8f2: mov byte ptr [rip + 0x2308b5], 8; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8eb: mov byte ptr [rip + 0x2308bb], 8; mov byte ptr [rip + 0x2308b5], 8; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000047f2d9: mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x000000000041dbd9: mov byte ptr [rsi + rbx], cl; mov rax, rsi; pop rbx; ret; 
0x00000000004ac1a8: mov byte ptr [rsi + rsi*8], ch; call qword ptr [rax]; 
0x00000000004846bf: mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x0000000000484743: mov byte ptr [rsi], al; jne 0x84720; mov rax, rsi; ret; 
0x000000000041c940: mov byte ptr [rsp + 0x28], dl; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041e33f: mov ch, 0x29; add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret 0x2d9; 
0x00000000004a66c2: mov ch, 0x31; mov ah, bl; push rsi; ret; 
0x00000000004a7a03: mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000047200a: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000472104: mov ch, 0x90; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x00000000004a8d9f: mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004a974a: mov ch, 0xab; ret; 
0x000000000045e468: mov ch, 0xb0; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x00000000004a6175: mov ch, 0xb6; mov bh, 0xb8; mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x0000000000471397: mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x00000000004adc09: mov ch, 0xf6; call qword ptr [rsi]; 
0x0000000000494139: mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000494119: mov ch, 0xf9; inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x00000000004940f9: mov ch, 0xf9; jmp qword ptr [rax - 0x49]; 
0x0000000000494159: mov ch, 0xf9; jmp rax; 
0x00000000004a3c41: mov ch, 0xfc; jmp rsp; 
0x000000000042d116: mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000474810: mov ch, dh; and ch, 0xf; je 0x74830; add rax, 2; ret; 
0x000000000040e928: mov cl, 0x35; ret 0x2ade; 
0x0000000000493fe0: mov cl, 0x95; stc; inc dword ptr [rcx - 0x6a]; stc; jmp rcx; 
0x000000000043e9cb: mov cl, 0x99; add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000047f312: mov cl, 0xd4; and eax, dword ptr [rax]; add byte ptr [rbp + 0xf], dh; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000494131: mov cl, 0xf9; call qword ptr [rax - 0x4d]; 
0x0000000000494131: mov cl, 0xf9; call qword ptr [rax - 0x4d]; stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000494111: mov cl, 0xf9; inc dword ptr [rax + 0x60fff9b3]; mov ch, 0xf9; inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x0000000000494151: mov cl, 0xf9; jmp qword ptr [rax]; 
0x0000000000494171: mov cl, 0xf9; jmp rax; 
0x000000000046ea7b: mov cl, 3; add byte ptr [rax], al; lea rcx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000043ad05: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x00000000004574a2: mov cl, byte ptr [rcx - 1]; jmp qword ptr [rsi + 0x2e]; 
0x000000000042bf64: mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x0000000000438520: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004747fb: mov cl, dl; and cl, 0xf; je 0x74820; ret; 
0x00000000004a8e2c: mov cs, edi; ret 0x8b36; 
0x00000000004680b2: mov cs, word ptr [rdx - 0x77000000]; ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000043f28e: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x000000000043850e: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004448a4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444214: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004449a8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004442f8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042f844: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000435774: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000444740: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444120: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x000000000043850d: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004847ea: mov dh, 0; add byte ptr [rax], al; add rsp, 0x30; pop rbx; ret; 
0x000000000048dfbf: mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004166c2: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412baf: mov dh, 0; pop r12; pop r13; pop r14; ret; 
0x0000000000418750: mov dh, 0; ret; 
0x0000000000494480: mov dh, 0x12; cli; inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x0000000000422db1: mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x22da0; sub rax, 0x10; ret; 
0x0000000000435851: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000042bab4: mov dh, 0x16; sub eax, edx; ret; 
0x0000000000494970: mov dh, 0x33; cli; jmp qword ptr [rsi]; 
0x0000000000416bc3: mov dh, 0x36; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000494978: mov dh, 0x39; cli; inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x0000000000416f0d: mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x16f29; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000495774: mov dh, 0x3d; sti; push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x000000000046eb9c: mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000040da69: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000456892: mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000004694db: mov dh, 0x46; or al, 0x83; ret; 
0x0000000000445ff1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fe1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000045e0d9: mov dh, 0x47; or al, 0x83; ret; 
0x0000000000446011: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000446001: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445fd1: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004a7b62: mov dh, 0x4e; ret 0x474c; 
0x0000000000445fe5: mov dh, 0x56; sub eax, edx; ret; 
0x0000000000446015: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000000446005: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x0000000000445fd5: mov dh, 0x56; int1; sub eax, edx; ret; 
0x0000000000463348: mov dh, 0x67; or al, 0x89; ret 0xc689; 
0x0000000000405f9a: mov dh, 0x73; add dword ptr [rax - 0x77], ecx; ret; 
0x000000000040ef04: mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000478c4f: mov dh, 0x87; adc eax, 0x89000003; ret 0xe8c0; 
0x00000000004572c7: mov dh, 0x94; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004572e5: mov dh, 0x94; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457303: mov dh, 0x94; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004a6176: mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000475802: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000048c006: mov dh, 0xc0; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046e918: mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048835d: mov dh, 0xc0; neg eax; ret; 
0x0000000000484c2a: mov dh, 0xc0; pop rbx; pop rbp; pop r12; ret; 
0x000000000042bad4: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044e7d1: mov dh, 0xc0; xor edx, edx; add eax, 1; push rax; call rbx; 
0x00000000004480f1: mov dh, 0xc1; pop rbx; ret; 
0x00000000004480a1: mov dh, 0xc2; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x00000000004154c2: mov dh, 0xc5; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447bc5: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000450b42: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004a8da4: mov dh, 0xc7; ret 0xe71f; 
0x000000000048ad8f: mov dh, 0xc9; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000049edf0: mov dh, 0xd; add byte ptr [rax], al; mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x0000000000448131: mov dh, 0xd1; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042bada: mov dh, 0xd2; sub eax, edx; ret; 
0x000000000048c53f: mov dh, 0xdb; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x00000000004a98d7: mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000446f19: mov dh, 0xe; mov byte ptr [rdi], cl; ret; 
0x0000000000425bf1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042bf74: mov dh, 0xe; sub eax, ecx; ret; 
0x000000000048425d: mov dh, 0xe8; int 0x7b; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000049419d: mov dh, 0xf9; inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x000000000040d5a5: mov dh, 0xfa; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000041fda4: mov dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004166d1: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bc1: mov dh, 2; ret; 
0x00000000004846b9: mov dh, 4; adc byte ptr [rax - 0x7b], cl; dec dword ptr [rax + 0x48e57506]; mov eax, esi; ret; 
0x0000000000419156: mov dh, 6; sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x0000000000440084: mov dh, 7; lea rdx, [rip + 0x582f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ea14: mov dh, 7; lea rdx, [rip + 0x59963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce64: mov dh, 7; lea rdx, [rip + 0x5b513]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ad14: mov dh, 7; lea rdx, [rip + 0x5d663]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bf71: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bab1: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000425bf4: mov dh, 7; sub eax, ecx; ret; 
0x000000000044869c: mov dh, byte ptr [rcx + riz*8 - 0xd]; ret; 
0x000000000049411c: mov dil, 0xf9; jmp qword ptr [rax]; 
0x0000000000490d31: mov dl, 0x22; add byte ptr [rax + 0x39], cl; ret; 
0x000000000046bcd3: mov dl, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xc8; mov ecx, 1; jmp rax; 
0x0000000000494a1c: mov dl, 0x35; cli; inc dword ptr [rdx + 0x35]; cli; call rdx; 
0x000000000040eaad: mov dl, 0x6b; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000413702: mov dl, 0x6b; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000413088: mov dl, 0x6b; add byte ptr [rax - 0x77], cl; ret 0x294d; 
0x00000000004a9000: mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x00000000004a6172: mov dl, 0xb3; mov ah, 0xb5; mov dh, 0xb7; mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000494524: mov dl, 0xe; cli; inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x00000000004940b1: mov dl, 0xf9; call rax; 
0x0000000000494195: mov dl, 0xf9; inc dword ptr [rax + 0x60fff9b4]; mov dh, 0xf9; inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x00000000004941d5: mov dl, 0xf9; jmp rax; 
0x00000000004941b5: mov dl, 0xf9; push qword ptr [rax]; mov ah, 0xf9; call qword ptr [rax]; 
0x0000000000494724: mov dl, 4; cli; jmp qword ptr [rdx]; 
0x000000000043d0f7: mov dl, 5; add byte ptr [rbx + 0x148b8104], cl; xchg ecx, eax; sub eax, edx; ret; 
0x0000000000494ef1: mov dl, bh; call qword ptr [rax - 0x76]; 
0x000000000042f480: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000462525: mov ds, word ptr [rax + rax + 0x63490000]; ret 0x8944; 
0x0000000000438516: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000438501: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044bf41: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004709d9: mov dword ptr [rax + 0x10], edx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a19: mov dword ptr [rax + 0x10], esi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000471a18: mov dword ptr [rax + 0x18], edx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000044bfa7: mov dword ptr [rax + 0x20], ecx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfc1: mov dword ptr [rax + 0x20], esi; ret; 
0x0000000000471a14: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000470a5e: mov dword ptr [rax + 0x30], esi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000047190e: mov dword ptr [rax + 0x38], esp; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004709dd: mov dword ptr [rax + 0x40], ecx; ret; 
0x0000000000471a9a: mov dword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000430405: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430340: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da35: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d970: mov dword ptr [rax + 0x48], 0x148d601; xlatb; lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000450a74: mov dword ptr [rax + 0x4c], ecx; movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000471a92: mov dword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000450a7f: mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450a82: mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000419c90: mov dword ptr [rax + 8], ebx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004709ce: mov dword ptr [rax + 8], ecx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a12: mov dword ptr [rax + 8], edx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044bf45: mov dword ptr [rax + 8], edx; ret; 
0x000000000045c433: mov dword ptr [rax - 6], eax; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000484e3d: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000449590: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000465f5d: mov dword ptr [rax], 0x16; mov eax, edx; ret; 
0x000000000044a4e8: mov dword ptr [rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000040f292: mov dword ptr [rax], 0x16; xor eax, eax; ret; 
0x0000000000475920: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041dc0a: mov dword ptr [rax], 0xc; mov rax, rsi; ret; 
0x0000000000411c15: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048454b: mov dword ptr [rax], eax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000484509: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000484ded: mov dword ptr [rax], edi; pop rbx; ret; 
0x0000000000484d3d: mov dword ptr [rax], edx; add rsp, 8; ret; 
0x0000000000470f0d: mov dword ptr [rax], edx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004709d6: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a16: mov dword ptr [rax], edx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000041a712: mov dword ptr [rax], edx; mov rax, rdx; add rsp, 8; ret; 
0x0000000000484de1: mov dword ptr [rax], edx; pop rbx; ret; 
0x000000000047590d: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x000000000048d172: mov dword ptr [rax], edx; ret; 
0x000000000048d320: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004582ea: mov dword ptr [rbp - 0x48], eax; call 0x4d3c0; mov rdi, r14; call rbx; 
0x00000000004582e9: mov dword ptr [rbp - 0x48], r8d; call 0x4d3c0; mov rdi, r14; call rbx; 
0x000000000046c8c4: mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8be: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c391: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6eb: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c730: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c657: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c911: mov dword ptr [rbp - 0x4b8], edx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcc5: mov dword ptr [rbp - 0x4b8], edx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x24b24a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046c397: mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046b51a: mov dword ptr [rbp - 0x4c8], ecx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046b772: mov dword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000045ff17: mov dword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004601e6: mov dword ptr [rbp - 0x4d8], ecx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046cba3: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046cd20: mov dword ptr [rbp - 0x4e0], ecx; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cba2: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046cd1f: mov dword ptr [rbp - 0x4e0], r9d; mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004607a2: mov dword ptr [rbp - 0x4e8], ecx; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000046b76b: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000045ff10: mov dword ptr [rbp - 0x4e8], edi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004607a1: mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000046c6f1: mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6ac: mov dword ptr [rbp - 0x4f8], 0x20; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460102: mov dword ptr [rbp - 0x4f8], ecx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046c736: mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bbe2: mov dword ptr [rbp - 0x500], eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046c65d: mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bbd5: mov dword ptr [rbp - 0x508], ecx; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000460109: mov dword ptr [rbp - 0x508], ecx; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046bbd4: mov dword ptr [rbp - 0x508], r9d; mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000460108: mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046c917: mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000480faf: mov dword ptr [rbp - 0x70], eax; mov eax, 0x15; syscall; 
0x000000000044f042: mov dword ptr [rbp - 0x70], esi; call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004755bb: mov dword ptr [rbp - 0x77], 0xca8948c2; mov eax, 0x106; syscall; 
0x000000000045dc6a: mov dword ptr [rbp - 0x93c], ecx; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045dc69: mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000469175: mov dword ptr [rbp - 0x950], ebx; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000469174: mov dword ptr [rbp - 0x950], r11d; mov byte ptr [rbp - 0x94c], r8b; mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x00000000004585be: mov dword ptr [rbp - 0x98], edx; call 0x4d3c0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x00000000004850c0: mov dword ptr [rbp], eax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000471c46: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004181f9: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472845: mov dword ptr [rbp], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458752: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004129d7: mov dword ptr [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret; 
0x0000000000481c3e: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000412dbf: mov dword ptr [rbx + 0x10], eax; xor eax, eax; pop rbx; ret; 
0x000000000047f94e: mov dword ptr [rbx + 0x10], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004129cf: mov dword ptr [rbx + 0x18], eax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000481b73: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488385: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x000000000047f94a: mov dword ptr [rbx + 0x18], esp; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000488459: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x000000000045887f: mov dword ptr [rbx + 0x20], edx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416a06: mov dword ptr [rbx + 0x38], esi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000045acfd: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000416a7d: mov dword ptr [rbx + 0x40], esp; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416561: mov dword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000471c4a: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004181fd: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414592: mov dword ptr [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000470a64: mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000471911: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000041295b: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000413ce0: mov dword ptr [rbx + 0x90], eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048cd5b: mov dword ptr [rbx + 0x98], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412a4e: mov dword ptr [rbx + 0xd8], ecx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x000000000042e523: mov dword ptr [rbx + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000480dd5: mov dword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047259c: mov dword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412480: mov dword ptr [rbx + 8], eax; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004129d3: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000412dbb: mov dword ptr [rbx + 8], eax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047f439: mov dword ptr [rbx + 8], eax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004168f5: mov dword ptr [rbx + 8], eax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000458767: mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000459155: mov dword ptr [rbx + rbp*8], eax; lea rax, [rip + 0x25fae1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x0000000000459060: mov dword ptr [rbx + rsi*8], esi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x000000000049647c: mov dword ptr [rbx - 5], esi; call rax; 
0x000000000044f4d3: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dce: mov dword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047fc90: mov dword ptr [rbx], 0; or dword ptr [rip + 0x23a54b], 1; pop rbx; ret; 
0x0000000000462520: mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x00000000004855b3: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000416a0c: mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000048a3b9: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000416a80: mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004128d5: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000471a1b: mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x0000000000417140: mov dword ptr [rbx], edx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004164f2: mov dword ptr [rbx], edx; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000472599: mov dword ptr [rbx], esp; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417505: mov dword ptr [rcx + 0x130], eax; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004174fd: mov dword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004846b6: mov dword ptr [rcx + 0xf], 0x481004b6; test edi, edi; mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x0000000000400d9e: mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x0000000000462ff8: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000450dd5: mov dword ptr [rcx - 0x7d], 0x940f07fc; ret 0x1f0f; 
0x0000000000438517: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000438502: mov dword ptr [rcx - 4], ecx; ret; 
0x00000000004384f1: mov dword ptr [rcx - 8], ecx; ret; 
0x0000000000480e21: mov dword ptr [rcx], 0x1c68348; test dl, dl; jne 0x80dfa; movsx eax, cl; neg eax; ret; 
0x00000000004494ea: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000045ab4c: mov dword ptr [rcx], edx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000041646b: mov dword ptr [rdi + 0x10], eax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000419144: mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x00000000004448ad: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x00000000004448eb: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x000000000044496d: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x000000000044490b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044425b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x000000000044498d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442dd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044421d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004449d0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444320: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004449f0: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444340: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449b1: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444301: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004449d3: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444323: mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000416443: mov dword ptr [rdi + 0x18], eax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004449b5: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x00000000004449f3: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000041646f: mov dword ptr [rdi + 0x18], ecx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000444305: mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004848f3: mov dword ptr [rdi + 0x23], esi; add byte ptr [rax - 0x77], cl; add eax, 0x23776a; ret; 
0x0000000000419141: mov dword ptr [rdi + 0x24], ebp; mov dword ptr [rdi + 0x10], eax; pop rbx; pop rbp; ret; 
0x000000000047b5d0: mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000047b5d7: mov dword ptr [rdi + 0x308], eax; ret; 
0x000000000041643f: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416473: mov dword ptr [rdi + 0x48], edx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048d1b1: mov dword ptr [rdi + 0x98], esi; ret; 
0x0000000000417217: mov dword ptr [rdi + 0xa0], 0xffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417222: mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000044492d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x000000000044427d: mov dword ptr [rdi + 0xe], ecx; ret; 
0x00000000004448cb: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x000000000044494d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000044423b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000435695: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004354d8: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435778: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x0000000000435625: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435468: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444797: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004355b5: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004353f8: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444167: mov dword ptr [rdi + 3], edx; ret; 
0x0000000000444779: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x0000000000435388: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444159: mov dword ptr [rdi + 4], edx; ret; 
0x000000000044482b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000435318: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004441cb: mov dword ptr [rdi + 5], edx; ret; 
0x000000000044484b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x00000000004352a8: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004441db: mov dword ptr [rdi + 6], edx; ret; 
0x00000000004447e9: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x000000000044486b: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000435238: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004441a9: mov dword ptr [rdi + 7], edx; ret; 
0x000000000048460e: mov dword ptr [rdi + 8], eax; mov eax, 2; ret; 
0x0000000000482e98: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000416447: mov dword ptr [rdi + 8], eax; ret; 
0x0000000000484653: mov dword ptr [rdi + 8], ecx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004845ef: mov dword ptr [rdi + 8], ecx; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000482e24: mov dword ptr [rdi + 8], ecx; ret; 
0x0000000000444809: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004447cb: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000484400: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004842c4: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x000000000044419b: mov dword ptr [rdi + 8], edx; ret; 
0x00000000004833ed: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000447cab: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; ret; 
0x0000000000447e30: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000446f45: mov dword ptr [rdi + rdx - 2], ecx; mov word ptr [rdi], si; ret; 
0x0000000000447ca3: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000447e25: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000446f35: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000447c9b: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; ret; 
0x0000000000447e1a: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000446f27: mov dword ptr [rdi + rdx - 8], ecx; mov qword ptr [rdi], rsi; ret; 
0x000000000048d15c: mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000042f145: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f183: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000482d8f: mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000042f2f8: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f4: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f340: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f4c8: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a8: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f898: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa69: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc69: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe69: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f141: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f17f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2f4: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f0: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f33c: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f4c4: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a4: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f894: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa65: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc65: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe65: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f13d: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f17b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2f0: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3ec: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f338: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f4c0: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a0: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f890: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa61: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc61: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe61: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f139: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f177: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f4cc: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ce8: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f6ac: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434c68: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f89c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434be8: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fa6d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b59: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fc6d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434ac9: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fe6d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434a39: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f84d: mov dword ptr [rdi - 2], ecx; ret; 
0x000000000042f665: mov dword ptr [rdi - 2], edx; ret; 
0x000000000042f849: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042fc29: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f2ff: mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fc26: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe26: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430026: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000482d88: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042f149: mov dword ptr [rdi - 8], ecx; ret; 
0x000000000042f187: mov dword ptr [rdi - 8], edx; ret; 
0x000000000042f2fc: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f8: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f344: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d68: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044bd42: mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000412cb3: mov dword ptr [rdi], eax; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047f388: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x0000000000482d14: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482e1e: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048464e: mov dword ptr [rdi], eax; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004686da: mov dword ptr [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000482d81: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482e91: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000444765: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x00000000004447b7: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x0000000000444744: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444124: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000444795: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000444165: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004447e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004441a7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444807: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004441b7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000446c77: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000041565a: mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000444828: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444848: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004441d8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000444868: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004441e8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000444776: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444156: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004447c8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000444198: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446c83: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043523c: mov dword ptr [rdi], ecx; ret; 
0x0000000000447e1f: mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x0000000000444734: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x0000000000444752: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x00000000004447a4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x0000000000411c12: mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000435544: mov dword ptr [rdi], edx; ret; 
0x00000000004384ff: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000484496: mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004384ee: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000438513: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446f2c: mov dword ptr [rdi], esi; ret; 
0x0000000000412a55: mov dword ptr [rdx + 0x130], edi; pop rbx; ret; 
0x0000000000443cb7: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000004424e7: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000443c99: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x00000000004424d9: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000443d4b: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x0000000000443cc9: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000004424f9: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443d6b: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x0000000000443ce9: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442509: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443d09: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000443d8b: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442519: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443d29: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000443c1b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x000000000044246b: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000484457: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000484660: mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000048454d: mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000047c279: mov dword ptr [rdx], eax; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000443c44: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x0000000000443c72: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000443bc4: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x0000000000443c54: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004424a4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000443c82: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004424c2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000443c92: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000004424d2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000044957a: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000484498: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004845f5: mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000443cb2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000004424e2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000443cc4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000004424f4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443ce4: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442504: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443d04: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442514: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443d24: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442524: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000044982a: mov dword ptr [rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000443d44: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442534: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443d64: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442554: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d84: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442574: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443c14: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000442464: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442414: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000484dcd: mov dword ptr [rdx], eax; pop rbx; ret; 
0x00000000004182d8: mov dword ptr [rdx], eax; ret; 
0x0000000000490e5d: mov dword ptr [rip + 0x22b151], 0; add rsp, 8; ret; 
0x00000000004905d8: mov dword ptr [rip + 0x22b8a6], 0; add rsp, 8; ret; 
0x00000000004900af: mov dword ptr [rip + 0x22bc3b], ebx; jne 0x90098; pop rbx; ret; 
0x000000000048f560: mov dword ptr [rip + 0x22ce1e], 1; ret; 
0x000000000048f450: mov dword ptr [rip + 0x22cf2e], 1; ret; 
0x00000000004848f8: mov dword ptr [rip + 0x23776a], eax; ret; 
0x00000000004848dd: mov dword ptr [rip + 0x237785], eax; add rsp, 8; ret; 
0x0000000000481a19: mov dword ptr [rip + 0x23a62d], 0; add rsp, 8; ret; 
0x000000000047f2e1: mov dword ptr [rip + 0x23d0c9], eax; add rsp, 8; ret; 
0x000000000047f225: mov dword ptr [rip + 0x23d185], eax; ret; 
0x000000000044d386: mov dword ptr [rip + 0x26b72c], edx; pop rbx; ret; 
0x000000000044bc49: mov dword ptr [rip + 0x26e521], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041f786: mov dword ptr [rip + 0x29a0d4], eax; ret; 
0x000000000041f778: mov dword ptr [rip + 0x29a0ea], eax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f790: mov dword ptr [rip + 0x29c5d6], 0; ret; 
0x000000000041f76a: mov dword ptr [rip + 0x29c5e8], eax; lea rax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x00000000004191be: mov dword ptr [rip + 0x2a0648], eax; ret; 
0x00000000004191b4: mov dword ptr [rip + 0x2a0656], 1; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x000000000041917f: mov dword ptr [rip + 0x2a0663], eax; ret; 
0x000000000041915f: mov dword ptr [rip + 0x2a067b], eax; ret; 
0x0000000000419174: mov dword ptr [rip + 0x2a0696], 1; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x0000000000419154: mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x0000000000419055: mov dword ptr [rip + 0x2a07ed], eax; ret; 
0x0000000000419045: mov dword ptr [rip + 0x2a07f5], eax; ret; 
0x0000000000418ff5: mov dword ptr [rip + 0x2a07fd], eax; ret; 
0x0000000000418fe5: mov dword ptr [rip + 0x2a0815], eax; ret; 
0x000000000041a0c2: mov dword ptr [rip + 0x2a1c98], eax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000419660: mov dword ptr [rip + 0x2a2706], 0; ret; 
0x00000000004191d4: mov dword ptr [rip + 0x2a2bba], eax; ret; 
0x000000000041870c: mov dword ptr [rip + 0x2a3602], 0; ret; 
0x00000000004186a2: mov dword ptr [rip + 0x2a3670], edx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x0000000000400ddb: mov dword ptr [rip + 0x2bb03f], eax; add rsp, 0x88; pop rbx; ret; 
0x0000000000401813: mov dword ptr [rsi + 0x10], esi; syscall; 
0x0000000000401807: mov dword ptr [rsi + 8], eax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000421b6b: mov dword ptr [rsi - 0x7af0ffd7], eax; sti; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000446c86: mov dword ptr [rsi - 2], ecx; ret; 
0x0000000000446c79: mov dword ptr [rsi - 4], ecx; ret; 
0x00000000004787f1: mov dword ptr [rsi], 0xffffffff; xor eax, eax; ret; 
0x00000000004110a3: mov dword ptr [rsi], eax; call qword ptr [rbp + 0x30]; 
0x000000000048d19e: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047f392: mov dword ptr [rsi], eax; ret; 
0x000000000045ab41: mov dword ptr [rsi], ecx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047e6d9: mov dword ptr [rsi], edi; mov rax, rcx; ret; 
0x0000000000495744: mov dword ptr [rsi], edi; sti; jmp qword ptr [rsi]; 
0x000000000040180b: mov dword ptr [rsi], esi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041c94a: mov dword ptr [rsp + 0x10], ebx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041ca07: mov dword ptr [rsp + 0x10], edx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047e441: mov dword ptr [rsp + 0x18], eax; call 0x7dd70; add rsp, 0xd8; ret; 
0x0000000000449aca: mov dword ptr [rsp + 0x18], eax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x0000000000449ad4: mov dword ptr [rsp + 0x20], eax; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000041c945: mov dword ptr [rsp + 0x20], esi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000475826: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000449b91: mov dword ptr [rsp + 0xc], eax; call 0x4bdc0; mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000041c94f: mov dword ptr [rsp + 8], eax; call rcx; 
0x000000000041075f: mov dword ptr [rsp + 8], eax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004111de: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x000000000048a961: mov dword ptr [rsp], eax; call 0x8ace0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000489bb5: mov dword ptr [rsp], eax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489b63: mov dword ptr [rsp], eax; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000413f83: mov dword ptr [rsp], eax; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004132b2: mov dword ptr [rsp], ecx; mov rdi, rbx; call rax; 
0x000000000044958f: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000465f5c: mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000044a4e7: mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000040f291: mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x000000000047591f: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041dc09: mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x0000000000411c14: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047590c: mov dword ptr fs:[rax], edx; xor eax, eax; ret; 
0x00000000004494e9: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000449579: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449829: mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000446f34: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000435770: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000444772: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444152: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004447c3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000444193: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042f660: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042f840: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000444730: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000444110: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000048aa41: mov eax, 0; add byte ptr [rax - 0x7ab70000], al; ret 0x840f; 
0x0000000000448133: mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000400405: mov eax, 0; test rax, rax; je 0x412; call rax; 
0x0000000000400c0e: mov eax, 0; leave; ret; 
0x000000000044816b: mov eax, 0x10; pop rbx; ret; 
0x00000000004496ad: mov eax, 0x101; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044962c: mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000475649: mov eax, 0x101; syscall; 
0x00000000004755c2: mov eax, 0x106; syscall; 
0x000000000044a327: mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000047dea9: mov eax, 0x14; syscall; 
0x000000000044c014: mov eax, 0x15; syscall; 
0x0000000000423460: mov eax, 0x16; ret; 
0x00000000004494d0: mov eax, 0x18; syscall; 
0x00000000004494d0: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x000000000044bc73: mov eax, 0x19; syscall; 
0x000000000044bc73: mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000044a5c0: mov eax, 0x1c; syscall; 
0x000000000044a5c0: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x0000000000448179: mov eax, 0x20; pop rbx; ret; 
0x00000000004905db: mov eax, 0x22; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000488520: mov eax, 0x26; syscall; 
0x0000000000488520: mov eax, 0x26; syscall; cmp rax, -0xfff; jae 0x88530; ret; 
0x0000000000485290: mov eax, 0x27; syscall; 
0x0000000000485290: mov eax, 0x27; syscall; ret; 
0x0000000000448172: mov eax, 0x30; pop rbx; ret; 
0x00000000004754f0: mov eax, 0x3f; syscall; 
0x00000000004754f0: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x75500; ret; 
0x0000000000448187: mov eax, 0x40; pop rbx; ret; 
0x00000000004a6cbb: mov eax, 0x45155e93; ret 0x591c; 
0x00000000004499c7: mov eax, 0x48; syscall; 
0x0000000000469188: mov eax, 0x48fffff6; mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000449cab: mov eax, 0x4f; syscall; 
0x0000000000457b28: mov eax, 0x5b000000; pop r12; ret; 
0x0000000000414307: mov eax, 0x5b000000; pop rbp; pop r12; pop r13; ret; 
0x0000000000448180: mov eax, 0x60; pop rbx; ret; 
0x000000000044bca0: mov eax, 0x63; syscall; 
0x000000000044bca0: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x4bcb0; ret; 
0x0000000000475520: mov eax, 0x66; syscall; 
0x0000000000475520: mov eax, 0x66; syscall; ret; 
0x0000000000475540: mov eax, 0x68; syscall; 
0x0000000000475540: mov eax, 0x68; syscall; ret; 
0x0000000000475530: mov eax, 0x6b; syscall; 
0x0000000000475530: mov eax, 0x6b; syscall; ret; 
0x0000000000475550: mov eax, 0x6c; syscall; 
0x0000000000475550: mov eax, 0x6c; syscall; ret; 
0x000000000044815d: mov eax, 0x80; pop rbx; ret; 
0x000000000048996f: mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000046c781: mov eax, 0x8900001d; ret 0x349; 
0x0000000000486b84: mov eax, 0x89fd8945; ret 0xe283; 
0x000000000040180d: mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000044a590: mov eax, 0xa; syscall; 
0x000000000044a590: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a560: mov eax, 0xb; syscall; 
0x000000000044a560: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x00000000004941c1: mov eax, 0xb9d0fff9; stc; call rax; mov ebx, 0xbdd0fff9; stc; jmp qword ptr [rax - 0x50]; 
0x000000000040dbf2: mov eax, 0xba; syscall; 
0x00000000004a2890: mov eax, 0xba000004; add al, 0; add byte ptr [rsp + rax + 0x4be0000], bh; add byte ptr [rax], al; rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000494161: mov eax, 0xba90fff9; stc; call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x0000000000494141: mov eax, 0xbad0fff9; stc; call rax; mov esp, 0xbed0fff9; stc; jmp qword ptr [rax - 0x4f]; 
0x00000000004a6178: mov eax, 0xbcbbbab9; mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000474dc0: mov eax, 0xc9; syscall; 
0x0000000000474dc0: mov eax, 0xc9; syscall; ret; 
0x000000000044bdf9: mov eax, 0xca; xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000044bd25: mov eax, 0xca; syscall; 
0x000000000044bd52: mov eax, 0xca; syscall; pop rdx; pop rsi; ret; 
0x00000000004b51d4: mov eax, 0xd800009a; pop rsp; std; jmp qword ptr [rcx]; 
0x000000000049057a: mov eax, 0xdee90022; lahf; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000040dc20: mov eax, 0xe; syscall; 
0x0000000000449245: mov eax, 0xe5; syscall; 
0x000000000040dbfe: mov eax, 0xea; syscall; 
0x000000000045ad21: mov eax, 0xf; syscall; 
0x000000000042d2a9: mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000475728: mov eax, 0xfd6702e8; jmp qword ptr [rsi - 0x70]; 
0x00000000004582ec: mov eax, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x00000000004845e9: mov eax, 0xffffbfd1; mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x000000000048450b: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000045ab61: mov eax, 0xffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000449589: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a4e1: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000040f28b: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000475919: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000412cb6: mov eax, 0xffffffc0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000465f51: mov eax, 0xffffffc0; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000415651: mov eax, 0xffffffc0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000411c09: mov eax, 0xffffffc0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047fcb1: mov eax, 0xffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045abc1: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045aba1: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab81: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000470f2f: mov eax, 0xffffffff; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000411ed1: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411c57: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000412dd3: mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000411c1b: mov eax, 0xffffffff; ret; 
0x000000000046fc37: mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000484475: mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000046c35e: mov eax, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000417142: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004867bd: mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000047fca0: mov eax, 1; pop rbx; ret; 
0x0000000000475d81: mov eax, 1; leave; ret; 
0x000000000046863f: mov eax, 1; ret; 
0x000000000044988a: mov eax, 1; syscall; 
0x0000000000474613: mov eax, 2; ret; 
0x0000000000474871: mov eax, 3; ret; 
0x0000000000449b5a: mov eax, 3; syscall; 
0x0000000000474881: mov eax, 4; ret; 
0x000000000044955e: mov eax, 4; syscall; 
0x0000000000474891: mov eax, 5; ret; 
0x00000000004495ac: mov eax, 5; syscall; 
0x00000000004748a1: mov eax, 6; ret; 
0x000000000047556e: mov eax, 6; syscall; 
0x00000000004748b1: mov eax, 7; ret; 
0x0000000000448164: mov eax, 8; pop rbx; ret; 
0x000000000044e820: mov eax, 8; ret; 
0x0000000000449950: mov eax, 8; syscall; 
0x000000000044a4bc: mov eax, 9; syscall; 
0x00000000004718cd: mov eax, dword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000004719d6: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000470eab: mov eax, dword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041176a: mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040e9cd: mov eax, dword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000411771: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x0000000000465057: mov eax, dword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000471ea4: mov eax, dword ptr [rax + 0x4c]; ret; 
0x00000000004899bc: mov eax, dword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000481a41: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000481a31: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000459160: mov eax, dword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x000000000045dc66: mov eax, dword ptr [rax + rbx*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000046bcd7: mov eax, dword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000045ab6f: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004608cd: mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b42d1: mov eax, dword ptr [rax]; add byte ptr [rdi + rbx*8 - 4], cl; call qword ptr [rdi + 1]; 
0x000000000048add9: mov eax, dword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000048adc1: mov eax, dword ptr [rax]; mov qword ptr [r10], r8; ret; 
0x000000000045ab6c: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000047fcb9: mov eax, dword ptr [rax]; ret; 
0x0000000000416665: mov eax, dword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000416855: mov eax, dword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000048c906: mov eax, dword ptr [rbp + 8]; movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x0000000000401bec: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480fa2: mov eax, dword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x23f4c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000047d205: mov eax, dword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047c5a0: mov eax, dword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000484215: mov eax, dword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x8425e; leave; ret; 
0x000000000047c3c1: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047c27e: mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x0000000000484da2: mov eax, dword ptr [rbx + 0x10]; lea rdx, [rip + 0x25a00]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004165ad: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004165ce: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000484e39: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484de9: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000412db7: mov eax, dword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000484dd9: mov eax, dword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000416c99: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004170b9: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000041175f: mov eax, dword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040d2ae: mov eax, dword ptr [rbx + rax*8]; ja 0xd935; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000044bc46: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x26e521], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443cb4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000004424e4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000443c95: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000004424d5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443cc6: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000004424f6: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443d47: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442537: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443ce6: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442506: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443d67: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442557: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d06: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442516: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443d87: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442577: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443d26: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442526: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443c17: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000442467: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043d0fa: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043e9d2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000443c70: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000443c80: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x00000000004424c0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000443c90: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000004424d0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443cb0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x00000000004424e0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000004424b0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000443bc1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000443cc1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000004424f1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443ce1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442501: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443d01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442511: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443d21: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442521: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443d41: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442531: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443d61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442551: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442571: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443c11: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000442461: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442411: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000443c41: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000443c51: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004424a1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000442491: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000047cba6: mov eax, dword ptr [rdi + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000471cfe: mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x00000000004182e0: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000418308: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000045a562: mov eax, dword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a56f; call rax; 
0x0000000000490ced: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x0000000000418fc1: mov eax, dword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000471ea1: mov eax, dword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041643b: mov eax, dword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000418631: mov eax, dword ptr [rdi + 0x68]; ret; 
0x000000000048d131: mov eax, dword ptr [rdi + 0x90]; ret; 
0x000000000048d181: mov eax, dword ptr [rdi + 0x98]; ret; 
0x000000000048d1c1: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x000000000048d221: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x000000000048d211: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x000000000048d1d1: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x000000000048d191: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000418747: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x000000000048db41: mov eax, dword ptr [rdi + 8]; test rax, rax; je 0x8db58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000460e17: mov eax, dword ptr [rdi + rax*8]; jmp rax; 
0x000000000048d168: mov eax, dword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x000000000042cdb4: mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x00000000004462cc: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x464e0; xor eax, eax; ret; 
0x000000000042d013: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x000000000042d311: mov eax, dword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x000000000042cd87: mov eax, dword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x00000000004182d5: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004191b1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2a0656], 1; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x0000000000419171: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2a0696], 1; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x0000000000419151: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x00000000004191d1: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0x2a2bba], eax; ret; 
0x0000000000419051: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07ed], rax; ret; 
0x0000000000419041: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x0000000000418ff1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07fd], rax; ret; 
0x0000000000418fe1: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0x2a0815], rax; ret; 
0x0000000000471c73: mov eax, dword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047e68c: mov eax, dword ptr [rdx + 4]; ret; 
0x000000000043ad06: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047f8a6: mov eax, dword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000048cd58: mov eax, dword ptr [rdx]; mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000485490: mov eax, dword ptr [rip + 0x23742a]; ret; 
0x000000000047f381: mov eax, dword ptr [rip + 0x239d69]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x000000000047f38b: mov eax, dword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x000000000047f31a: mov eax, dword ptr [rip + 0x23d090]; ret; 
0x000000000047563f: mov eax, dword ptr [rip + 0x2471c7]; test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x00000000004579d1: mov eax, dword ptr [rip + 0x2644a1]; ret; 
0x000000000044f471: mov eax, dword ptr [rip + 0x26d4b1]; ret; 
0x000000000044bbf0: mov eax, dword ptr [rip + 0x270cca]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000449b50: mov eax, dword ptr [rip + 0x272cb6]; test eax, eax; jne 0x49b70; mov eax, 3; syscall; 
0x00000000004499bd: mov eax, dword ptr [rip + 0x272e49]; test eax, eax; jne 0x49a28; mov eax, 0x48; syscall; 
0x0000000000449880: mov eax, dword ptr [rip + 0x272f86]; test eax, eax; jne 0x498a0; mov eax, 1; syscall; 
0x00000000004497b0: mov eax, dword ptr [rip + 0x273056]; test eax, eax; jne 0x497d0; xor eax, eax; syscall; 
0x0000000000418611: mov eax, dword ptr [rip + 0x2a0b09]; ret; 
0x0000000000419656: mov eax, dword ptr [rip + 0x2a2714]; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x000000000048e072: mov eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000411e35: mov eax, dword ptr [rsi + 0x60]; add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048af01: mov eax, dword ptr [rsi + 0xa8]; ret; 
0x000000000048aed4: mov eax, dword ptr [rsi + 0xb0]; ret; 
0x000000000048aef1: mov eax, dword ptr [rsi + 0xb8]; ret; 
0x000000000041109b: mov eax, dword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048e091: mov eax, dword ptr [rsi + 8]; ret; 
0x000000000046bc9c: mov eax, dword ptr [rsi + rax*8]; jmp rax; 
0x0000000000460e61: mov eax, dword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004614b9: mov eax, dword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000470f0f: mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048d1f6: mov eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000044a7a6: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x0000000000411998: mov eax, dword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000401193: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x000000000041199d: mov eax, dword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004530dc: mov eax, dword ptr [rsp + 0x20]; call rax; 
0x0000000000449b9a: mov eax, dword ptr [rsp + 0xc]; add rsp, 0x10; pop rbx; ret; 
0x000000000044980a: mov eax, dword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000040df6d: mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000486c2f: mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000048ac66: mov eax, dword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a96a: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000047fcb8: mov eax, dword ptr fs:[rax]; ret; 
0x000000000041a880: mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040dc39: mov eax, eax; jne 0xdc5c; add rsp, 0x118; ret; 
0x00000000004756c3: mov eax, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000449a3a: mov eax, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004498b9: mov eax, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497e9: mov eax, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x000000000042265f: mov eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000474c34: mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x00000000004481a2: mov eax, eax; ret; 
0x0000000000448fb2: mov eax, eax; syscall; 
0x0000000000473a71: mov eax, eax; vzeroupper; ret; 
0x000000000044a649: mov eax, ebp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000422b12: mov eax, ebp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000041012b: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000044b184: mov eax, ebp; pop rbx; pop rbp; jmp rax; 
0x000000000044a632: mov eax, ebp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000410243: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040fcfe: mov eax, ebp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411bc2: mov eax, ebp; pop rbx; pop rbp; ret; 
0x00000000004126ed: mov eax, ebp; syscall; 
0x0000000000484403: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000044bde5: mov eax, ebx; and eax, 0xc; cmp eax, 4; je 0x4bdf0; ret; 
0x0000000000482593: mov eax, ebx; jne 0x825b5; add rsp, 0x110; pop rbx; ret; 
0x0000000000488417: mov eax, ebx; jne 0x8842c; add rsp, 0x40; pop rbx; ret; 
0x00000000004884fe: mov eax, ebx; jne 0x88514; add rsp, 0x50; pop rbx; ret; 
0x000000000048d486: mov eax, ebx; mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cdd0: mov eax, ebx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000410428: mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414665: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a3c0: mov eax, ebx; pop rbx; pop rbp; ret; 
0x00000000004129db: mov eax, ebx; pop rbx; ret; 
0x00000000004842c7: mov eax, ecx; adc eax, eax; ret; 
0x000000000047e72f: mov eax, ecx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x00000000004480b8: mov eax, ecx; shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x0000000000448103: mov eax, ecx; shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x0000000000465e45: mov eax, ecx; ret; 
0x000000000040dbeb: mov eax, ecx; syscall; 
0x00000000004128d3: mov eax, edi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041ab15: mov eax, edi; pop rbp; pop r12; ret; 
0x0000000000412904: mov eax, edi; ret; 
0x000000000041a715: mov eax, edx; add rsp, 8; ret; 
0x000000000047360c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000410590: mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x0000000000465f0e: mov eax, edx; pop rbp; pop r12; ret; 
0x0000000000410639: mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040ffd1: mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004481a6: mov eax, edx; pop rbx; ret; 
0x000000000041a721: mov eax, edx; ret; 
0x000000000040128a: mov eax, edx; syscall; 
0x0000000000449554: mov eax, esi; ja 0x49588; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004495a3: mov eax, esi; ja 0x495d8; mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000475564: mov eax, esi; ja 0x75598; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000040faa2: mov eax, esi; jne 0xfaaf; add rsp, 0xd0; pop rbx; ret; 
0x000000000040fc31: mov eax, esi; jne 0xfc3f; add rsp, 0xd8; pop rbx; pop rbp; ret; 
0x000000000047e681: mov eax, esi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000482677: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000413baa: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046fb64: mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041dbdd: mov eax, esi; pop rbx; ret; 
0x000000000041dc11: mov eax, esi; ret; 
0x0000000000448fa2: mov eax, esi; syscall; 
0x000000000048cea0: mov eax, esp; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000046ec98: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044bde4: mov eax, r11d; and eax, 0xc; cmp eax, 4; je 0x4bdf0; ret; 
0x0000000000422b11: mov eax, r13d; pop r12; pop r13; pop r14; pop r15; ret; 
0x00000000004126ec: mov eax, r13d; syscall; 
0x000000000040dc38: mov eax, r8d; jne 0xdc5c; add rsp, 0x118; ret; 
0x0000000000448fb1: mov eax, r8d; syscall; 
0x0000000000465e44: mov eax, r9d; ret; 
0x000000000041248e: mov eax, r9d; syscall; 
0x000000000042443b: mov ebp, 0x2002979; lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x000000000042cfa4: mov ebp, 0x4e6f0ff3; mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044d56b: mov ebp, 0x890026e8; ret 0xe083; 
0x00000000004941cd: mov ebp, 0xb060fff9; stc; call qword ptr [rax]; 
0x00000000004941cd: mov ebp, 0xb060fff9; stc; call qword ptr [rax]; mov dl, 0xf9; jmp rax; 
0x000000000048f9ab: mov ebp, 0xb60f0001; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004940e9: mov ebp, 0xbf50fff9; stc; jmp rax; 
0x000000000049f0a4: mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x00000000004a617d: mov ebp, 0xc1c0bfbe; ret 0xc4c3; 
0x0000000000416aea: mov ebp, 0xc4ebffff; nop; mov eax, 0xffffffff; ret; 
0x000000000042cfa9: mov ebp, 0xf66bdb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000473238: mov ebp, 0xf80148c0; ret; 
0x00000000004734bc: mov ebp, 0xf80148c6; ret; 
0x00000000004a78e6: mov ebp, 0xfb67d10d; ret; 
0x000000000046a1b8: mov ebp, 0xfffff730; call qword ptr [rbx + 0x38]; 
0x000000000046918e: mov ebp, 0xfffff730; call rax; 
0x0000000000469e83: mov ebp, 0xfffff730; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046922c: mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045dec5: mov ebp, 0xfffff758; call qword ptr [rbx + 0x38]; 
0x000000000045e46f: mov ebp, 0xfffff758; call qword ptr [rcx + 0x38]; 
0x000000000045dc7c: mov ebp, 0xfffff758; call rax; 
0x000000000045dd12: mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000046c189: mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000046b76c: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000045ff11: mov ebp, 0xfffffb18; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000045fca5: mov ebp, 0xfffffb48; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047dea4: mov ebp, 0xfffffb94; mov eax, 0x14; syscall; 
0x0000000000465065: mov ebp, 0xffffff40; call rax; 
0x00000000004126e7: mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x000000000048d647: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d4c9: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000469e78: mov ebp, dword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000048d653: mov ebp, dword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000411e0b: mov ebp, dword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004004cb: mov ebp, dword ptr [rbx]; add byte ptr [rsi - 0x70], ah; ret; 
0x0000000000411069: mov ebp, dword ptr [rdi + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048267d: mov ebp, ecx; nop; jmp rdx; 
0x000000000048b8ed: mov ebx, 0x8002308; mov byte ptr [rip + 0x2308b5], 8; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000046be33: mov ebx, 0x89000025; ret 0x349; 
0x000000000044d391: mov ebx, 0x89000281; ret; 
0x0000000000404837: mov ebx, 0x8c8bffff; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x000000000044bd84: mov ebx, 0xafb8341; je 0x4bd8c; ret; 
0x0000000000494125: mov ebx, 0xbd00fff9; stc; inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x00000000004940e5: mov ebx, 0xbd50fff9; stc; call qword ptr [rax - 0x41]; stc; jmp rax; 
0x00000000004941c9: mov ebx, 0xbdd0fff9; stc; jmp qword ptr [rax - 0x50]; 
0x00000000004a617b: mov ebx, 0xbfbebdbc; rol cl, 0xc2; ret; 
0x000000000042d129: mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040e274: mov ebx, 0xfffd29e9; jmp qword ptr [rsi + 0xf]; 
0x000000000046b765: mov ebx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000047c599: mov ebx, dword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000042f291: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f275: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000481b1d: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aab: mov ebx, dword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000412a4f: mov ebx, eax; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov edx, 0x130; pop rbx; ret; 
0x0000000000482551: mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x00000000004718c8: mov ebx, edi; jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000045a566: mov ebx, edi; test rax, rax; je 0x5a56f; call rax; 
0x00000000004753b0: mov ebx, esi; sub rsp, 8; syscall; 
0x000000000047fa0d: mov ebx, esp; mov rsi, rbx; syscall; 
0x000000000040dbe6: mov ecx, 0x27; mov eax, ecx; syscall; 
0x00000000004160b9: mov ecx, 0x48000000; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000047566c: mov ecx, 0x48000000; add esp, 0x78; ret; 
0x00000000004941c5: mov ecx, 0xbbd0fff9; stc; call rax; mov ebp, 0xb060fff9; stc; call qword ptr [rax]; 
0x000000000049edf4: mov ecx, 0xbc00000d; or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x00000000004a6179: mov ecx, 0xbdbcbbba; mov esi, 0xc2c1c0bf; ret; 
0x00000000004758d0: mov ecx, 0xc; mov eax, ecx; syscall; 
0x000000000045adde: mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000048d082: mov ecx, 0xdf; add byte ptr [rdx + riz*8 + 0x48], dh; add esp, 0x18; ret; 
0x000000000042d229: mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000422b70: mov ecx, 0xffff35e9; jmp qword ptr [rsi + 0x2e]; 
0x00000000004494e1: mov ecx, 0xffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000045ab44: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ff0a: mov ecx, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x000000000046bcda: mov ecx, 1; jmp rax; 
0x000000000044a511: mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004107f1: mov ecx, dword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004709d2: mov ecx, dword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000411808: mov ecx, dword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107ed: mov ecx, dword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000043850f: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x00000000004384fc: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004384ea: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000471e7b: mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x000000000043ad03: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004448e4: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444904: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444254: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444244: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000444965: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444985: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442d5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004448a5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444215: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004449c8: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000444318: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004449e8: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444338: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449a9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004442f9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444925: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444275: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004448c4: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444234: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444945: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444295: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000446f2f: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000446f1f: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000042f635: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f651: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f815: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f831: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9f5: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa11: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fbe5: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc01: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fde5: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe01: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffe5: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430001: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f845: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004462cf: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x464e0; xor eax, eax; ret; 
0x000000000042d016: mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x000000000042fc23: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe23: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430023: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042cdb1: mov ecx, dword ptr [rsi - 4]; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x0000000000434ce4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c64: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434be4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434d64: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042cd8b: mov ecx, dword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x0000000000434b55: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ac5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434a35: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042d30d: mov ecx, dword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x000000000042f455: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f471: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000444760: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000444140: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x00000000004447b1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000444181: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000435693: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435623: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004355b3: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000444770: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444150: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x00000000004447c1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000444191: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000444790: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000444160: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004447e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004441a1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444801: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004441b1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004354d5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435465: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353f5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435385: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435315: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004352a5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435235: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444821: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444841: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004441d1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000444861: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004441e1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435775: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000444741: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444121: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000452b18: mov ecx, dword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000045147f: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e5c: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004530cd: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000481b27: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab5: mov ecx, dword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045194f: mov ecx, dword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000481da8: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821d8: mov ecx, dword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000481f09: mov ecx, dword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004384fb: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000044e75b: mov ecx, ebp; call rbx; 
0x000000000048cea3: mov ecx, ebp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004740d3: mov ecx, ebp; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000471f24: mov ecx, edi; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000472100: mov ecx, edi; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000474225: mov ecx, edi; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000447bc1: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004170c0: mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x0000000000446f02: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004170fa: mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000474235: mov ecx, esi; call rbx; 
0x000000000048806a: mov ecx, esi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x000000000048d489: mov ecx, esp; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cdd3: mov ecx, esp; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000044e74e: mov ecx, esp; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000042479a: mov edi, 0x250001; or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x00000000004a9531: mov edi, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045f4ca: mov edi, 0x440f48c0; ret 0xae9; 
0x0000000000400a9c: mov edi, 0x6babd0; jmp rax; 
0x00000000004845eb: mov edi, 0x894cffff; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004a8d9c: mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000049412d: mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x00000000004943b1: mov edi, 0xc380fff9; stc; call rax; 
0x000000000042cdd9: mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000449634: mov edi, 0xffffff9c; syscall; 
0x000000000048cddc: mov edi, 1; call rax; 
0x000000000048db4c: mov edi, 1; jmp rax; 
0x0000000000449240: mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000040dc1b: mov edi, 2; mov eax, 0xe; syscall; 
0x000000000040ea04: mov edi, dword ptr [rax + 0x20]; call rdx; 
0x000000000047dea3: mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x000000000045fca4: mov edi, dword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004126e6: mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045dec4: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e46e: mov edi, dword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045dc7b: mov edi, dword ptr [rbp - 0x8a8]; call rax; 
0x000000000045dd11: mov edi, dword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000046a1b7: mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046918d: mov edi, dword ptr [rbp - 0x8d0]; call rax; 
0x0000000000469e82: mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046922b: mov edi, dword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000465064: mov edi, dword ptr [rbp - 0xc0]; call rax; 
0x000000000048d64f: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d4d1: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x000000000040df69: mov edi, dword ptr [rbp]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047c78f: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000482674: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000488451: mov edi, dword ptr [rdi]; call 0x8a3c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048837d: mov edi, dword ptr [rdi]; call 0x8a6c0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004a7ba6: mov edi, dword ptr [rdx]; ret; 
0x00000000004756ce: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000482554: mov edi, dword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000450d70: mov edi, dword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000451959: mov edi, dword ptr [rsp + 0x30]; call rbx; 
0x0000000000451489: mov edi, dword ptr [rsp + 0x38]; call rbx; 
0x0000000000451195: mov edi, dword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455e66: mov edi, dword ptr [rsp + 0x40]; call rbx; 
0x00000000004530d7: mov edi, dword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000449a41: mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000040118e: mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000416ccb: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004170f1: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x000000000044a7a1: mov edi, dword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004165d6: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000473dc2: mov edi, dword ptr [rsp]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000400c07: mov edi, eax; call 0xb5d; mov eax, 0; leave; ret; 
0x00000000004119a6: mov edi, eax; call qword ptr [rax + 8]; 
0x00000000004234c4: mov edi, eax; call rcx; 
0x000000000040dbf0: mov edi, eax; mov eax, 0xba; syscall; 
0x00000000004755ba: mov edi, eax; mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000449559: mov edi, eax; mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004495a7: mov edi, eax; mov rsi, rdx; mov eax, 5; syscall; 
0x0000000000475569: mov edi, eax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000470501: mov edi, ebp; call qword ptr [rax + 0x38]; 
0x0000000000489ae2: mov edi, ebp; call qword ptr [rax]; 
0x0000000000410766: mov edi, ebp; call qword ptr [rbp + 0x20]; 
0x0000000000489bbe: mov edi, ebp; call qword ptr [rcx]; 
0x0000000000422846: mov edi, ebp; call rax; 
0x00000000004740e1: mov edi, ebp; call rbx; 
0x000000000040e08e: mov edi, ebp; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000044a4ba: mov edi, ebp; mov eax, 9; syscall; 
0x000000000041248c: mov edi, ebp; mov eax, r9d; syscall; 
0x0000000000474232: mov edi, ebp; mov r9, r14; call rbx; 
0x0000000000411e32: mov edi, ebp; mov rax, qword ptr [rsi + 0x60]; add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000040dff9: mov edi, ebp; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000411802: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107e7: mov edi, ebp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000040e908: mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000044b17d: mov edi, ebx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000413e48: mov edi, ebx; call qword ptr [rax + 0x18]; 
0x00000000004137c4: mov edi, ebx; call qword ptr [rax + 0x40]; 
0x0000000000413f8a: mov edi, ebx; call qword ptr [rax + 0x78]; 
0x00000000004164bc: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x0000000000416b2d: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004178bd: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x000000000040ff78: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x0000000000410686: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000413abf: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x00000000004132b6: mov edi, ebx; call rax; 
0x000000000048ff23: mov edi, ebx; jne 0x8ff10; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004582e7: mov edi, ebx; mov dword ptr [rbp - 0x48], r8d; call 0x4d3c0; mov rdi, r14; call rbx; 
0x00000000004498be: mov edi, ebx; mov eax, 1; syscall; 
0x0000000000449b7c: mov edi, ebx; mov edx, eax; mov eax, 3; syscall; 
0x0000000000411766: mov edi, ebx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041666d: mov edi, ebx; pop rbx; pop rbp; jmp rax; 
0x0000000000470d8f: mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x00000000004497ee: mov edi, ebx; xor eax, eax; syscall; 
0x000000000047bbe9: mov edi, ecx; call 0x4a590; test eax, eax; js 0x7bc02; pop rbx; ret; 
0x000000000045ab23: mov edi, edi; and eax, 0x15894800; mov bh, bh; and eax, 0xf3087400; ret; 
0x000000000046cbb4: mov edi, edi; call qword ptr [rax + 0x38]; 
0x000000000046bbe9: mov edi, edi; call qword ptr [rcx + 0x38]; 
0x00000000004111e3: mov edi, edi; call rax; 
0x000000000044f04b: mov edi, edi; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046b9db: mov edi, edi; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000484741: mov edi, edx; mov byte ptr [rsi], al; jne 0x84720; mov rax, rsi; ret; 
0x0000000000448fa0: mov edi, edx; mov eax, esi; syscall; 
0x0000000000448faf: mov edi, edx; mov eax, r8d; syscall; 
0x00000000004585bb: mov edi, edx; mov qword ptr [rbp - 0x98], rdx; call 0x4d3c0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000047360f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000460117: mov edi, esi; call qword ptr [rax + 0x38]; 
0x00000000004582f3: mov edi, esi; call rbx; 
0x00000000004585d1: mov edi, esi; call rdx; 
0x000000000046079f: mov edi, esi; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000044f03f: mov edi, esi; mov qword ptr [rbp - 0x70], rsi; call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004601f3: mov edi, esi; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045fcae: mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000471f30: mov edi, esp; call rbx; 
0x00000000004832ce: mov edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x0000000000416bc6: mov edi, esp; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000449ca9: mov edi, esp; mov eax, 0x4f; syscall; 
0x000000000047ba90: mov edi, fs; and eax, dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000041248b: mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004480a6: mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000423709: mov edx, 0; cmp rax, -1; cmove rax, rdx; add rsp, 8; ret; 
0x000000000047f8a9: mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x00000000004400e6: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004704f8: mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000412a56: mov edx, 0x130; pop rbx; ret; 
0x000000000040127f: mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000457b21: mov edx, 0x48000000; add esp, 0xb8; pop rbx; pop r12; ret; 
0x0000000000473232: mov edx, 0x48000001; bsr eax, eax; add rax, rdi; ret; 
0x000000000044bbf6: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000040ec23: mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000044d372: mov edx, 0x89000281; ret; 
0x00000000004049ec: mov edx, 0x8949ffff; ret 0x149; 
0x0000000000404a1a: mov edx, 0x8c8bffff; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x00000000004941a5: mov edx, 0xbc10fff9; stc; call qword ptr [rax]; mov esi, 0xb0a0fff9; stc; jmp qword ptr [rax - 0x4e]; 
0x0000000000494185: mov edx, 0xbc50fff9; stc; call qword ptr [rax - 0x42]; stc; jmp rax; 
0x0000000000494165: mov edx, 0xbc90fff9; stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x0000000000494145: mov edx, 0xbcd0fff9; stc; call rax; mov esi, 0xb160fff9; stc; jmp qword ptr [rax]; 
0x00000000004866dc: mov edx, 0xe8000000; pop rbx; mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x000000000044a646: mov edx, 0xe889485b; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000040dbf3: mov edx, 0xf000000; add eax, 0x8944c689; ret 0xeab8; 
0x000000000042d1a9: mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048bd11: mov edx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x0000000000449571: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449821: mov edx, 0xffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000045ab4f: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450b47: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000465f57: mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x000000000044d37f: mov edx, 1; je 0x4d390; mov dword ptr [rip + 0x26b72c], edx; pop rbx; ret; 
0x000000000044bd4d: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000047e60c: mov edx, 1; mov eax, edx; pop rbx; pop rbp; ret; 
0x000000000047b520: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000412483: mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000045af41: mov edx, 8; mov eax, 0xe; syscall; 
0x000000000045ade4: mov edx, 8; mov eax, ecx; syscall; 
0x0000000000418300: mov edx, dword ptr [rax + 8]; jne 0x18310; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000470d2c: mov edx, dword ptr [rax]; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x00000000004607a9: mov edx, dword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004585ca: mov edx, dword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000048cea6: mov edx, dword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000484dc9: mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004132ab: mov edx, dword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000043e9cf: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d0fd: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044bf36: mov edx, dword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000416437: mov edx, dword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000045dd0d: mov edx, dword ptr [rdi + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000484ddd: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004111d7: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000484e44: mov edx, dword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004852e4: mov edx, dword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000401183: mov edx, dword ptr [rip + 0x2bac1f]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444315: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444335: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000469227: mov edx, dword ptr [rsi + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000435771: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000435690: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004354d1: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435620: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000435461: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444792: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000444162: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004355b0: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x00000000004353f1: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444773: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444153: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000435381: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444824: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c4: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000435311: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444844: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004441d4: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004352a1: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004447e3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004441a3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444864: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004441e4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435231: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444803: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004441b3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004447c4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000444194: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000434ce1: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c61: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434be1: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434b51: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ac1: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434a31: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f661: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042f841: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042fa20: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f458: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f638: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f818: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9f8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f654: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f834: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa14: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f474: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fc20: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe20: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430020: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f295: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fbe9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fde9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffe9: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f279: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc05: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe05: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430005: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2b1: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d61: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000444750: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000435700: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004447a1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000435541: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000444731: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000444111: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000482559: mov edx, dword ptr [rsp + 0x10]; call rdx; 
0x000000000040df61: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000474228: mov edx, dword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040dff1: mov edx, dword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004756c5: mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000481b22: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab0: mov edx, dword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045118b: mov edx, dword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000413bc3: mov edx, dword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000048c533: mov edx, dword ptr [rsp + rax*8 + 0x30]; ja 0x8c119; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000048cdd9: mov edx, dword ptr [rsp]; mov edi, 1; call rax; 
0x000000000048d48c: mov edx, dword ptr [rsp]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000449a36: mov edx, dword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000044811c: mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000040dbfc: mov edx, eax; mov eax, 0xea; syscall; 
0x0000000000449b7e: mov edx, eax; mov eax, 3; syscall; 
0x0000000000413f80: mov edx, eax; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004755bd: mov edx, eax; mov rdx, rcx; mov eax, 0x106; syscall; 
0x0000000000469e89: mov edx, ebp; call qword ptr [rbx + 0x38]; 
0x0000000000489b60: mov edx, ebp; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045e464: mov edx, ebp; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044e753: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000489add: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489bb9: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000004899c3: mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046a1b1: mov edx, ebp; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046505e: mov edx, ebp; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000045debe: mov edx, ebp; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e639: mov edx, ebx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004755c0: mov edx, ecx; mov eax, 0x106; syscall; 
0x000000000044bc71: mov edx, ecx; mov eax, 0x19; syscall; 
0x000000000044bc71: mov edx, ecx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000044a50f: mov edx, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x00000000004600ff: mov edx, ecx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004126e1: mov edx, ecx; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000045fcb4: mov edx, edi; call qword ptr [rax + 0x38]; 
0x00000000004137be: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000447bc8: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000046b525: mov edx, esi; call qword ptr [rax + 0x38]; 
0x00000000004740d9: mov edx, esi; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000044962a: mov edx, esi; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044a4b1: mov edx, esi; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000046cbaa: mov edx, esi; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046bbdc: mov edx, esi; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cd27: mov edx, esi; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004496b2: mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000044a321: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000047582d: mov edx, esp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004498b6: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497e6: mov edx, esp; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000411995: mov edx, esp; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000044a4b4: mov edx, esp; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000044a4b3: mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x000000000040dbfb: mov edx, r8d; mov eax, 0xea; syscall; 
0x00000000004531b2: mov es, word ptr [rax + rax]; add bh, dh; ret 0; 
0x0000000000449a02: mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000494ca4: mov esi, 0x2efffa2a; sub bh, dl; call ptr [rsi + 0x2efffa29]; sub edx, edi; call rsp; 
0x0000000000494930: mov esi, 0x40fffa33; cmp bh, dl; call rax; 
0x0000000000494930: mov esi, 0x40fffa33; cmp bh, dl; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000450a71: mov esi, 0x4889194a; movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450a7c: mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000047582f: mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004a8b9a: mov esi, 0x5fd2fe07; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000044bd1b: mov esi, 0x80; cmp eax, edx; jne 0x4bd2c; nop; mov eax, 0xca; syscall; 
0x000000000044be08: mov esi, 0x80; syscall; 
0x000000000047b525: mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044bd48: mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000044fbd2: mov esi, 0x83480147; ret; 
0x0000000000461fe1: mov esi, 0x8900000b; ret 0x349; 
0x000000000046b8e5: mov esi, 0x8900002b; ret 0x349; 
0x0000000000454e7e: mov esi, 0x89fffacc; ret 0xe283; 
0x000000000048cea9: mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004941ad: mov esi, 0xb0a0fff9; stc; jmp qword ptr [rax - 0x4e]; 
0x000000000049416d: mov esi, 0xb120fff9; stc; jmp rax; 
0x000000000049414d: mov esi, 0xb160fff9; stc; jmp qword ptr [rax]; 
0x0000000000450a78: mov esi, 0xbe0f1a4a; push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x00000000004a617e: mov esi, 0xc2c1c0bf; ret; 
0x0000000000465e3d: mov esi, 0xc7394406; ja 0x65e20; mov eax, r9d; ret; 
0x0000000000453eee: mov esi, 0xe8000001; fdiv st(2), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000448034: mov esi, 0xf000000; lahf; ret 0xea81; 
0x000000000042cea9: mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a6a06: mov esi, 0xfa1fb992; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x00000000004719dc: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000413e42: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004164b6: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000417953: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000460e64: mov esi, 1; jmp rax; 
0x000000000048d48f: mov esi, 1; mov edi, 1; call rax; 
0x000000000046eefc: mov esi, 1; mov rdi, rbx; call rax; 
0x000000000044a638: mov esi, 2; jmp rax; 
0x000000000044a64b: mov esi, 3; pop rbp; pop r12; jmp rax; 
0x0000000000449a3c: mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x000000000040e905: mov esi, dword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000459064: mov esi, dword ptr [rax + rsi*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x000000000048d64b: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d4cd: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000460110: mov esi, dword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046cbad: mov esi, dword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000004607b0: mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000044f04e: mov esi, dword ptr [rbp - 0x70]; call rsi; 
0x000000000045e467: mov esi, dword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000401076: mov esi, dword ptr [rbx]; jne 0x1290; call qword ptr [rbx + 0x10]; 
0x000000000044a79e: mov esi, dword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045dd09: mov esi, dword ptr [rdi + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000048844d: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a3c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000488379: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a6c0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000040df66: mov esi, dword ptr [rdi]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047f218: mov esi, dword ptr [rip + 0x23d192]; jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000043850c: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446f33: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x00000000004384fa: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000446f24: mov esi, dword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000004384e7: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004756ca: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000040118a: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000416cc6: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044e756: mov esi, dword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000047422d: mov esi, dword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041f376: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000041f991: mov esi, dword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x0000000000450d6b: mov esi, dword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000422841: mov esi, dword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000451954: mov esi, dword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000451484: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000451190: mov esi, dword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455e61: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004530d2: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000420259: mov esi, dword ptr [rsp + 0x68]; call rax; 
0x0000000000491ff9: mov esi, dword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x0000000000491759: mov esi, dword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x00000000004165d1: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000040dbf9: mov esi, eax; mov edx, r8d; mov eax, 0xea; syscall; 
0x000000000046bbdf: mov esi, eax; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cd2a: mov esi, eax; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004498bc: mov esi, ebp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497ec: mov esi, ebp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000473dbf: mov esi, ebp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000045e63c: mov esi, ebp; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000040e08b: mov esi, ebp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004234c1: mov esi, ebp; mov rdi, rax; call rcx; 
0x000000000044a4b7: mov esi, ebp; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000413f87: mov esi, ebp; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413abc: mov esi, ebp; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000421e72: mov esi, ebp; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000040e9f4: mov esi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000047d1fb: mov esi, ebp; xor eax, eax; call 0x7e510; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000412489: mov esi, ebx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004601f0: mov esi, ebx; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000047fa10: mov esi, ebx; syscall; 
0x000000000045addc: mov esi, ecx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000040dc19: mov esi, ecx; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000046b517: mov esi, ecx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000045dec1: mov esi, ecx; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046b9d8: mov esi, ecx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000044a325: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000449632: mov esi, edi; mov edi, 0xffffff9c; syscall; 
0x000000000048db4a: mov esi, edi; mov edi, 1; jmp rax; 
0x000000000045dc78: mov esi, edi; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000040dff6: mov esi, edi; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000046505b: mov esi, edi; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000044955c: mov esi, edx; mov eax, 4; syscall; 
0x00000000004495aa: mov esi, edx; mov eax, 5; syscall; 
0x000000000047556c: mov esi, edx; mov eax, 6; syscall; 
0x0000000000469183: mov esi, esi; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000465061: mov esi, esi; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004704fe: mov esi, esi; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004137c1: mov esi, esi; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000044923e: mov esi, esp; mov edi, 1; mov eax, 0xe5; syscall; 
0x00000000004126e4: mov esi, esp; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000489ae0: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489bbc: mov esi, esp; mov edi, ebp; call qword ptr [rcx]; 
0x00000000004899c6: mov esi, esp; mov edi, ebp; call rax; 
0x000000000046a1b4: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000469e7f: mov esi, esp; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000045fcab: mov esi, esp; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000470d8c: mov esi, esp; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000470d8b: mov esi, r12d; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000444082: mov esp, 0x1d8d4cd2; in eax, 0xe; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044466a: mov esp, 0x1d8d4cd2; jge 0x4467a; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444645: mov esp, 0x1d8d4cd2; movabs byte ptr [0x49930c6349000509], al; lea ecx, [rbx + rcx]; jmp rcx; 
0x00000000004446a2: mov esp, 0x1d8d4cd2; or dword ptr [rip + 0xc634900], r8d; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444008: mov esp, 0x1d8d4cd2; pop rdi; syscall; 
0x0000000000444025: mov esp, 0x1d8d4cd2; syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040d33b: mov esp, 0x24448b48; sub byte ptr [rax - 0x7d], cl; ret; 
0x00000000004946e4: mov esp, 0x2cfffa04; add al, 0xfa; call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; 
0x00000000004acbd8: mov esp, 0x4000014; push -0xa; call qword ptr [rax]; 
0x000000000042b341: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042b371: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042b361: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000440682: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406a2: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406e0: mov esp, 0x48d231c0; lea eax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440662: mov esp, 0x48d231c0; lea eax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000042d0a4: mov esp, 0x4e6f0ff3; mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040480f: mov esp, 0x8949ffff; ret 0x149; 
0x0000000000417962: mov esp, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000000444c50: mov esp, 0xa8000000; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x00000000004866d7: mov esp, 0xba000241; mov edx, 0xe8000000; pop rbx; mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x00000000004400e4: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004a2a98: mov esp, 0xbe000005; add eax, 0x5c00000; add byte ptr [rax], al; ret 5; 
0x0000000000494189: mov esp, 0xbe50fff9; stc; jmp rax; 
0x0000000000494169: mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x0000000000494149: mov esp, 0xbed0fff9; stc; jmp qword ptr [rax - 0x4f]; 
0x0000000000474a02: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440bc2: mov esp, 0xc08348c0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b862: mov esp, 0xc08348c0; add rax, rdi; vzeroupper; ret; 
0x0000000000440ba2: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042b852: mov esp, 0xc08348c0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x000000000042b11a: mov esp, 0xc22948c0; jbe 0x2b3c0; add rax, rdi; add rax, rcx; ret; 
0x000000000042b381: mov esp, 0xc22948c0; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b391: mov esp, 0xc22948c0; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b3a1: mov esp, 0xc22948c0; jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3b1: mov esp, 0xc22948c0; jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b7d2: mov esp, 0xc23948c0; jbe 0x2b830; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000042b7f2: mov esp, 0xc23948c0; jbe 0x2b830; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000042b812: mov esp, 0xc23948c0; jbe 0x2b830; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c2: mov esp, 0xc23948c0; jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x0000000000473ab2: mov esp, 0xc63948c0; jbe 0x73b30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x0000000000440775: mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x0000000000474518: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a83: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000428932: mov esp, 0xd32949d2; jbe 0x28944; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a092: mov esp, 0xd32949d2; jbe 0x2a0a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b072: mov esp, 0xd32949d2; jbe 0x2b084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000046fd04: mov esp, 0xd824; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000048d152: mov esp, 0xd837; add byte ptr [rax], al; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x00000000004900b2: mov esp, 0xe1750022; pop rbx; ret; 
0x00000000004abbd8: mov esp, 0xe4000004; xchg esp, eax; cmc; call rsp; 
0x00000000004addd8: mov esp, 0xf5000026; cmc; call qword ptr [rsi]; 
0x000000000042d0a9: mov esp, 0xf66bcb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000474907: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ad7: mov esp, 0xf80148c0; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b42b: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000042b8e7: mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x00000000004749c2: mov esp, 0xf80148c0; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b92: mov esp, 0xf80148c0; sub rax, rdx; vzeroupper; ret; 
0x000000000042b351: mov esp, 0xf80148c0; ret; 
0x000000000042b842: mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000048d4c5: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000048267a: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x000000000048d657: mov esp, ecx; ret; 
0x0000000000449ca6: mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000400b85: mov esp, esi; ret; 
0x000000000045292d: mov fs, word ptr [rbx]; add eax, 0x29480000; ret 0x349; 
0x0000000000456ead: mov gs, esi; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x000000000048adc3: mov qword ptr [r10], r8; ret; 
0x0000000000470a5d: mov qword ptr [r8 + 0x30], rsi; cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x20; pop rbx; ret; 
0x000000000048454a: mov qword ptr [r8], rax; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x0000000000484508: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000041a711: mov qword ptr [r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x00000000004384f0: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044bf40: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004709d8: mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a18: mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000471a17: mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000044bfa6: mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfc0: mov qword ptr [rax + 0x20], rsi; ret; 
0x0000000000471a13: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; mov dword ptr [rbx], ecx; xor eax, eax; pop rbx; ret; 
0x000000000047190d: mov qword ptr [rax + 0x38], r12; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004709dc: mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000471a99: mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000471a91: mov qword ptr [rax + 0x50], 0; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x0000000000419c8f: mov qword ptr [rax + 8], rbx; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004709cd: mov qword ptr [rax + 8], rcx; mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a11: mov qword ptr [rax + 8], rdx; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044bf44: mov qword ptr [rax + 8], rdx; ret; 
0x0000000000484e3c: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484dec: mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000484d3c: mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000470f0c: mov qword ptr [rax], rdx; mov eax, dword ptr [rsi]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004709d5: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000470a15: mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rsi; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000484de0: mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048d171: mov qword ptr [rax], rdx; ret; 
0x000000000048d31f: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000046c8bd: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4b0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c390: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4c8], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6ea: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x4f0], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c72f: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x500], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c656: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x508], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c910: mov qword ptr [rbp - 0x4b8], rdx; mov dword ptr [rbp - 0x510], 1; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046bcc4: mov qword ptr [rbp - 0x4b8], rdx; movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x24b24a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000046b519: mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046b771: mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000045ff16: mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x00000000004601e5: mov qword ptr [rbp - 0x4d8], rcx; sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046b76a: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000045ff0f: mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d8], 0; jmp rax; 
0x0000000000460101: mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046bbe1: mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x0000000000480fae: mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000044f041: mov qword ptr [rbp - 0x70], rsi; call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x00000000004585bd: mov qword ptr [rbp - 0x98], rdx; call 0x4d3c0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x00000000004850bf: mov qword ptr [rbp], rax; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000471c45: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004181f8: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472844: mov qword ptr [rbp], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458751: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004129d6: mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000481c3d: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000412dbe: mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047f94d: mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047f949: mov qword ptr [rbx + 0x18], r12; mov qword ptr [rbx + 0x10], rdx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004129ce: mov qword ptr [rbx + 0x18], rax; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000481b72: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488384: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000488458: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000045887e: mov qword ptr [rbx + 0x20], rdx; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416a05: mov qword ptr [rbx + 0x38], rsi; cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x20; pop rbx; ret; 
0x0000000000416a7c: mov qword ptr [rbx + 0x40], r12; mov dword ptr [rbx], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416560: mov qword ptr [rbx + 0x50], 0; pop rbx; ret; 
0x0000000000471c49: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004181fc: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041295a: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000413cdf: mov qword ptr [rbx + 0x90], rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048cd5a: mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412a4d: mov qword ptr [rbx + 0xd8], rcx; mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000480dd4: mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047259b: mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x000000000041247f: mov qword ptr [rbx + 8], r8; mov edx, 1; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x00000000004129d2: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret; 
0x0000000000412dba: mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x000000000047f438: mov qword ptr [rbx + 8], rax; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004168f4: mov qword ptr [rbx + 8], rax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045905f: mov qword ptr [rbx + r14*8], rsi; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x0000000000459154: mov qword ptr [rbx + rbp*8], rax; lea rax, [rip + 0x25fae1]; mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x000000000044f4d2: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480dcd: mov qword ptr [rbx], 0; mov qword ptr [rbx + 8], 0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000047fc8f: mov qword ptr [rbx], 0; or dword ptr [rip + 0x23a54b], 1; pop rbx; ret; 
0x0000000000472598: mov qword ptr [rbx], r12; mov qword ptr [rbx + 8], 0x400; pop rbx; pop rbp; pop r12; ret; 
0x00000000004855b2: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048a3b8: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000417504: mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004174fc: mov qword ptr [rcx + 0x50], 0; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000462ff7: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000045ab4b: mov qword ptr [rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000482e9e: mov qword ptr [rdi + 0x10], r9; ret; 
0x000000000041646a: mov qword ptr [rdi + 0x10], rax; mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000044496c: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x000000000044498c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442dc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442bc: mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004449cf: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044431f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004449ef: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044433f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449b0: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444300: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000416442: mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041646e: mov qword ptr [rdi + 0x18], rcx; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047b5d6: mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000041643e: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416472: mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048d1b0: mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417216: mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000417221: mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000044492c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x000000000044427c: mov qword ptr [rdi + 0xe], rcx; ret; 
0x000000000044494c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x000000000044429c: mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004354d7: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435467: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353f7: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435387: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044482a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000435317: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004441ca: mov qword ptr [rdi + 5], rdx; ret; 
0x000000000044484a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004352a7: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004441da: mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044486a: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000435237: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004441ea: mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004843ff: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x00000000004842c3: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000482e97: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000484652: mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x00000000004845ee: mov qword ptr [rdi + 8], r9; sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000482e23: mov qword ptr [rdi + 8], r9; ret; 
0x000000000048460d: mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000416446: mov qword ptr [rdi + 8], rax; ret; 
0x00000000004833ec: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000447c9a: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; ret; 
0x0000000000447e19: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x0000000000446f26: mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000048d15b: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000042f144: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f182: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000482d8e: mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042f2f7: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f3: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f33f: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f4c7: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a7: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f897: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa68: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc68: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe68: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f140: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f17e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2f3: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3ef: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f33b: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f4c3: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a3: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f893: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa64: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc64: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe64: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f13c: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f17a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2ef: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3eb: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f337: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f4bf: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f69f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f88f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa60: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc60: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe60: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f138: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f176: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f4cb: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ce7: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f6ab: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434c67: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f89b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434be7: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fa6c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b58: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fc6c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434ac8: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fe6c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434a38: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000482d87: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d19: mov qword ptr [rdi - 8], r9; ret; 
0x000000000042f148: mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f186: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2fb: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f7: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f343: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d67: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000482d80: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482e90: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004686d9: mov qword ptr [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000482d13: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482e1d: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048464d: mov qword ptr [rdi], r8; sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000482ce8: mov qword ptr [rdi], r9; ret; 
0x000000000047f387: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x00000000004447b6: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004447e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004441a6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444806: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004441b6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000444827: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444847: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004441d7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000444867: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004441e7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004447c7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000444197: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000043523b: mov qword ptr [rdi], rcx; ret; 
0x0000000000447e1e: mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000004447a3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000435543: mov qword ptr [rdi], rdx; ret; 
0x0000000000484495: mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x00000000004384ed: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000446f2b: mov qword ptr [rdi], rsi; ret; 
0x0000000000412a54: mov qword ptr [rdx + 0x130], rdi; pop rbx; ret; 
0x0000000000443d4a: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000044253a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443d6a: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000044255a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d8a: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x000000000044257a: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443c1a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x000000000044246a: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000443bc3: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000443cc3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000004424f3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443ce3: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442503: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443d03: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442513: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443d23: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442523: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443d43: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442533: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443d63: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442553: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d83: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442573: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443c13: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000442463: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442413: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000484dcc: mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004182d7: mov qword ptr [rdx], rax; ret; 
0x0000000000490e5c: mov qword ptr [rip + 0x22b151], 0; add rsp, 8; ret; 
0x00000000004905d7: mov qword ptr [rip + 0x22b8a6], 0; add rsp, 8; ret; 
0x00000000004900ae: mov qword ptr [rip + 0x22bc3b], rbx; jne 0x90098; pop rbx; ret; 
0x00000000004848f7: mov qword ptr [rip + 0x23776a], rax; ret; 
0x00000000004848dc: mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x0000000000481a18: mov qword ptr [rip + 0x23a62d], 0; add rsp, 8; ret; 
0x000000000047f2e0: mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x000000000047f224: mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000044bc48: mov qword ptr [rip + 0x26e521], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041f785: mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f777: mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f769: mov qword ptr [rip + 0x29c5e8], rax; lea rax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041917e: mov qword ptr [rip + 0x2a0663], rax; ret; 
0x000000000041915e: mov qword ptr [rip + 0x2a067b], rax; ret; 
0x0000000000419054: mov qword ptr [rip + 0x2a07ed], rax; ret; 
0x0000000000419044: mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x0000000000418ff4: mov qword ptr [rip + 0x2a07fd], rax; ret; 
0x0000000000418fe4: mov qword ptr [rip + 0x2a0815], rax; ret; 
0x000000000041a0c1: mov qword ptr [rip + 0x2a1c98], rax; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041870b: mov qword ptr [rip + 0x2a3602], 0; ret; 
0x00000000004186a1: mov qword ptr [rip + 0x2a3670], rdx; add dword ptr [rip + 0x2a3665], 1; ret; 
0x0000000000400dda: mov qword ptr [rip + 0x2bb03f], rax; add rsp, 0x88; pop rbx; ret; 
0x0000000000401812: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000401806: mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004787f0: mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x00000000004110a2: mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f391: mov qword ptr [rsi], rax; ret; 
0x000000000045ab40: mov qword ptr [rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000047e6d8: mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x000000000040180a: mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041c949: mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041ca06: mov qword ptr [rsp + 0x10], rdx; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000047e440: mov qword ptr [rsp + 0x18], rax; call 0x7dd70; add rsp, 0xd8; ret; 
0x0000000000449ac9: mov qword ptr [rsp + 0x18], rax; lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x0000000000449ad3: mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000041c944: mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000475825: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000041c94e: mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000041075e: mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004111dd: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000489bb4: mov qword ptr [rsp], r8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000489b62: mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000413f82: mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x000000000048a960: mov qword ptr [rsp], rax; call 0x8ace0; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000004132b1: mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000041a710: mov qword ptr fs:[r8], rdx; mov rax, rdx; add rsp, 8; ret; 
0x000000000045ab4a: mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ab55: mov qword ptr fs:[rdx], rax; ret; 
0x000000000045ab3f: mov qword ptr fs:[rsi], rcx; mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000412959: mov qword ptr ss:[rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000446f25: mov qword ptr ss:[rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000048c532: mov r10, qword ptr [rsp + rax*8 + 0x30]; ja 0x8c119; movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000044bc70: mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000044bc70: mov r10, rcx; mov eax, 0x19; syscall; cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000044a320: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000045af40: mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000045ade3: mov r10d, 8; mov eax, ecx; syscall; 
0x000000000044a50e: mov r10d, ecx; mov ecx, 9; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000044a4b0: mov r10d, r14d; mov edx, r12d; mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x00000000004755bc: mov r10d, r8d; mov rdx, rcx; mov eax, 0x106; syscall; 
0x000000000047c598: mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000042f290: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f274: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000481b1c: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aaa: mov r11, qword ptr [rsp + 0x30]; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000482550: mov r11, r8; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000046b764: mov r11d, 0xffffffff; mov qword ptr [rbp - 0x4e8], rdi; mov qword ptr [rbp - 0x4d0], 0; lea rsi, [rip + 0x24b69d]; jmp rax; 
0x000000000048d4c4: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000449ca5: mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x000000000048d646: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d4c8: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000469e77: mov r13, qword ptr [rbp - 0x8f8]; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000048d64a: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d4cc: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000401075: mov r14, qword ptr [rbx]; jne 0x1290; call qword ptr [rbx + 0x10]; 
0x000000000046505a: mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000046b516: mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000045fca3: mov r15, qword ptr [rbp - 0x4b8]; mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000048d64e: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000048d4d0: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047c78e: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000482673: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x00000000004a9530: mov r15d, 0x3ca045d6; stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000048adc0: mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048add8: mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000041199c: mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x000000000048ce9f: mov r8, r12; mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000048d485: mov r8, rbx; mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cdcf: mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000047e680: mov r8, rsi; lea rcx, [rdx + 4]; cmp rcx, r8; jne 0x7e62b; mov eax, dword ptr [rdx + 4]; ret; 
0x0000000000492888: mov r8b, 0xf7; jmp qword ptr [rcx]; 
0x00000000004582eb: mov r8d, 0xff50cee8; dec dword ptr [rcx + rcx*4 - 9]; call rbx; 
0x000000000046c35d: mov r8d, 1; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004756c2: mov r8d, eax; mov edx, dword ptr [rsp + 0x1c]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000449a39: mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004498b8: mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497e8: mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x00000000004107f0: mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000452b17: mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000045147e: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e5b: mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004530cc: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000045194e: mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000044e75a: mov r9, r13; call rbx; 
0x0000000000474234: mov r9, r14; call rbx; 
0x0000000000400404: mov rax, 0; test rax, rax; je 0x412; call rax; 
0x000000000045ad20: mov rax, 0xf; syscall; 
0x000000000045ab60: mov rax, 0xffffffffffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000449588: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044a4e0: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov rax, 0xffffffffffffffff; ret; 
0x000000000040f28a: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; xor eax, eax; ret; 
0x0000000000475918: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x0000000000412cb5: mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000465f50: mov rax, 0xffffffffffffffc0; mov edx, 0xffffffff; mov dword ptr fs:[rax], 0x16; mov eax, edx; ret; 
0x0000000000415650: mov rax, 0xffffffffffffffc0; or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000411c08: mov rax, 0xffffffffffffffc0; or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047fcb0: mov rax, 0xffffffffffffffc0; pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x000000000045abc0: mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045aba0: mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab80: mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x0000000000417870: mov rax, 0xffffffffffffffff; ret; 
0x0000000000474850: mov rax, 1; ret; 
0x0000000000474860: mov rax, 2; ret; 
0x0000000000474870: mov rax, 3; ret; 
0x0000000000474880: mov rax, 4; ret; 
0x0000000000474890: mov rax, 5; ret; 
0x00000000004748a0: mov rax, 6; ret; 
0x00000000004748b0: mov rax, 7; ret; 
0x0000000000486c2e: mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x000000000047cba5: mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004718cc: mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x00000000004719d5: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000470eaa: mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000411769: mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040e9cc: mov rax, qword ptr [rax + 0x18]; ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000411770: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000465056: mov rax, qword ptr [rax + 0x38]; mov r14, r15; mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000471ea3: mov rax, qword ptr [rax + 0x4c]; ret; 
0x00000000004899bb: mov rax, qword ptr [rax + 8]; add rax, qword ptr [r14]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000481a40: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000481a30: mov rax, qword ptr [rax + 8]; ret; 
0x000000000045dc65: mov rax, qword ptr [rax + r11*8]; mov dword ptr [rbp - 0x93c], r9d; mov byte ptr [rbp - 0x918], r8b; mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045915f: mov rax, qword ptr [rax + rbp*8]; test rax, rax; je 0x5916a; call rax; 
0x000000000046bcd6: mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x000000000045ab6e: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004608cc: mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000045ab6b: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000048d102: mov rax, qword ptr [rax]; ret; 
0x0000000000416664: mov rax, qword ptr [rbp + 0x20]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000416854: mov rax, qword ptr [rbp + 0x28]; add rsp, 8; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000480fa1: mov rax, qword ptr [rbp - 0x38]; xor esi, esi; lea rdi, [rip + 0x23f4c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000047d204: mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x000000000047c59f: mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x0000000000484214: mov rax, qword ptr [rbp - 8]; xor rax, qword ptr fs:[0x28]; jne 0x8425e; leave; ret; 
0x000000000047c3c0: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000047c27d: mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x00000000004165ac: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004165cd: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000484e38: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484de8: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000412db6: mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rbx + 8], rax; mov qword ptr [rbx + 0x10], rax; xor eax, eax; pop rbx; ret; 
0x0000000000484dd8: mov rax, qword ptr [rbx + 0x18]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000416c98: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004170b8: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000041175e: mov rax, qword ptr [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040d2ad: mov rax, qword ptr [rbx + rax*8]; ja 0xd935; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000044bc45: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x26e521], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000443d46: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442536: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443d66: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442556: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d86: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442576: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443c16: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000442466: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000443bc0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000443cc0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x00000000004424f0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000443ce0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000442500: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000443d00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442510: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000443d20: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442520: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000443d40: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442530: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000443d60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442550: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000443d80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x0000000000442570: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000443c10: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000442460: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442410: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000045a561: mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a56f; call rax; 
0x0000000000490cec: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x0000000000418fc0: mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000471ea0: mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041643a: mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000418630: mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d130: mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d180: mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000048d1c0: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d220: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d210: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d1d0: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000048d190: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000418746: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x18770; movzx eax, byte ptr [rax]; ret; 
0x000000000048db40: mov rax, qword ptr [rdi + 8]; test rax, rax; je 0x8db58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000460e16: mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000048d167: mov rax, qword ptr [rdi + rsi*8]; cmp byte ptr [rcx + rsi], 8; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x000000000042d310: mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x000000000042cd86: mov rax, qword ptr [rdi - 8]; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x00000000004182d4: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004191b0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a0656], 1; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x0000000000419170: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a0696], 1; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x0000000000419150: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x00000000004191d0: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a2bba], eax; ret; 
0x0000000000419050: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07ed], rax; ret; 
0x0000000000419040: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x0000000000418ff0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07fd], rax; ret; 
0x0000000000418fe0: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a0815], rax; ret; 
0x0000000000471c72: mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000047f8a5: mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000048cd57: mov rax, qword ptr [rdx]; mov qword ptr [rbx + 0x98], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047f380: mov rax, qword ptr [rip + 0x239d69]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x000000000047f38a: mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x000000000047f319: mov rax, qword ptr [rip + 0x23d090]; ret; 
0x00000000004579d0: mov rax, qword ptr [rip + 0x2644a1]; ret; 
0x000000000044f470: mov rax, qword ptr [rip + 0x26d4b1]; ret; 
0x0000000000418610: mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x000000000048e071: mov rax, qword ptr [rsi + 0x10]; ret; 
0x0000000000411e34: mov rax, qword ptr [rsi + 0x60]; add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048af00: mov rax, qword ptr [rsi + 0xa8]; ret; 
0x000000000048aed3: mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048aef0: mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000041109a: mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048e090: mov rax, qword ptr [rsi + 8]; ret; 
0x000000000046bc9b: mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000460e60: mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004614b8: mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x000000000048d1f5: mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000044a7a5: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000411997: mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000401192: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004530db: mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000449809: mov rax, qword ptr [rsp + 8]; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000040df6c: mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048ac65: mov rax, qword ptr [rsp]; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000048a969: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000045ab6a: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000046ec97: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000044ab6d: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000413ba9: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041a87f: mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042265e: mov rax, r8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000474c33: mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000473a70: mov rax, r8; vzeroupper; ret; 
0x000000000044a648: mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000041012a: mov rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000044b183: mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000044a631: mov rax, rbp; pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x0000000000410242: mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000413ce6: mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d32a: mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000488416: mov rax, rbx; jne 0x8842c; add rsp, 0x40; pop rbx; ret; 
0x00000000004884fd: mov rax, rbx; jne 0x88514; add rsp, 0x50; pop rbx; ret; 
0x0000000000414731: mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414664: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044a3bf: mov rax, rbx; pop rbx; pop rbp; ret; 
0x00000000004129da: mov rax, rbx; pop rbx; ret; 
0x000000000047e72e: mov rax, rcx; neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000047e6db: mov rax, rcx; ret; 
0x00000000004128d2: mov rax, rdi; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041ab14: mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000412903: mov rax, rdi; ret; 
0x000000000041a714: mov rax, rdx; add rsp, 8; ret; 
0x00000000004752fa: mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041a0cc: mov rax, rdx; pop rbx; pop rbp; ret; 
0x00000000004481a5: mov rax, rdx; pop rbx; ret; 
0x000000000041a720: mov rax, rdx; ret; 
0x0000000000449553: mov rax, rsi; ja 0x49588; mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000475563: mov rax, rsi; ja 0x75598; mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x000000000041dbdc: mov rax, rsi; pop rbx; ret; 
0x000000000041dc10: mov rax, rsi; ret; 
0x0000000000411068: mov rbp, qword ptr [r15 + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048d652: mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x0000000000411e0a: mov rbp, qword ptr [rbx + 0x98]; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x000000000048267c: mov rbp, r9; nop; jmp rdx; 
0x00000000004718c7: mov rbx, rdi; jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000045a565: mov rbx, rdi; test rax, rax; je 0x5a56f; call rax; 
0x00000000004753af: mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000047fa0c: mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000004494e0: mov rcx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000045ab43: mov rcx, 0xffffffffffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004709d1: mov rcx, qword ptr [rax + 0x10]; mov qword ptr [rax], rdx; mov qword ptr [rax + 0x10], rdx; mov qword ptr [rax + 0x40], rcx; ret; 
0x0000000000411807: mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107ec: mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004384e9: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000444964: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444984: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442d4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444924: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444274: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444944: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444294: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000446f1e: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000042f634: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f650: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f814: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f830: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9f4: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa10: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fbe4: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc00: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fde4: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe00: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffe4: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430000: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042cd8a: mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x0000000000434b54: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ac4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434a34: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042d30c: mov rcx, qword ptr [rsi - 8]; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x000000000042f454: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f470: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004447b0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000444180: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004447c0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x0000000000444190: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004447e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004441a0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000444800: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004441b0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004354d4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435464: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353f4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435384: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435314: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004352a4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435234: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444820: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000444840: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004441d0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000444860: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004441e0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000481b26: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab4: mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000481da7: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821d7: mov rcx, qword ptr [rsp + 0x58]; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000481f08: mov rcx, qword ptr [rsp + 0x68]; xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004384e8: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048d488: mov rcx, r12; mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x000000000048cdd2: mov rcx, r12; or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000044e74d: mov rcx, r12; push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x00000000004740d2: mov rcx, r13; xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000471f23: mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004720ff: mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000474224: mov rcx, r15; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000048cea2: mov rcx, rbp; mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000447bc0: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000446f01: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000488069: mov rcx, rsi; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x0000000000473dc1: mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000040df68: mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040ea03: mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000045dec3: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e46d: mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000045dc7a: mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000045dd10: mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000046a1b6: mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046918c: mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000469e81: mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000046922a: mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000465063: mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x0000000000488450: mov rdi, qword ptr [rdi]; call 0x8a3c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048837c: mov rdi, qword ptr [rdi]; call 0x8a6c0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000482553: mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000450d6f: mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000451958: mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000451488: mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000451194: mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455e65: mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004530d6: mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000416cca: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004170f0: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x000000000044a7a0: mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004165d5: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000471f2f: mov rdi, r12; call rbx; 
0x0000000000416bc5: mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000449ca8: mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000492000: mov rdi, r13; call rax; 
0x000000000040e08d: mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040dff8: mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000460116: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004582f2: mov rdi, r14; call rbx; 
0x00000000004585d0: mov rdi, r14; call rdx; 
0x000000000046079e: mov rdi, r14; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004601f2: mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045fcad: mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000046cbb3: mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046bbe8: mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x00000000004111e2: mov rdi, r15; call rax; 
0x000000000044f04a: mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000046b9da: mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000400c06: mov rdi, rax; call 0xb5d; mov eax, 0; leave; ret; 
0x00000000004119a5: mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004234c3: mov rdi, rax; call rcx; 
0x000000000040dbef: mov rdi, rax; mov eax, 0xba; syscall; 
0x0000000000449558: mov rdi, rax; mov rsi, rdx; mov eax, 4; syscall; 
0x0000000000475568: mov rdi, rax; mov rsi, rdx; mov eax, 6; syscall; 
0x0000000000470500: mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000410765: mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x0000000000422845: mov rdi, rbp; call rax; 
0x00000000004740e0: mov rdi, rbp; call rbx; 
0x000000000044a4b9: mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000474231: mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000411e31: mov rdi, rbp; mov rax, qword ptr [rsi + 0x60]; add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000411801: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107e6: mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000044b17c: mov rdi, rbx; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; jmp rax; 
0x0000000000413e47: mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004137c3: mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000413f89: mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004164bb: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416b2c: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178bc: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff77: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000410685: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000413abe: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004132b5: mov rdi, rbx; call rax; 
0x000000000048ff22: mov rdi, rbx; jne 0x8ff10; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004582e6: mov rdi, rbx; mov dword ptr [rbp - 0x48], r8d; call 0x4d3c0; mov rdi, r14; call rbx; 
0x0000000000411765: mov rdi, rbx; pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041666c: mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x0000000000470d8e: mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000047bbe8: mov rdi, rcx; call 0x4a590; test eax, eax; js 0x7bc02; pop rbx; ret; 
0x0000000000484740: mov rdi, rdx; mov byte ptr [rsi], al; jne 0x84720; mov rax, rsi; ret; 
0x00000000004585ba: mov rdi, rdx; mov qword ptr [rbp - 0x98], rdx; call 0x4d3c0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000047360e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000044f03e: mov rdi, rsi; mov qword ptr [rbp - 0x70], rsi; call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x0000000000449570: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449820: mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000045ab4e: mov rdx, 0xffffffffffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000048cdd8: mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x000000000048d48b: mov rdx, qword ptr [r12]; mov esi, 1; mov edi, 1; call rax; 
0x0000000000469226: mov rdx, qword ptr [r14 + 0x20]; mov rdi, qword ptr [rbp - 0x8d0]; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000045dd0c: mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004111d6: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004182ff: mov rdx, qword ptr [rax + 8]; jne 0x18310; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004607a8: mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004585c9: mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x000000000048cea5: mov rdx, qword ptr [rbp]; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000484dc8: mov rdx, qword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004132aa: mov rdx, qword ptr [rbx + 0x40]; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x000000000044bf35: mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000416436: mov rdx, qword ptr [rdi + 0x18]; mov rax, qword ptr [rdi + 0x48]; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000484ddc: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000484e43: mov rdx, qword ptr [rdi + 0x448]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004852e3: mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000401182: mov rdx, qword ptr [rip + 0x2bac1f]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000444314: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444334: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004354d0: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435460: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004353f0: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000435380: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444823: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c3: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000435310: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444843: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x00000000004441d3: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004352a0: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444863: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x00000000004441e3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000435230: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000434ce0: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c60: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434be0: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434b50: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ac0: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434a30: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f294: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fbe8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fde8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffe8: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f278: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc04: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe04: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430004: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2b0: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434d60: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004447a0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000435540: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000482558: mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000040df60: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000474227: mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040dff0: mov rdx, qword ptr [rsp + 0x10]; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000481b21: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aaf: mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045118a: mov rdx, qword ptr [rsp + 0x48]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000413bc2: mov rdx, qword ptr [rsp + 8]; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000449a35: mov rdx, qword ptr [rsp]; mov r8d, eax; mov esi, 7; mov edi, dword ptr [rsp + 0xc]; mov eax, 0x48; syscall; 
0x00000000004498b5: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497e5: mov rdx, r12; mov r8d, eax; mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000411994: mov rdx, r12; mov rax, qword ptr [rsp + 0x10]; mov r8, qword ptr [rsp + 0x18]; lea rsi, [rdi + 0x58]; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000469e88: mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000489b5f: mov rdx, r13; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000045e463: mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x0000000000489adc: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489bb8: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000004899c2: mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046a1b0: mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x000000000046505d: mov rdx, r13; mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x000000000045debd: mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046b524: mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004740d8: mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000046cba9: mov rdx, r14; mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x000000000046bbdb: mov rdx, r14; mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cd26: mov rdx, r14; mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000045fcb3: mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004137bd: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x0000000000413f7f: mov rdx, r8; mov qword ptr [rsp], r8; mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x00000000004126e0: mov rdx, r9; mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x000000000044e752: mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000045e638: mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004755bf: mov rdx, rcx; mov eax, 0x106; syscall; 
0x00000000004600fe: mov rdx, rcx; mov qword ptr [rbp - 0x4f8], rcx; mov dword ptr [rbp - 0x508], r9d; mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000447bc7: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000047582c: mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x000000000045dd08: mov rsi, qword ptr [r15 + 0x18]; mov rdx, qword ptr [r15 + 0x20]; mov rdi, qword ptr [rbp - 0x8a8]; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000040df65: mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000040e904: mov rsi, qword ptr [rax + 0x20]; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000459063: mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x000000000046010f: mov rsi, qword ptr [rbp - 0x500]; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046cbac: mov rsi, qword ptr [rbp - 0x520]; mov rdi, r15; call qword ptr [rax + 0x38]; 
0x00000000004607af: mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x000000000044f04d: mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000045e466: mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044a79d: mov rsi, qword ptr [rbx]; mov rdi, qword ptr [rsp + 8]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000048844c: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a3c0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000488378: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x8a6c0; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000047f217: mov rsi, qword ptr [rip + 0x23d192]; jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x0000000000446f23: mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x00000000004384e6: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004756c9: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000401189: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000416cc5: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044e755: mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x000000000047422c: mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000041f375: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; mov rdi, rbx; pop rbx; pop rbp; jmp rax; 
0x000000000041f990: mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x0000000000450d6a: mov rsi, qword ptr [rsp + 0x28]; mov rdi, qword ptr [rsp + 0x20]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000422840: mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x0000000000451953: mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000451483: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x000000000045118f: mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000455e60: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004530d1: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x0000000000420258: mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x0000000000491ff8: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r13; call rax; 
0x0000000000491758: mov rsi, qword ptr [rsp + 0x98]; mov rdi, r15; call rax; 
0x00000000004601ef: mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x00000000004126e3: mov rsi, r12; mov edi, dword ptr [rbp - 0x84]; mov eax, r13d; syscall; 
0x0000000000489adf: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000489bbb: mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x00000000004899c5: mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046a1b3: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000469e7e: mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x000000000045fcaa: mov rsi, r12; mov rdi, r14; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045e63b: mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000044a4b6: mov rsi, r13; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000413f86: mov rsi, r13; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413abb: mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000421e71: mov rsi, r13; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000047d1fa: mov rsi, r13; xor eax, eax; call 0x7e510; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000469182: mov rsi, r14; mov byte ptr [rbp - 0x948], r9b; mov rdi, qword ptr [rbp - 0x8d0]; call rax; 
0x0000000000465060: mov rsi, r14; mov rdi, qword ptr [rbp - 0xc0]; call rax; 
0x00000000004704fd: mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004137c0: mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000045dc77: mov rsi, r15; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x000000000040dff5: mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000046bbde: mov rsi, r8; mov qword ptr [rbp - 0x500], r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000046cd29: mov rsi, r8; mov rdi, r15; call qword ptr [rcx + 0x38]; 
0x000000000040dc18: mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000045dec0: mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004498bb: mov rsi, rbp; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497eb: mov rsi, rbp; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000473dbe: mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000040e08a: mov rsi, rbp; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004234c0: mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000412488: mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000047fa0f: mov rsi, rbx; syscall; 
0x000000000045addb: mov rsi, rcx; mov ecx, 0xd; mov r10d, 8; mov eax, ecx; syscall; 
0x000000000046b9d7: mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000449631: mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000048db49: mov rsi, rdi; mov edi, 1; jmp rax; 
0x000000000044955b: mov rsi, rdx; mov eax, 4; syscall; 
0x00000000004495a9: mov rsi, rdx; mov eax, 5; syscall; 
0x000000000047556b: mov rsi, rdx; mov eax, 6; syscall; 
0x000000000044923d: mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x0000000000482679: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000048d656: mov rsp, rcx; ret; 
0x0000000000400b84: mov rsp, rsi; ret; 
0x000000000043850b: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x000000000046c7c6: mov ss, word ptr [rax + rax + 0x63490000]; ret 0x8948; 
0x00000000004206ee: mov ss, word ptr [rcx + 0x39480029]; ret; 
0x0000000000438515: mov word ptr [r9 - 2], cx; ret; 
0x00000000004b43d5: mov word ptr [rax], es; add byte ptr [rax - 0x1e], bl; cld; call qword ptr [rdx]; 
0x00000000004af8a8: mov word ptr [rcx], es; add byte ptr [rbx + rax*4], ah; stc; jmp rbx; 
0x00000000004448ac: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044421c: mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004449b4: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000444304: mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000435777: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000444778: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000444158: mov word ptr [rdi + 4], dx; ret; 
0x00000000004447ca: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x000000000044419a: mov word ptr [rdi + 8], dx; ret; 
0x0000000000447caa: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; ret; 
0x0000000000447e2f: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000446f44: mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000042f84c: mov word ptr [rdi - 2], cx; ret; 
0x000000000042f664: mov word ptr [rdi - 2], dx; ret; 
0x000000000042f848: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000444743: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444123: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000446c82: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043577b: mov word ptr [rdi], cx; ret; 
0x0000000000447e34: mov word ptr [rdi], cx; vzeroupper; ret; 
0x0000000000444733: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004357e3: mov word ptr [rdi], dx; ret; 
0x0000000000438512: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446f49: mov word ptr [rdi], si; ret; 
0x0000000000443c98: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x00000000004424d8: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000443c43: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000443c53: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004424a3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000442493: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000047c09a: mov word ptr [rdx], es; add byte ptr [rdx + 0x63], cl; add al, 0xa1; add rax, rcx; jmp rax; 
0x0000000000446c85: mov word ptr [rsi - 2], cx; ret; 
0x000000000040483b: mov word ptr [rsp + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x0000000000446f43: mov word ptr ss:[rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x00000000004941b0: movabs al, byte ptr [0x30fff9b260fff9b0]; mov ah, 0xf9; call qword ptr [rax]; 
0x000000000044bf3c: movabs al, byte ptr [0x4810488948ffffff]; mov dword ptr [rax + 8], edx; ret; 
0x0000000000484dc4: movabs al, byte ptr [0x4818538b48000000]; mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000411761: movabs al, byte ptr [0x485bdf8948000000]; mov eax, dword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000417219: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000047bbec: movabs al, byte ptr [0x5b0e78c085fffce9]; ret; 
0x0000000000494194: movabs al, byte ptr [0x60fff9b480fff9b2]; mov dh, 0xf9; inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x0000000000447417: movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000493f48: movabs al, byte ptr [0x80fff96990fff968]; push -7; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x000000000046d26a: movabs al, byte ptr [0x840fc08548000000]; ret; 
0x0000000000419d34: movabs al, byte ptr [0x841f0f660007]; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000468adf: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000494834: movabs al, byte ptr [0x90fffa0a20fffa0a]; or edx, edi; call qword ptr [rax]; 
0x0000000000494b64: movabs al, byte ptr [0xc0fffa3430fffa34]; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x000000000049494c: movabs al, byte ptr [0xc0fffa3730fffa37]; cli; call qword ptr [rax + 0x36]; 
0x0000000000494e7c: movabs al, byte ptr [0xc0fffa4fb0fffa4d]; push rcx; cli; call rax; 
0x0000000000494f74: movabs al, byte ptr [0xc0fffaf1b0fffaf1]; int1; cli; call rax; 
0x0000000000495008: movabs al, byte ptr [0xc0fffaf7b0fffaf7]; idiv edx; call rax; 
0x00000000004a9534: movabs al, byte ptr [0xc8c62d12fc87aa3c]; lodsb al, byte ptr [rsi]; or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000494fb4: movabs al, byte ptr [0xd0fffaf2c0fffaf2]; cli; jmp rax; 
0x000000000044b9c9: movabs al, byte ptr [0xe800000077ba0004]; push 0x61; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000042a39c: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041f77b: movabs al, byte ptr [0xfff58b058d480029]; dec dword ptr [rax - 0x77]; add eax, 0x29a0d4; ret; 
0x00000000004a7b9b: movabs byte ptr [0x3246dddda441cb9e], al; mov bh, 0xb4; mov edi, dword ptr [rdx]; ret; 
0x000000000040d2ba: movabs byte ptr [0x4897146348000854], al; add edx, edi; jmp rdx; 
0x000000000044464a: movabs byte ptr [0x49930c6349000509], al; lea ecx, [rbx + rcx]; jmp rcx; 
0x0000000000436bca: movabs byte ptr [0x49931463490005df], al; lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000494249: movabs byte ptr [0xa510fff9a3c0fff9], al; stc; jmp qword ptr [rax - 0x5a]; 
0x0000000000494500: movabs byte ptr [0xc2fffa1232fffa12], al; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004949f8: movabs byte ptr [0xc2fffa3932fffa39], al; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000042a69a: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047d753: movabs dword ptr [0x15b8000277], eax; syscall; 
0x0000000000436ec9: movabs dword ptr [0x49931463490005dc], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000004368c9: movabs dword ptr [0x49931463490005e2], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000004365c9: movabs dword ptr [0x49931463490005e5], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x00000000004362c9: movabs dword ptr [0x49931463490005e8], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000435fc9: movabs dword ptr [0x49931463490005eb], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000435cc9: movabs dword ptr [0x49931463490005ee], eax; lea edx, [rbx + rdx]; jmp rdx; 
0x0000000000494245: movabs eax, dword ptr [0xa3c0fff9a270fff9]; stc; call qword ptr [rax]; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rax - 0x5a]; 
0x00000000004a78df: movabs eax, dword ptr [0xdbd7170d7733db8]; shl dword ptr [rdi - 5], 1; ret; 
0x000000000042cfa8: movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d0a8: movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000040dbcc: movaps xmmword ptr [rsp + 0xd0], xmm0; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd4: movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbdc: movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000042dd3d: movdqa xmmword ptr [rdi - 0x20], xmm1; sub rdi, 0x20; lea r11, [rip + 0x66363]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043061c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc4c: movdqa xmmword ptr [rdi - 0x40], xmm1; sub rdi, 0x40; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004448a0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444210: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004448e0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444250: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444240: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004448c0: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444230: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444960: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004442d0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444920: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444270: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444940: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444290: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004443b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a00: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444350: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444a20: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444370: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444390: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000444880: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444890: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444200: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004441f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004443b4: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a04: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444354: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444a24: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444374: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444394: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000431a1a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043177a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043162a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043138a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043123a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f9a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e4a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cfa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430baa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a5a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043090a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f04a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eefa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edaa: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec5a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb0a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9ba: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e86a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5ca: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e47a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e32a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1da: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e08a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df3a: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddea: movdqu xmmword ptr [r8], xmm0; add rsi, rdx; lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431abb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043181b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043157b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043142b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312db: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043118b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f2: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043103b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430eeb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430afb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309ab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043085b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0eb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef9b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee4b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecfb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebab: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea5b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e90b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7bb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e722: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e66b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e51b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3cb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e27b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e12b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfdb: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de8b: movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004351c1: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c12: movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444a6d: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004443bd: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000435831: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357c1: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435751: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356e1: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435671: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435601: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435591: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435521: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354b1: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435441: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353d1: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435361: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f1: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435281: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435211: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004351b7: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000043544f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353df: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043536f: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352ff: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a0d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044435d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000043528f: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a2d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044437d: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x000000000043521f: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a4d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044439d: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043583f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357cf: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043575f: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356ef: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043567f: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043560f: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043559f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043552f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354bf: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447c17: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447ba4: movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c1d: movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x00000000004349ab: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000434a1b: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435156: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350d6: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435046: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434fc6: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f46: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ec6: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e46: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434dc6: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d46: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cc6: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c46: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bc6: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b36: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434aa6: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a16: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004349a1: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000435147: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350c7: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435037: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434fb7: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f37: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434eb7: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e37: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434db7: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cb7: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c37: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bb7: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b27: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a97: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a07: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434997: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000444884: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444894: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444204: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004448e7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444907: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444257: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444247: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004448c7: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444237: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444968: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444988: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442d8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004449cb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044431b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004449eb: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044433b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449ac: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004442fc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444928: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444278: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444948: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444298: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004448a8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444218: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447c0e: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444a69: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004443b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a09: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444359: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444a29: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444379: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444a49: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000444399: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004351ca: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435224: movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447ba3: movdqu xmmword ptr fs:[rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004448a1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444211: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x00000000004448e1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444251: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444241: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004448c1: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444231: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444961: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x00000000004442d1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000444921: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444271: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444941: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444291: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004443b1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a01: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444351: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444a21: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444371: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444391: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000444881: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444891: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444201: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004441f1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004443b5: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a05: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444355: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444a25: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000444375: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444395: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000431a1b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043177b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043162b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043138b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043123b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f9b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e4b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cfb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a5b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043090b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f04b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eefb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edab: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec5b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb0b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9bb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e86b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5cb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e47b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e32b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1db: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e08b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df3b: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddeb: movq qword ptr [r8], mm0; add rsi, rdx; lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431abc: movq qword ptr [r8], mm0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043181c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043157c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043142c: movq qword ptr [r8], mm0; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312dc: movq qword ptr [r8], mm0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043118c: movq qword ptr [r8], mm0; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f3: movq qword ptr [r8], mm0; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043103c: movq qword ptr [r8], mm0; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430eec: movq qword ptr [r8], mm0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430afc: movq qword ptr [r8], mm0; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309ac: movq qword ptr [r8], mm0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043085c: movq qword ptr [r8], mm0; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0ec: movq qword ptr [r8], mm0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef9c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee4c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecfc: movq qword ptr [r8], mm0; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebac: movq qword ptr [r8], mm0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea5c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e90c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7bc: movq qword ptr [r8], mm0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e723: movq qword ptr [r8], mm0; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e66c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e51c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3cc: movq qword ptr [r8], mm0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e27c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e12c: movq qword ptr [r8], mm0; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfdc: movq qword ptr [r8], mm0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de8c: movq qword ptr [r8], mm0; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a1c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62847]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62997]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043177c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62ae7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043162c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62c37]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62d87]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043138c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x62ed7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043123c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63027]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430f9c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x632c7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e4c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63417]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430cfc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63567]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x636b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a5c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63807]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043090c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63957]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x63aa7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f04c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65057]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eefc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x651a7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edac: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x652f7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec5c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65447]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb0c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65597]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9bc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x656e7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e86c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65837]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5cc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65ad7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e47c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65c27]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e32c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65d77]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1dc: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x65ec7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e08c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x66017]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df3c: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x66167]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddec: movq qword ptr [rax], mm0; add rsi, rdx; lea r11, [rip + 0x662b7]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431abd: movq qword ptr [rax], mm0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043181d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043157d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043142d: movq qword ptr [rax], mm0; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312dd: movq qword ptr [rax], mm0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043118d: movq qword ptr [rax], mm0; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f4: movq qword ptr [rax], mm0; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043103d: movq qword ptr [rax], mm0; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430eed: movq qword ptr [rax], mm0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430afd: movq qword ptr [rax], mm0; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309ad: movq qword ptr [rax], mm0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043085d: movq qword ptr [rax], mm0; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0ed: movq qword ptr [rax], mm0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef9d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee4d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecfd: movq qword ptr [rax], mm0; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebad: movq qword ptr [rax], mm0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea5d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e90d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7bd: movq qword ptr [rax], mm0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e724: movq qword ptr [rax], mm0; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e66d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e51d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3cd: movq qword ptr [rax], mm0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e27d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e12d: movq qword ptr [rax], mm0; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfdd: movq qword ptr [rax], mm0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de8d: movq qword ptr [rax], mm0; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004351c2: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c13: movq qword ptr [rdi + 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444a6e: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004443be: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000435832: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357c2: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435752: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356e2: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435672: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435602: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435592: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435522: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354b2: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435442: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353d2: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435362: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f2: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435282: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435212: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004351b8: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000435450: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004353e0: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435370: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435300: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a0e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044435e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x0000000000435290: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a2e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044437e: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000435220: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444a4e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044439e: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000435840: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004357d0: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435760: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004356f0: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435680: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435610: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004355a0: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435530: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004354c0: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000447c18: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000447ba5: movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c1e: movq qword ptr [rdi + rdx - 0x20], mm0; ret; 
0x00000000004349ac: movq qword ptr [rdi - 0x10], mm0; ret; 
0x0000000000434a1c: movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435157: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350d7: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435047: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434fc7: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f47: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434ec7: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e47: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434dc7: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434d47: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cc7: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c47: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bc7: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b37: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434aa7: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a17: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004349a2: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000042dd3e: movq qword ptr [rdi - 0x20], mm1; sub rdi, 0x20; lea r11, [rip + 0x66363]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435148: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004350c8: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000435038: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434fb8: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434f38: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434eb8: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434e38: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434db8: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434cb8: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434c38: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434bb8: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434b28: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a98: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434a08: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000434998: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x000000000043061d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc4d: movq qword ptr [rdi - 0x40], mm1; sub rdi, 0x40; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444885: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000444895: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000444205: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004448e8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000444908: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000444258: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000444248: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004448c8: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444238: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444969: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000444989: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x00000000004442d9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004442b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004449cc: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044431c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004449ec: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044433c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449ad: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004442fd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000444929: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000444279: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000444949: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444299: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004448a9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000444219: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000447c0f: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi + rdx - 0x20], xmm0; ret; 
0x0000000000444a6a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004443ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444a0a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044435a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444a2a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x000000000044437a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000444a4a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000044439a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004351cb: movq qword ptr [rdi], mm0; ret; 
0x0000000000435225: movq qword ptr [rdi], mm1; ret; 
0x00000000004b5bad: movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; jo 0xb5b4f; std; jmp qword ptr [rcx]; 
0x000000000044d398: movsb byte ptr [rdi], byte ptr [rsi]; add dword ptr [rdx], 0x39d23100; ret; 
0x000000000045781c: movsb byte ptr [rdi], byte ptr [rsi]; and al, 0x88; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004af3c0: movsb byte ptr [rdi], byte ptr [rsi]; cmp al, 0; add byte ptr [rsi + rcx], bh; clc; jmp qword ptr [rdi + 0x2b]; 
0x00000000004a7a22: movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x00000000004848d8: movsb byte ptr [rdi], byte ptr [rsi]; ja 0x848fe; add byte ptr [rax - 0x77], cl; add eax, 0x237785; add rsp, 8; ret; 
0x000000000048d0f8: movsb byte ptr [rdi], byte ptr [rsi]; lock and al, byte ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000476308: movsb byte ptr [rdi], byte ptr [rsi]; xor al, 0xfd; dec dword ptr [rax + 0x39]; ret; 
0x000000000047f8fc: movsb byte ptr [rdi], byte ptr [rsi]; xor eax, eax; ret; 
0x0000000000446ea5: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000446e97: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b4eec: movsb byte ptr [rdi], byte ptr [rsi]; std; jmp rsp; 
0x000000000049210c: movsd dword ptr [rdi], dword ptr [rsi]; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x0000000000460d77: movsd dword ptr [rdi], dword ptr [rsi]; pop rbp; and eax, 0x48b4800; clc; jmp rax; 
0x00000000004782e7: movsd dword ptr [rdi], dword ptr [rsi]; ret 2; 
0x00000000004abdd5: movsd dword ptr [rdi], dword ptr [rsi]; cmc; jmp qword ptr [rdx + 0x36]; 
0x0000000000482d42: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000494251: movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rax - 0x5a]; 
0x00000000004b0001: movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x0000000000465e3c: movsx eax, byte ptr [rsi]; cmp edi, r8d; ja 0x65e20; mov eax, r9d; ret; 
0x0000000000480e2b: movsx eax, cl; neg eax; ret; 
0x0000000000480ed0: movsx eax, dl; sub eax, ecx; ret; 
0x0000000000450a77: movsx ecx, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000450a7b: movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x0000000000465e3b: movsx r8d, byte ptr [rsi]; cmp edi, r8d; ja 0x65e20; mov eax, r9d; ret; 
0x0000000000450a76: movsx r9, byte ptr [rdx + 0x1a]; movsx edx, byte ptr [rdx + 0x1b]; mov dword ptr [rax + 0x50], ecx; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000048c008: movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004021fe: movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000048c909: movsxd rax, dword ptr [r14 + rax*4]; add rax, r14; jmp rax; 
0x000000000048afb7: movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x000000000048ad91: movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000048c541: movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000044d4ce: movsxd rax, dword ptr [rbp + rax*4]; add rax, rbp; jmp rax; 
0x000000000044d457: movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x000000000047c09d: movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000046ea86: movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000047c9c5: movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000046f0b6: movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000401f95: movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004491e3: movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000046e91a: movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000448067: movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000448121: movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x000000000048521c: movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446b36: movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000446ae3: movsxd rax, ecx; ret; 
0x000000000042c1dd: movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000443fb9: movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044808f: movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000446b76: movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000040d5a7: movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000045a35f: movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000045ab67: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000042d97f: movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040d2be: movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000047dea0: movsxd rdx, r12d; mov edi, dword ptr [rbp - 0x46c]; mov eax, 0x14; syscall; 
0x0000000000459e60: movsxd rsi, dword ptr [r8 + r9*4]; add rsi, r8; jmp rsi; 
0x000000000048d14c: movsxd rsi, esi; je 0x8d160; cmp byte ptr [rdi + rsi + 0xd8], 0; je 0x8d160; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x0000000000446e37: movups xmm0, xmmword ptr [rsi]; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446e3a: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446fb8: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044705f: movups xmmword ptr [r11], xmm4; ret; 
0x00000000004470e6: movups xmmword ptr [r11], xmm8; ret; 
0x00000000004470e7: movups xmmword ptr [rbx], xmm0; ret; 
0x0000000000447060: movups xmmword ptr [rbx], xmm4; ret; 
0x0000000000447052: movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000447056: movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044705b: movups xmmword ptr [rcx - 0x30], xmm0; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044705a: movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000044704f: movups xmmword ptr [rcx], xmm5; movups xmmword ptr [rcx - 0x10], xmm6; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x0000000000446fc0: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004470da: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004470de: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x00000000004470e2: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000446e42: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446fc4: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446f97: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446fc9: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446f9c: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446fa1: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446fa6: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446fbd: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446e3f: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004470d7: movups xmmword ptr [rdi], xmm4; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000475801: movzx eax, al; add rsp, 0x58; ret; 
0x000000000048c005: movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046e917: movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x000000000048835c: movzx eax, al; neg eax; ret; 
0x0000000000484c29: movzx eax, al; pop rbx; pop rbp; pop r12; ret; 
0x000000000042bad3: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044e7d0: movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x00000000004154c0: movzx eax, bpl; pop rbx; pop rbp; pop r12; ret; 
0x00000000004846b7: movzx eax, byte ptr [r8 + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x0000000000425dad: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004846b8: movzx eax, byte ptr [rax + rdx]; test rdi, rdi; mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x000000000041791b: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048dfbe: movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004166c1: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bae: movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x000000000041874f: movzx eax, byte ptr [rax]; ret; 
0x0000000000460e0b: movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x000000000046bc97: movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000042c184: movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c1a4: movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c16a: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042a224: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042bef4: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000440068: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5830d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9f8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5997d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce48: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5b52d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043acf8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x5d67d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000425c3f: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425bd8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000445fc0: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000446020: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000446010: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000446000: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445ff0: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fe0: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000445fd0: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000044637a: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x464f5; xor eax, eax; ret; 
0x000000000042d090: movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042ce43: movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000445fa7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000440083: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x582f3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ea13: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x59963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ce63: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x5b513]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043ad13: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x5d663]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042bf70: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042bab0: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000425bf3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004166d0: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bc0: movzx eax, byte ptr [rdx]; ret; 
0x00000000004614ad: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e55: movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004154c1: movzx eax, ch; pop rbx; pop rbp; pop r12; ret; 
0x00000000004480f0: movzx eax, cl; pop rbx; ret; 
0x0000000000447bc4: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000450b41: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004480a0: movzx eax, dl; and dh, 0xf0; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000447bc3: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000450b40: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000048c53e: movzx ebx, bl; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000046bccb: movzx ecx, byte ptr [rdi + rax]; lea rax, [rip + 0x24b24a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x00000000004465fa: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x465f0; ret; 
0x00000000004466aa: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x466a0; ret; 
0x000000000044696a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x46960; sub rax, 1; ret; 
0x0000000000425bd4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000425e96: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x25e80; xor eax, eax; sub eax, ecx; ret; 
0x000000000042d094: movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x0000000000446f18: movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000425bf0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042bf73: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000048ad8e: movzx ecx, cl; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x0000000000446f3c: movzx ecx, word ptr [rsi + rdx - 2]; movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000046c921: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a8f4]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c8ce: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a947]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c3a1: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24a974]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c740: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24aad5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6fb: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab1a]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c6b6: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24ab5f]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046c667: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x24abae]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460dba: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461169: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046111b: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046106c: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461010: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d70: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d22: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608c1: movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000040d5a4: movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000422db0: movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x22da0; sub rax, 0x10; ret; 
0x0000000000425db1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044681a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x46810; lea rax, [rcx - 1]; ret; 
0x000000000042c189: movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c1a9: movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c16f: movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000043ec1f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x59756]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d0ef: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x5b286]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042a228: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000042bef8: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000425c43: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042b053: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x2b05d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000445fc4: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000446024: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000446014: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000446004: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445ff4: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fe4: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000445fd4: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000435170: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042ce47: movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x0000000000445fab: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000435850: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000042bab3: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x0000000000448130: movzx edx, cl; mov eax, 0; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x000000000042bad9: movzx edx, dl; sub eax, edx; ret; 
0x00000000004350f0: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x00000000004357e0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000416bc1: movzx esi, byte ptr [r14]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000416bc2: movzx esi, byte ptr [rsi]; mov rdi, r12; lea r15, [r14 + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000446f41: movzx esi, word ptr [rsi]; mov word ptr [rdi + rdx - 2], cx; mov word ptr [rdi], si; ret; 
0x000000000048c53d: movzx r11d, r11b; movsxd rax, dword ptr [r9 + r11*4]; add rax, r9; jmp rax; 
0x000000000041dc08: mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000473307: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000048d203: mul byte ptr [rsi - 0x70]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004494e7: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000449577: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000449827: neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000047e732: neg eax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000041878f: neg eax; ret; 
0x000000000047e731: neg rax; test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000474828: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x000000000044b18b: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000423813: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042b358: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b588: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000040eac8: nop dword ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000419ca8: nop dword ptr [rax + rax]; call rax; 
0x0000000000485828: nop dword ptr [rax + rax]; call rbx; 
0x000000000047f30b: nop dword ptr [rax + rax]; cmp byte ptr [rip + 0x23d4b1], 0; jne 0x7f328; mov rax, qword ptr [rip + 0x23d090]; ret; 
0x0000000000416673: nop dword ptr [rax + rax]; cmp eax, -1; je 0x165f8; mov eax, 0xffffffff; ret; 
0x0000000000416863: nop dword ptr [rax + rax]; cmp eax, -1; je 0x167e8; mov eax, 0xffffffff; ret; 
0x0000000000444d48: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d58: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d68: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d78: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d88: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444cc8: nop dword ptr [rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444cd8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444ce8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444cf8: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444d08: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444d18: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444d28: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444d38: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444cb8: nop dword ptr [rax + rax]; lea rax, [rdi]; ret; 
0x00000000004848e8: nop dword ptr [rax + rax]; lea rax, [rip + 0x237789]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x000000000044d348: nop dword ptr [rax + rax]; lea rax, [rip + 0x26cfa9]; ret; 
0x00000000004182cb: nop dword ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004128f8: nop dword ptr [rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000444718: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004440f8: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044473b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000444108: nop dword ptr [rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004236db: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000044a5bb: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x000000000044a5bb: nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x000000000047551b: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000047551b: nop dword ptr [rax + rax]; mov eax, 0x66; syscall; ret; 
0x0000000000475538: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; 
0x0000000000475538: nop dword ptr [rax + rax]; mov eax, 0x68; syscall; ret; 
0x0000000000475528: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; 
0x0000000000475528: nop dword ptr [rax + rax]; mov eax, 0x6b; syscall; ret; 
0x0000000000475548: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; 
0x0000000000475548: nop dword ptr [rax + rax]; mov eax, 0x6c; syscall; ret; 
0x000000000044a58b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000044a58b: nop dword ptr [rax + rax]; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a558: nop dword ptr [rax + rax]; mov eax, 0xb; syscall; 
0x00000000004185b8: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x000000000048e028: nop dword ptr [rax + rax]; mov eax, 2; ret; 
0x00000000004182db: nop dword ptr [rax + rax]; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000044bbeb: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x270cca]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000448f98: nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000470633: nop dword ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000434fd8: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044412b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044bfb8: nop dword ptr [rax + rax]; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000048d1a8: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000417518: nop dword ptr [rax + rax]; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x00000000004787eb: nop dword ptr [rax + rax]; mov qword ptr [rsi], 0xffffffffffffffff; xor eax, eax; ret; 
0x000000000045ad18: nop dword ptr [rax + rax]; mov rax, 0xf; syscall; 
0x000000000045ab5b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000449583: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000475913: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000045abb8: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab98: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab78: nop dword ptr [rax + rax]; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000041786b: nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000474848: nop dword ptr [rax + rax]; mov rax, 1; ret; 
0x0000000000474858: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x0000000000474868: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x0000000000474878: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x0000000000474888: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x0000000000474898: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000004748a8: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x0000000000481a28: nop dword ptr [rax + rax]; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047c3b8: nop dword ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000418fbb: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x28]; cmp qword ptr [rdi + 0x10], rax; cmovae rax, qword ptr [rdi + 0x10]; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000471e98: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418628: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d128: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d1b8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d218: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d208: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d1c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041914b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x000000000041903b: nop dword ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x000000000044f478: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x26d4b1]; ret; 
0x0000000000418608: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x000000000048aef8: nop dword ptr [rax + rax]; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000474ceb: nop dword ptr [rax + rax]; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000473b28: nop dword ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x0000000000418638: nop dword ptr [rax + rax]; mov rax, rdi; ret; 
0x00000000004447ab: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x000000000044418b: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044a33b: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004498eb: nop dword ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044416b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000420253: nop dword ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000004234b8: nop dword ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000480ec8: nop dword ptr [rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x000000000044601b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044600b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445ffb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000445feb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x0000000000445fdb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x0000000000445fcb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000042bf6b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x00000000004166cb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412bb8: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdx]; ret; 
0x0000000000450b3b: nop dword ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000435168: nop dword ptr [rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e8: nop dword ptr [rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a5b3: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000475513: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a583: nop dword ptr [rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000434fd1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045ad11: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000045abb1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab91: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000435161: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e1: nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000047ba9b: nop dword ptr [rax + rax]; or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x0000000000400aa3: nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000411778: nop dword ptr [rax + rax]; pop rbx; ret; 
0x00000000004179b3: nop dword ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471bf3: nop dword ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000422d3b: nop dword ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x000000000042b84b: nop dword ptr [rax + rax]; tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000417538: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000473688: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000444af8: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x0000000000485286: nop dword ptr [rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000044bc96: nop dword ptr [rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000474db6: nop dword ptr [rax + rax]; nop; mov eax, 0xc9; syscall; 
0x000000000042b828: nop dword ptr [rax + rax]; vzeroupper; xor eax, eax; ret; 
0x000000000047481c: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000042d7ec: nop dword ptr [rax]; and eax, 0xff; and ecx, 0xff; sub eax, ecx; ret; 
0x000000000042b349: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000042b369: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042b33c: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042b38c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000041f78d: nop dword ptr [rax]; mov dword ptr [rip + 0x29c5d6], 0; ret; 
0x000000000042345d: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004494cc: nop dword ptr [rax]; mov eax, 0x18; syscall; 
0x00000000004494cc: nop dword ptr [rax]; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x0000000000488519: nop dword ptr [rax]; mov eax, 0x26; syscall; 
0x0000000000471e85: nop dword ptr [rax]; mov eax, 0xffffffff; ret; 
0x0000000000449919: nop dword ptr [rax]; mov eax, 1; syscall; 
0x0000000000449bcd: nop dword ptr [rax]; mov eax, 3; syscall; 
0x000000000044994c: nop dword ptr [rax]; mov eax, 8; syscall; 
0x000000000048548c: nop dword ptr [rax]; mov eax, dword ptr [rip + 0x23742a]; ret; 
0x000000000044415d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x00000000004704f5: nop dword ptr [rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x00000000004356f9: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000044bc6c: nop dword ptr [rax]; mov r10, rcx; mov eax, 0x19; syscall; 
0x000000000045af1d: nop dword ptr [rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000484de5: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x18]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000041904c: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07ed], rax; ret; 
0x0000000000418fec: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a07fd], rax; ret; 
0x0000000000418fdc: nop dword ptr [rax]; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0x2a0815], rax; ret; 
0x00000000004579c9: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x2644a1]; ret; 
0x000000000044f46d: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x26d4b1]; ret; 
0x000000000041a71c: nop dword ptr [rax]; mov rax, rdx; ret; 
0x00000000004441ad: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004441bd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x00000000004495bd: nop dword ptr [rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000435539: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000041f98c: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; add rsp, 0x18; pop rbx; pop rbp; jmp rax; 
0x000000000042283c: nop dword ptr [rax]; mov rsi, qword ptr [rsp + 0x28]; mov rdi, rbp; call rax; 
0x000000000044420c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044488d: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x00000000004441f9: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000042baad: nop dword ptr [rax]; movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000004480e9: nop dword ptr [rax]; movzx eax, cl; pop rbx; ret; 
0x0000000000435849: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004357d9: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000042b582: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000444103: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004185e3: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000471e93: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418623: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000418602: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x0000000000446992: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000473682: nop dword ptr [rax]; nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x000000000047bb4c: nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x0000000000400ae5: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000419c9d: nop dword ptr [rax]; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000044871c: nop dword ptr [rax]; pop rbx; ret; 
0x0000000000416c25: nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000449849: nop dword ptr [rax]; xor eax, eax; syscall; 
0x0000000000401284: nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042bf3d: nop dword ptr [rax]; ret; 
0x0000000000474827: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042b587: nop dword ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000485827: nop dword ptr cs:[rax + rax]; call rbx; 
0x0000000000444d47: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d57: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d67: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d77: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d87: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444cc7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444cd7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444ce7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444cf7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444d07: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444d17: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444d27: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444d37: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444cb7: nop dword ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000044d347: nop dword ptr cs:[rax + rax]; lea rax, [rip + 0x26cfa9]; ret; 
0x00000000004128f7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000444717: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004440f7: nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000444107: nop dword ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004185e7: nop dword ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000448f97: nop dword ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000434fd7: nop dword ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045ad17: nop dword ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000045abb7: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab97: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x00000000004185c7: nop dword ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000474847: nop dword ptr cs:[rax + rax]; mov rax, 1; ret; 
0x0000000000471e97: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418627: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d127: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d207: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000418607: nop dword ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x0000000000418637: nop dword ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000480ec7: nop dword ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000435167: nop dword ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e7: nop dword ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a5b2: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000475512: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a582: nop dword ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000411777: nop dword ptr cs:[rax + rax]; pop rbx; ret; 
0x0000000000446997: nop dword ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000473687: nop dword ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000444af7: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000485285: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000044bc95: nop dword ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000474db5: nop dword ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x000000000042b827: nop dword ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x000000000044b18a: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042b357: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000040eac7: nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000419ca7: nop word ptr [rax + rax]; call rax; 
0x00000000004182ca: nop word ptr [rax + rax]; lea rdx, [rax + 0x60]; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x00000000004236da: nop word ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000047baaa: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000470632: nop word ptr [rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x000000000044412a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000417517: nop word ptr [rax + rax]; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000045ab5a: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000449582: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x0000000000475912: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000045ab77: nop word ptr [rax + rax]; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004185a7: nop word ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000047c3b7: nop word ptr [rax + rax]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x000000000041914a: nop word ptr [rax + rax]; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x0000000000473b27: nop word ptr [rax + rax]; mov rax, r8; vzeroupper; ret; 
0x000000000044418a: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000044a33a: nop word ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x00000000004498ea: nop word ptr [rax + rax]; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x0000000000420252: nop word ptr [rax + rax]; mov rsi, qword ptr [rsp + 0x68]; call rax; 
0x00000000004234b7: nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000450b3a: nop word ptr [rax + rax]; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000484b9a: nop word ptr [rax + rax]; pop rbx; ret; 
0x00000000004179b2: nop word ptr [rax + rax]; sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471bf2: nop word ptr [rax + rax]; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000422d3a: nop word ptr [rax + rax]; test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x0000000000417537: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000474826: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x000000000042b586: nop word ptr cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000485826: nop word ptr cs:[rax + rax]; call rbx; 
0x0000000000444d46: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d56: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d66: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d76: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d86: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444cc6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444cd6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444ce6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444cf6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444d06: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444d16: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444d26: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444d36: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444cb6: nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000044d346: nop word ptr cs:[rax + rax]; lea rax, [rip + 0x26cfa9]; ret; 
0x00000000004128f6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x0000000000444716: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004440f6: nop word ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000444106: nop word ptr cs:[rax + rax]; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004185e6: nop word ptr cs:[rax + rax]; mov eax, 0xffffffff; ret; 
0x0000000000448f96: nop word ptr cs:[rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x0000000000434fd6: nop word ptr cs:[rax + rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045ad16: nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x000000000045abb6: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab96: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x00000000004185c6: nop word ptr cs:[rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x0000000000474846: nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x0000000000471e96: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x0000000000418626: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d126: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d206: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000418606: nop word ptr cs:[rax + rax]; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x0000000000418636: nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000480ec6: nop word ptr cs:[rax + rax]; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000435166: nop word ptr cs:[rax + rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350e6: nop word ptr cs:[rax + rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a5b1: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000475511: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a581: nop word ptr cs:[rax + rax]; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x0000000000411776: nop word ptr cs:[rax + rax]; pop rbx; ret; 
0x0000000000446996: nop word ptr cs:[rax + rax]; xor eax, eax; ret; 
0x0000000000473686: nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000444af6: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000485284: nop word ptr cs:[rax + rax]; nop; mov eax, 0x27; syscall; 
0x000000000044bc94: nop word ptr cs:[rax + rax]; nop; mov eax, 0x63; syscall; 
0x0000000000474db4: nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x000000000042b826: nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000470631: nop word ptr es:[rax + rax]; mov edx, 0x10; mov rsi, r14; mov rdi, rbp; call qword ptr [rax + 0x38]; 
0x0000000000456a36: not byte ptr [rbx - 1]; jmp qword ptr [rsi + 0xf]; 
0x000000000042edb5: not dword ptr [rdx + 6]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040eab9: not edx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000040eab8: not rdx; add rax, rdx; shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x000000000041ad9e: notrack jmp 0x1adca; add byte ptr [rax + 0x39], cl; ret; 
0x000000000048b862: or ah, byte ptr [rax + rdi*8]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004247a4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1bb12; cmove rax, rdx; ret; 
0x0000000000423844: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x1d0a2; cmove rax, rdx; ret; 
0x0000000000424774: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x6c52; cmove rax, rdx; ret; 
0x0000000000424384: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x6d12; cmove rax, rdx; ret; 
0x00000000004727e4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x9f2; cmove rax, rdx; ret; 
0x0000000000473bf4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xa22; cmove rax, rdx; ret; 
0x00000000004727b4: or al, 0; add byte ptr [rax - 0x73], cl; add eax, 0xee2; cmove rax, rdx; ret; 
0x0000000000484f25: or al, 0; add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x000000000042a3a7: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f3df: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a3d5: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000475922: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004758d1: or al, 0; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000041dc0c: or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x0000000000473c48: or al, 0; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000046bd8c: or al, 0; add byte ptr [rcx + 1], al; ret 0x8b48; 
0x00000000004727da: or al, 0; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bea: or al, 0; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x000000000047d200: or al, 0x13; add byte ptr [rax], al; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000446ef6: or al, 0x16; cmp rdi, r9; jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447251: or al, 0x16; cmp rdi, r9; jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044769c: or al, 0x16; cmp rdi, r9; jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000425bd6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000425e98: or al, 0x16; test al, al; jne 0x25e80; xor eax, eax; sub eax, ecx; ret; 
0x00000000004b0df4: or al, 0x17; cli; call rcx; 
0x000000000041dbda: or al, 0x1e; mov rax, rsi; pop rbx; ret; 
0x00000000004132b3: or al, 0x24; mov rdi, rbx; call rax; 
0x000000000044964f: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49709; add rsp, 0x68; ret; 
0x0000000000449761: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499e2: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449af1: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000045aeb1: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688ac: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x688bc; add rsp, 0xd8; ret; 
0x0000000000475664: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75729; add rsp, 0x78; ret; 
0x0000000000475776: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004758a8: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000481cef: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481daf: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f10: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821df: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000488305: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000040f7ac: or al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xf7bc; add rsp, 0xd8; ret; 
0x000000000044bbf3: or al, 0x27; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000047f8f9: or al, 0x37; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000424550: or al, 0x39; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000004af528: or al, 0x3e; add byte ptr [rax], al; adc al, 0xf5; clc; call qword ptr [rsi + 0x16]; 
0x0000000000449b9d: or al, 0x48; add esp, 0x10; pop rbx; ret; 
0x0000000000401191: or al, 0x48; mov eax, dword ptr [rsp + 0x18]; call rax; 
0x00000000004165d4: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004852e2: or al, 0x48; mov edx, dword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004b0c28: or al, 0x55; add byte ptr [rax], al; mov ah, 3; cli; jmp qword ptr [rdx]; 
0x0000000000484fe3: or al, 0x5b; pop rbp; pop r12; ret; 
0x000000000046ebb3: or al, 0x7e; ret 0x8944; 
0x000000000045e0db: or al, 0x83; ret; 
0x0000000000448091: or al, 0x86; add rcx, rsi; jmp rcx; 
0x000000000046334a: or al, 0x89; ret 0xc689; 
0x000000000044811b: or al, 0x89; ret 0xe283; 
0x000000000043ad04: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004384f9: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x000000000042c1df: or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000443fbb: or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443fbf: or al, 0xb; jmp rcx; 
0x0000000000422cf8: or al, 0xe8; add ch, byte ptr [rdi - 1]; dec dword ptr [rbx + 0x90c2454]; ret 0xbae9; 
0x0000000000449b94: or al, 0xe8; and al, byte ptr es:[rax]; add byte ptr [rbx + 0x480c2444], cl; add esp, 0x10; pop rbx; ret; 
0x0000000000411398: or al, 0xe8; ret 0xec; 
0x000000000045664f: or al, 0xe9; ret; 
0x0000000000471b2c: or al, 0xeb; ret 0x5590; 
0x000000000045a358: or al, 0xf; xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x0000000000435373: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000466aad: or al, 0xf6; ret 0xf01; 
0x000000000047f44f: or al, 0xfa; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000473c42: or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x000000000042479f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1bb12]; cmove rax, rdx; ret; 
0x000000000042383f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x000000000042476f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x000000000042437f: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x6d12]; cmove rax, rdx; ret; 
0x00000000004727df: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0x9f2]; cmove rax, rdx; ret; 
0x0000000000473bef: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x00000000004727af: or al, 2; add byte ptr [rip + 0xc00], bh; lea rax, [rip + 0xee2]; cmove rax, rdx; ret; 
0x000000000046bccd: or al, 7; lea rax, [rip + 0x24b24a]; mov rax, qword ptr [rax + rcx*8]; mov ecx, 1; jmp rax; 
0x0000000000422d01: or al, 9; ret 0xbae9; 
0x000000000046a8e6: or al, byte ptr [rax]; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000042a587: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043df71: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a5b5: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000048ceaa: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000044a591: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044a591: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000049e9f5: or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000049e9ed: or al, byte ptr [rax]; add byte ptr [rsi - 0x46fffff6], dh; or al, byte ptr [rax]; add byte ptr [rdx + rcx + 0xabf0000], bh; add byte ptr [rax], al; ret 0xa; 
0x000000000040aafc: or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x000000000040766d: or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x000000000044c566: or al, byte ptr [rcx + rcx*8 - 0x7cb7ed8c]; ret 0x4801; 
0x00000000004b3e2b: or al, byte ptr [rcx]; ret; 
0x00000000004445d6: or al, byte ptr [rip + 0xc634900]; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000433a27: or al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048d178: or al, ch; or bh, al; jmp qword ptr [rsi - 0x70]; 
0x000000000040add8: or al, ch; ret 0xffb2; 
0x000000000041cf67: or al, ch; xchg ebx, eax; ret 0xffff; 
0x0000000000408397: or al, ch; ret; 
0x000000000048d17b: or bh, al; jmp qword ptr [rsi - 0x70]; 
0x000000000047ba8d: or bh, bh; adc eax, 0x23e78c; xor eax, eax; add rsp, 8; ret; 
0x000000000047bb45: or bh, bh; and eax, 0x23e6d4; nop dword ptr [rax]; or byte ptr [rdi + 0x315], 4; ret; 
0x000000000048f9aa: or bh, byte ptr [rbp - 0x49f0ffff]; leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x00000000004b49e9: or bh, ch; call qword ptr [rbx + 1]; 
0x0000000000493e6d: or bh, cl; push qword ptr [rax + 0x21]; stc; call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x0000000000424430: or bh, dh; ret 0; 
0x0000000000494875: or bh, dl; call qword ptr [rax]; 
0x00000000004946f5: or bh, dl; call qword ptr [rdx + 0xa]; 
0x0000000000494835: or bh, dl; jmp qword ptr [rax]; 
0x0000000000405e1d: or bl, byte ptr [rbx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000460e12: or bl, byte ptr [rcx + 0x25]; add byte ptr [rax - 0x75], cl; add al, 0xc7; jmp rax; 
0x000000000048e89d: or bl, ch; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000435533: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x000000000044a337: or bl, dh; ret; 
0x0000000000412481: or byte ptr [r10 + 1], dil; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000044fcc6: or byte ptr [r15], 0x8e; ret 1; 
0x00000000004168f6: or byte ptr [r15], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041ae65: or byte ptr [r15], r9b; test ebx, ebp; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000411571: or byte ptr [r8 + 0x29], r9b; ret; 
0x000000000040e16d: or byte ptr [r8 + 0x39], cl; ret; 
0x0000000000418748: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000004917a9: or byte ptr [r8 + 0x7a840f01], bpl; add eax, 0x89490000; ret 0x8349; 
0x000000000048460f: or byte ptr [r8 + 2], r15b; ret; 
0x000000000041163f: or byte ptr [r8 - 0x3f], r9b; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000041dcd2: or byte ptr [r8 - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000047f43a: or byte ptr [r8 - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000442468: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047f925: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x0000000000478cb2: or byte ptr [r8 - 0x7b], r9b; ror byte ptr [rdi], 0x84; ret; 
0x000000000047259d: or byte ptr [r8], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000484654: or byte ptr [r9 + 0x2b802], r9b; add byte ptr [rax], al; ret; 
0x000000000048c907: or byte ptr [r9 + 0x63], r9b; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004845f0: or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000442527: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000004496ac: or byte ptr [rax + 0x101], bh; mov edx, esi; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000411572: or byte ptr [rax + 0x29], cl; ret; 
0x000000000041155c: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000412da5: or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000452928: or byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x0000000000418749: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000040e16e: or byte ptr [rax + 0x39], cl; ret; 
0x00000000004917aa: or byte ptr [rax + 0x7a840f01], ch; add eax, 0x89490000; ret 0x8349; 
0x00000000004b20f4: or byte ptr [rax + 0xb], cl; add byte ptr [rax + rax], cl; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004acff6: or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x00000000004197f6: or byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ret 0x8948; 
0x0000000000419c92: or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x00000000004867bc: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x000000000047d721: or byte ptr [rax + 1], cl; ret; 
0x0000000000484610: or byte ptr [rax + 2], bh; ret; 
0x0000000000489b5b: or byte ptr [rax + 3], cl; add ecx, dword ptr [rcx + rcx*4 - 0x16]; mov qword ptr [rsp], r8; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000489f87: or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x0000000000481a43: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000481a42: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000400403: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000411640: or byte ptr [rax - 0x3f], cl; sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x0000000000419093: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000044a7a4: or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000481da6: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821d6: or byte ptr [rax - 0x75], cl; and al, 0x58; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000481f07: or byte ptr [rax - 0x75], cl; and al, 0x68; xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x000000000041dcd3: or byte ptr [rax - 0x75], cl; or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x000000000040aaf1: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000407662: or byte ptr [rax - 0x75], cl; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000470a14: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x70a2c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000044af0e: or byte ptr [rax - 0x77], cl; adc byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x0000000000410241: or byte ptr [rax - 0x77], cl; call 0x5c425fa4; pop r13; ret; 
0x000000000041027c: or byte ptr [rax - 0x77], cl; call 0x5c425fdf; pop r13; ret; 
0x0000000000414730: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047f43b: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044a3be: or byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; ret; 
0x000000000041666b: or byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000401809: or byte ptr [rax - 0x77], cl; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000442469: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004752f9: or byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000044246d: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000047f7e0: or byte ptr [rax - 0x77], cl; ret; 
0x0000000000401808: or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000048942a: or byte ptr [rax - 0x77], r9b; ret; 
0x0000000000478cb3: or byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x000000000048967e: or byte ptr [rax - 0x7b], cl; sal byte ptr [rax + rax*8 + 0x49], 0x83; ret 0xf608; 
0x000000000047f926: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x00000000004896d7: or byte ptr [rax - 0x7b], cl; sal byte ptr [rsp + rsi*4 + 0x48], 0x83; ret 0xf608; 
0x000000000041ed20: or byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000045b5c0: or byte ptr [rax - 0x7d], cl; call qword ptr [rbx]; 
0x000000000047b567: or byte ptr [rax - 0x7d], cl; ret 0x101; 
0x000000000047dbd2: or byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044c420: or byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x000000000044ab52: or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000411c56: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x000000000047259e: or byte ptr [rax], al; add al, 0; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041a3bb: or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000042a857: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e111: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a795: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004173e7: or byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x000000000045101a: or byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x000000000045af42: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x000000000045ade5: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x0000000000448165: or byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000044e821: or byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000449951: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x000000000048afb4: or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x0000000000411054: or byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004205cc: or byte ptr [rax], al; add byte ptr [rdi], cl; xchg ebx, eax; ret 0x3d83; 
0x000000000040127c: or byte ptr [rax], al; add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000042cf20: or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000040ec1a: or byte ptr [rax], al; lea rdi, [rip + 0x83fea]; mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000040ec21: or byte ptr [rax], al; mov edx, 0x6c; call 0x1b40; xor eax, eax; ret; 
0x000000000040d2bc: or byte ptr [rax], al; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000040d5a2: or byte ptr [rax], al; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000043f7ce: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048d0ff: or byte ptr [rbp + 0x1a], dh; mov rax, qword ptr [rax]; ret; 
0x00000000004859db: or byte ptr [rbp + 0x39481e04], cl; ret 0x830f; 
0x0000000000482a91: or byte ptr [rbp + 0x39], cl; ret 0x8b48; 
0x00000000004856f6: or byte ptr [rbp + 0x440f4cf6], al; ret; 
0x000000000045dbac: or byte ptr [rbp + 0x63840fc0], al; sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000463e90: or byte ptr [rbp + 0x6a840fc0], al; sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000418302: or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000048d16e: or byte ptr [rbp + 4], dh; mov qword ptr [rax], rdx; ret; 
0x0000000000482713: or byte ptr [rbp + rcx*4 + 0x24], cl; ret 0x8d4a; 
0x00000000004b449c: or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x000000000040f83f: or byte ptr [rbp - 0x627bf040], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000041cd92: or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000492113: or byte ptr [rbp - 0x77], cl; ret; 
0x000000000044a1bc: or byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], -0x6c; ret 0xc221; 
0x0000000000449cd3: or byte ptr [rbp - 0x7b], cl; test byte ptr [rdi], -0x6c; ret 0xca21; 
0x0000000000413676: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000401bf5: or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000044b00e: or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041dcd7: or byte ptr [rbx + 0x94807e0], al; ret; 
0x000000000041dcd6: or byte ptr [rbx + 0x94807e0], r8b; ret; 
0x00000000004b4614: or byte ptr [rbx + 0xb], al; add byte ptr [rax + rax], ah; add byte ptr [rax], al; add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x00000000004ac229: or byte ptr [rbx + 0xb], al; add byte ptr [rax], al; add byte ptr [rbx + rcx], dl; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x0000000000463027: or byte ptr [rbx - 0x1776cf3b], al; pop rbx; pop rbp; ret; 
0x000000000040fd69: or byte ptr [rbx - 0x76fefbbe], al; ret 0xe281; 
0x00000000004ab6b8: or byte ptr [rbx - 2], al; jmp qword ptr [rax + 0x43]; 
0x0000000000495e90: or byte ptr [rbx - 5], ch; jmp rax; 
0x00000000004af6a8: or byte ptr [rbx - 7], dh; call qword ptr [rdi]; 
0x000000000048b8fc: or byte ptr [rbx], ah; add byte ptr [rax], cl; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8f5: or byte ptr [rbx], ah; add byte ptr [rax], cl; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b8ee: or byte ptr [rbx], ah; add byte ptr [rax], cl; mov byte ptr [rip + 0x2308b5], 8; mov byte ptr [rip + 0x2308af], 8; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000048b903: or byte ptr [rbx], ah; add byte ptr [rax], cl; ret; 
0x000000000044be04: or byte ptr [rbx], al; add byte ptr [rax], al; mov esi, 0x80; syscall; 
0x000000000047b5d9: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000004843fb: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x0000000000484655: or byte ptr [rcx + 0x2b802], cl; add byte ptr [rax], al; ret; 
0x000000000048157d: or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x0000000000479102: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x00000000004790d4: or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x0000000000410638: or byte ptr [rcx + 0x415d5bd0], cl; pop rsp; pop r13; ret; 
0x0000000000410427: or byte ptr [rcx + 0x415d5bd8], cl; pop rsp; pop r13; ret; 
0x000000000048a355: or byte ptr [rcx + 0x415d5be8], cl; pop rsp; pop r13; ret; 
0x000000000046fb63: or byte ptr [rcx + 0x415d5bf0], cl; pop rsp; pop r13; ret; 
0x000000000048c908: or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x00000000004acf9c: or byte ptr [rcx + 0xb], al; add byte ptr [rax], ch; add byte ptr [rax], al; add byte ptr [rax + 0x18000018], cl; test dh, dh; call qword ptr [rdi]; 
0x00000000004b3bb4: or byte ptr [rcx + 0xb], al; add byte ptr [rax], dl; add byte ptr [rax], al; add byte ptr [rax + 0x50000084], ah; mov bh, 0xfc; jmp qword ptr [rdx]; 
0x00000000004acb81: or byte ptr [rcx + 0xb], al; add byte ptr [rax], r8b; add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x000000000046eb99: or byte ptr [rcx + 0xf], al; mov dh, 0x40; add dword ptr [rcx - 0x77], eax; ret 0xe883; 
0x000000000048821b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004833f0: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x00000000004845f1: or byte ptr [rcx + rbp - 0x30], al; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000489bb3: or byte ptr [rcx + rcx*4 + 4], cl; and al, 0x4c; mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rcx]; 
0x0000000000413bc6: or byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000489adb: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000044ab6c: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000042265d: or byte ptr [rcx + rcx*4 - 0x40], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004111e1: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000418784: or byte ptr [rcx + rdx + 0x31], dh; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000484402: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000044b07b: or byte ptr [rcx - 0x75], cl; add al, byte ptr [rbx + 0x94801e0]; ret 0x8949; 
0x000000000041149a: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000442528: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000484549: or byte ptr [rcx - 0x77], 0; mov dword ptr [rdx], 0xffffc002; mov eax, 1; ret; 
0x000000000044b006: or byte ptr [rcx - 0x77], cl; push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000040d49a: or byte ptr [rcx - 0x77], cl; ret 0x8b4c; 
0x0000000000420868: or byte ptr [rcx - 0x77], cl; ret; 
0x000000000041cd96: or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000044a816: or byte ptr [rcx - 0xa], al; ret; 
0x000000000041b22a: or byte ptr [rcx], dh; call qword ptr [rbx + 0x50]; 
0x000000000041a96b: or byte ptr [rcx], dh; call qword ptr [rsi + 0x50]; 
0x000000000041474a: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000410762: or byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x00000000004a953e: or byte ptr [rdi + 0x26], al; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000047baa0: or byte ptr [rdi + 0x315], 4; xor eax, eax; ret; 
0x000000000047bb50: or byte ptr [rdi + 0x315], 4; ret; 
0x000000000046f1c3: or byte ptr [rdi + 0x32], dh; lea rdi, [rip + 0x34adf]; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x00000000004545bb: or byte ptr [rdi], 0x85; retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000454947: or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044fcc7: or byte ptr [rdi], 0x8e; ret 1; 
0x000000000044b582: or byte ptr [rdi], ah; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041699f: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040ef02: or byte ptr [rdi], cl; mov dh, 0x73; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000475800: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000048835b: or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x00000000004168f7: or byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041ae66: or byte ptr [rdi], cl; test ebx, ebp; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000410b42: or byte ptr [rdi], cl; test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000483053: or byte ptr [rdi], cl; xchg edx, eax; ret 0x8949; 
0x0000000000401251: or byte ptr [rdi], cl; xchg esp, eax; ret 0xd284; 
0x00000000004b4924: or byte ptr [rdx + 0x7a80000], dl; std; call qword ptr [rdi]; 
0x0000000000446c61: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004384e3: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000047e60b: or byte ptr [rdx + 1], bh; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000412482: or byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, r13d; mov eax, r9d; syscall; 
0x000000000048c902: or byte ptr [rip + 0x458b3777], al; or byte ptr [rcx + 0x63], cl; add al, 0x86; add rax, r14; jmp rax; 
0x0000000000444709: or byte ptr [rip + 0xc634900], al; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000449b04: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x00000000004b00a1: or byte ptr [rsi + 0xb], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*2 - 0x596c0000], cl; stc; call rsi; 
0x00000000004b3e22: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rbx]; or al, byte ptr [rcx]; ret; 
0x00000000004b3e8a: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004b3e56: or byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0xd; add eax, dword ptr [rdx]; cld; ret; 
0x00000000004a4d80: or byte ptr [rsi - 3], dh; call qword ptr [rax]; 
0x00000000004a4d80: or byte ptr [rsi - 3], dh; call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x0000000000494664: or byte ptr [rsi], 0xfa; call qword ptr [rax]; 
0x0000000000433ba7: or byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000489df1: or byte ptr [rsp + rdi*2 - 0x75], dh; adc byte ptr [r13 - 0x267bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000457ad1: or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000410ad4: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000484d34: or cl, byte ptr [rax - 0x73]; adc eax, 0x235e24; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004239d2: or cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x000000000045d4ce: or cl, byte ptr [rax - 0x7d]; ret 0x8d04; 
0x00000000004103c7: or cl, byte ptr [rax - 0x7d]; ret; 
0x0000000000486c2d: or cl, byte ptr [rcx - 0x75]; add al, 0x24; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004022d8: or cl, byte ptr [rdi]; xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0x90392]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x0000000000401f87: or cl, byte ptr [rdi]; xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x9065f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004acfee: or cl, byte ptr [rsi]; sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x0000000000407131: or cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000046d44b: or cl, ch; jmp rsp; 
0x000000000047b575: or cl, ch; ret; 
0x000000000042a222: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000435453: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x000000000048f4a5: or dh, bl; ret; 
0x0000000000471be6: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x00000000004179a6: or dh, byte ptr [rdi + rcx + 0x48]; cmp esi, ecx; jne 0x179a0; lea eax, [rdx + rdi]; ret; 
0x0000000000411bbb: or dh, byte ptr [rdx + rbp*2 + 0x48]; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x000000000044ce1c: or dh, dh; ret 0x8902; 
0x000000000041a9b7: or dh, dh; ret 0xf02; 
0x0000000000494408: or dl, 0xf9; call rax; 
0x0000000000494408: or dl, 0xf9; call rax; retf; stc; jmp qword ptr [rax]; 
0x0000000000494845: or dl, bh; call qword ptr [rax]; 
0x00000000004205ca: or dword ptr [rax + 0xf000008], 0xffffff93; ret 0x3d83; 
0x000000000044d45a: or dword ptr [rax + 1], 0xffffffd8; jmp rax; 
0x000000000040da6b: or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x000000000045a6ce: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x0000000000484e13: or dword ptr [rax - 1], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000440cee: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x0000000000433de9: or dword ptr [rax], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042a767: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f67f: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a6a5: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000488a60: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000411c17: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000044a512: or dword ptr [rax], eax; add byte ptr [rax], al; xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000044a4bd: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004ac0e5: or dword ptr [rax], eax; add byte ptr [rax], ch; sub dh, dh; jmp qword ptr [rax]; 
0x000000000045e9e5: or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000401f93: or dword ptr [rax], eax; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004499fa: or dword ptr [rbp - 0x36], esi; lea rdx, [rsp + 0x18]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000042d616: or dword ptr [rbp - 0xcffffff], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x0000000000412dd0: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000433ae9: or dword ptr [rbx], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418613: or dword ptr [rbx], ecx; sub al, byte ptr [rax]; ret; 
0x000000000042efa3: or dword ptr [rcx + 6], edx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004245a3: or dword ptr [rcx], ebp; add al, byte ptr [rax]; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000048f656: or dword ptr [rdi - 0x2776b701], esi; pop rbx; pop rbp; pop r12; ret; 
0x00000000004710b7: or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004194fb: or dword ptr [rdi], 0x83480003; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000040da67: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x000000000046f2a2: or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000048def9: or dword ptr [rdx + 0x74], edi; adc esi, dword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047fc96: or dword ptr [rip + 0x23a54b], 1; pop rbx; ret; 
0x000000000044462e: or dword ptr [rip + 0xc634900], eax; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446a7: or dword ptr [rip + 0xc634900], r8d; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000480ea7: or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x80df6; sub eax, r8d; ret; 
0x0000000000481c39: or dword ptr [rsi - 0x76b70001], 0x43; adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x00000000004337e9: or dword ptr [rsi], 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004b3e28: or eax, 0x10a0303; ret; 
0x00000000004b3e80: or eax, 0x1370303; ret; 
0x0000000000494631: or eax, 0x13c0fffa; cli; call qword ptr [rax + 0x13]; 
0x0000000000494631: or eax, 0x13c0fffa; cli; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000494431: or eax, 0x1420fffa; cli; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x0000000000444a11: or eax, 0x1c478d48; ret; 
0x0000000000412cb0: or eax, 0x20; mov dword ptr [rdi], eax; mov rax, 0xffffffffffffffc0; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000047c098: or eax, 0x28c63; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x00000000004b3e18: or eax, 0x34b0303; ret; 
0x000000000046ea81: or eax, 0x3509e; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004b3e4c: or eax, 0x35b0303; ret; 
0x0000000000471e7a: or eax, 0x3b484a8b; cmove r8, rcx; ret; 
0x000000000046f0c2: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000046e92a: or eax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045addf: or eax, 0x41000000; mov edx, 8; mov eax, ecx; syscall; 
0x000000000045a7da: or eax, 0x441f0f; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000440302: or eax, 0x48c0bc0f; lea eax, [rdi + rax]; ret; 
0x00000000004737a5: or eax, 0x48fad348; test edx, edx; je 0x737d0; bsf rax, rdx; ret; 
0x000000000044003a: or eax, 0x58341; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ec25: or eax, 0x59756; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043e9ca: or eax, 0x599b1; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d0f5: or eax, 0x5b286; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000433727: or eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000444a08: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444358: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000042a2b7: or eax, 0x83480000; ret 0x4910; 
0x000000000043dc31: or eax, 0x83480000; ret 0xe910; 
0x000000000042a2e5: or eax, 0x83480000; ret 0xeb10; 
0x0000000000423df6: or eax, 0x841f0f66; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*8 - 0x7cb7dd8c], al; ret 0x4801; 
0x000000000044006f: or eax, 0x8b000583; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000490f02: or eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000000474482: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x00000000004945ad: or eax, 0xd64fffa; cli; call rsp; 
0x000000000049edf9: or eax, 0xdbf0000; add byte ptr [rax], al; ret 0xd; 
0x0000000000454205: or eax, 0xea810000; ret 0; 
0x00000000004352fa: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000435303: or eax, 0xf7f0ff3; ret; 
0x0000000000469931: or eax, 0xfb8148; adc byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044bf3b: or eax, 0xffffffa0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004494ed: or eax, 0xffffffff; ret; 
0x000000000042bf39: or eax, 1; ret; 
0x00000000004b4615: or eax, dword ptr [r8]; and al, 0; add byte ptr [rax], al; add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x00000000004b3fe5: or eax, dword ptr [rax]; add byte ptr [rax + rax], bl; add byte ptr [rax], al; ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x00000000004ac231: or eax, dword ptr [rax]; add byte ptr [rax + rsi - 0xa], cl; jmp qword ptr [rcx + 2]; 
0x000000000047c9bb: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; cmp eax, 0x283d3; movsxd rax, dword ptr [rdi + r12*4]; add rax, rdi; jmp rax; 
0x000000000042a497: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ddd1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a4c5: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004acc70: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], 0; add byte ptr [rbp + rdx], bl; add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x00000000004b42ca: or eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x20b40000], dh; cld; call qword ptr [rdi + 1]; 
0x000000000044a561: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000044a561: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x00000000004b20f6: or eax, dword ptr [rax]; add byte ptr [rax], r8b; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x0000000000461fd9: or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000045e979: or eax, dword ptr [rax]; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x00000000004b4616: or eax, dword ptr [rax]; and al, 0; add byte ptr [rax], al; add byte ptr [rdi - 0x4500000], cl; cld; call qword ptr [rbx]; 
0x0000000000423171: or eax, dword ptr [rdi]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x00000000004acff8: or eax, dword ptr [rdx]; jae 0xad006; ret; 
0x00000000004b515a: or eax, dword ptr [rdx]; ret 0xe0a; 
0x00000000004338a7: or eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000440417: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000047fad3: or eax, edi; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000044041e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000048460b: or eax, edx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000418304: or ebp, dword ptr [rbx]; push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000458dc4: or ebp, eax; xchg esi, eax; jb 0x58dc5; jmp qword ptr [rsi + 0xf]; 
0x00000000004b4979: or ebp, edi; call qword ptr [rax]; 
0x00000000004128ed: or ebp, edx; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004b3a63: or ebx, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbx + rax*4], cl; add byte ptr [rcx + rbp*4 - 4], al; jmp qword ptr [rdx]; 
0x0000000000400adc: or ebx, dword ptr [rbp - 0x41]; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x00000000004354c3: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000414776: or ebx, esi; ret; 
0x0000000000415657: or ecx, 0x20; mov dword ptr [rdi], ecx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x00000000004acb82: or ecx, dword ptr [r8 + rax]; add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x00000000004ac22a: or ecx, dword ptr [r8]; add byte ptr [rax], al; adc al, 0xb; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x000000000042324f: or ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000413667: or ecx, dword ptr [rax + 1]; ret 0x8949; 
0x00000000004acb83: or ecx, dword ptr [rax + rax]; add byte ptr [rsp + rdx], ch; add byte ptr [rsp + riz*2 - 0xa], ah; jmp rdx; 
0x0000000000446e8c: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048d1f4: or ecx, dword ptr [rax - 0x75]; and al, 0x10; add rsp, 0x28; ret; 
0x00000000004105e8: or ecx, dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x94; ret 0xdaf7; 
0x0000000000490f7f: or ecx, dword ptr [rax - 0x7d]; ret 0x4810; 
0x000000000042418c: or ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004ac22b: or ecx, dword ptr [rax]; add byte ptr [rax], al; adc al, 0xb; add byte ptr [rax], al; xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x00000000004828f3: or ecx, dword ptr [rbp + 0x39]; ret 0x860f; 
0x000000000048f464: or ecx, dword ptr [rbx + 0x74c08507]; add eax, 0xffff50e9; push rbx; ret; 
0x00000000004710b5: or ecx, dword ptr [rdi]; or dword ptr [rdi - 1], 0xffffffff; dec dword ptr [rbx - 0x3b7cb7fa]; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000425da7: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042bf30: or ecx, esi; sub rax, rcx; je 0x2bf40; sbb eax, eax; or eax, 1; ret; 
0x000000000044f9c7: or edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x00000000004440f3: or edi, edi; loope 0x4415d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000444713: or edi, edi; loope 0x4477d; nop dword ptr cs:[rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004ab651: or edi, esi; call ptr [rbx - 0x510001f0]; adc dh, bh; inc ecx; adc dh, bh; call rsp; 
0x00000000004b2d01: or edi, esp; jmp qword ptr [rax]; 
0x0000000000411c0f: or edx, 0x20; mov dword ptr [rdi], edx; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000044a519: or edx, 0x40; mov eax, ecx; syscall; 
0x0000000000494064: or edx, dword ptr [rsi - 0x69540007]; stc; dec dword ptr [rbx - 0x69]; stc; call rax; 
0x000000000047456b: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a7f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000473850: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000049483d: or edx, edi; call qword ptr [rax]; 
0x000000000048cdd5: or esi, 2; mov rdx, qword ptr [r12]; mov edi, 1; call rax; 
0x0000000000446e8a: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000484473: or esi, eax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x0000000000447bf3: or esi, ebx; movq qword ptr [rdi + rdx - 0x10], mm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004353e3: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x000000000045af54: or esi, ebx; ret; 
0x0000000000412dd1: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000044a518: or r10d, 0x40; mov eax, ecx; syscall; 
0x0000000000435532: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x00000000004b3a62: or r11d, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rbx + rax*4], cl; add byte ptr [rcx + rbp*4 - 4], al; jmp qword ptr [rdx]; 
0x00000000004354c2: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x000000000042a221: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000435452: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x00000000004353e2: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x00000000004b5159: or r8d, dword ptr [r10]; ret 0xe0a; 
0x00000000004b42c9: or r8d, dword ptr [r8]; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 - 0x20b40000], dh; cld; call qword ptr [rdi + 1]; 
0x0000000000457ad0: or r9b, byte ptr [r8 + 0x39]; ret 0x1176; 
0x00000000004b3e7f: or rax, 0x1370303; ret; 
0x00000000004b3e17: or rax, 0x34b0303; ret; 
0x00000000004b3e4b: or rax, 0x35b0303; ret; 
0x000000000046f0c1: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4404; 
0x000000000046e929: or rax, 0x401f0f08; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x00000000004494ec: or rax, 0xffffffffffffffff; ret; 
0x00000000004acc6f: or rax, qword ptr [r8]; add byte ptr [rax], al; add byte ptr [rax], 0; add byte ptr [rbp + rdx], bl; add byte ptr [rbp + rbp*2 - 0xa], dh; call qword ptr [rdi + 2]; 
0x00000000004b3fe4: or rax, qword ptr [rax]; add byte ptr [rax + rax], bl; add byte ptr [rax], al; ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x00000000004b20f5: or rax, qword ptr [rax]; add byte ptr [rax], r8b; add al, ah; imul eax, dword ptr [rax], 0xfbcf5000; jmp qword ptr [rbx + 8]; 
0x00000000004acff7: or rax, qword ptr [rdx]; jae 0xad006; ret; 
0x0000000000440416: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044041d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000048460a: or rax, rdx; mov qword ptr [rdi + 8], rax; mov eax, 2; ret; 
0x0000000000425da6: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042bf2f: or rcx, rsi; sub rax, rcx; je 0x2bf40; sbb eax, eax; or eax, 1; ret; 
0x000000000047456a: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a7e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000047384f: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000484472: or rsi, rax; mov eax, 1; mov qword ptr [rdi], rsi; ret; 
0x000000000041039a: out 0x41, al; call qword ptr [rbp + 0x38]; 
0x0000000000480ea9: out 0x41, al; cmp eax, eax; je 0x80df6; sub eax, r8d; ret; 
0x000000000044bd80: out 0x41, eax; and ebx, 0xffffffbb; cmp r11d, 0xa; je 0x4bd8c; ret; 
0x000000000046fd32: out 0x41, eax; call qword ptr [rdi + 0x38]; 
0x000000000048dba5: out 0x41, eax; call rdi; 
0x0000000000486769: out 0x48, al; add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000484494: out 0x48, al; mov dword ptr [rdi], esi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000046a1b5: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000469e80: out 0x48, al; mov edi, dword ptr [rbp - 0x8d0]; mov rdx, r13; call qword ptr [rbx + 0x38]; 
0x0000000000470d8d: out 0x48, al; mov edi, ebx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000422db8: out 0x48, eax; sub eax, 0x10; ret; 
0x0000000000447afb: out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x000000000042f4c6: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045fcac: out 0x4c, al; mov edi, esi; sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000042f2f6: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f2: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f33e: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045fcb2: out 0x4c, eax; mov edx, edi; call qword ptr [rax + 0x38]; 
0x0000000000416bc7: out 0x4d, eax; lea edi, [rsi + 1]; call qword ptr [rbx + 0x18]; 
0x0000000000470655: out 0x74, eax; xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000489ae1: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x0000000000489bbd: out 0x89, al; out dx, eax; call qword ptr [rcx]; 
0x00000000004899c7: out 0x89, al; out dx, eax; call rax; 
0x00000000004126e5: out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x0000000000494004: out 0x91, al; stc; jmp qword ptr [rsi - 0x6e]; 
0x000000000049400c: out 0x92, al; stc; jmp qword ptr [rsi - 0x6d]; 
0x000000000044923f: out 0xbf, al; add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xe5; syscall; 
0x00000000004a7a20: out 0xcf, eax; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000048d1ea: out 0xe8, al; adc byte ptr [rip - 0x7ab80000], ah; sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x000000000047281c: out 0xe8, al; xchg esi, eax; fdiv st(0), st(0); dec dword ptr [rax + 1]; ret; 
0x0000000000418f60: out 0xe8, eax; retf 0xfe74; dec dword ptr [rax - 0x77]; ret; 
0x00000000004480a4: out 0xf0, al; mov edx, 0; cmove rax, rdx; pop rbx; ret; 
0x0000000000434cca: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000434d4a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004a9748: out 0xf5, eax; mov ch, 0xab; ret; 
0x000000000049428d: out 0xf9, eax; call qword ptr [rax]; 
0x00000000004942cd: out 0xf9, eax; call rax; 
0x00000000004b2549: out 0xfb, eax; jmp qword ptr [rdi]; 
0x00000000004210b3: out 0xff, al; jmp qword ptr [rsi + 0x2e]; 
0x0000000000461be2: out 0xff, eax; dec dword ptr [rbp + 0x63]; ret 0x20be; 
0x000000000046ab6f: out 0xff, eax; inc dword ptr [rcx - 5]; jg 0x6ab88; test byte ptr [rax - 0x7c000019], ah; ret; 
0x0000000000402b8d: out 1, al; add byte ptr [rax - 0x77], cl; ret 0x8548; 
0x000000000047613e: out 2, al; add byte ptr [rax + 9], cl; ret 0x850f; 
0x000000000047f8f5: out 4, al; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000436207: out 5, eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000456eae: out dx, al; add al, 0; add byte ptr [rax + 0x29], cl; ret 0x349; 
0x0000000000435a8e: out dx, al; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000417865: out dx, al; call 0x4be30; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x000000000048bffe: out dx, al; ja 0x8c119; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x00000000004243ee: out dx, al; jns 0x243f1; add byte ptr [rsi + rax*8 - 0xd], dh; ret; 
0x00000000004350d0: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004498bd: out dx, al; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497ed: out dx, al; mov edi, ebx; xor eax, eax; syscall; 
0x000000000042f4ca: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000473dc0: out dx, al; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000045e63d: out dx, al; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000040e08c: out dx, al; mov rdi, r13; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004234c2: out dx, al; mov rdi, rax; call rcx; 
0x000000000044a4b8: out dx, al; mov rdi, rbp; mov eax, 9; syscall; 
0x0000000000413f88: out dx, al; mov rdi, rbx; call qword ptr [rax + 0x78]; 
0x0000000000413abd: out dx, al; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004350da: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043f52e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000421e73: out dx, al; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x000000000040e9f5: out dx, al; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000430560: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db90: out dx, al; sub rdi, 0x40; lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004245de: out dx, al; test byte ptr [rip + 0x297817], 2; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x000000000047d1fc: out dx, al; xor eax, eax; call 0x7e510; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x00000000004948c9: out dx, al; stc; call qword ptr [rax]; 
0x00000000004178c9: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000417921: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000470502: out dx, eax; call qword ptr [rax + 0x38]; 
0x0000000000489ae3: out dx, eax; call qword ptr [rax]; 
0x0000000000410767: out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000489bbf: out dx, eax; call qword ptr [rcx]; 
0x0000000000422847: out dx, eax; call rax; 
0x00000000004740e2: out dx, eax; call rbx; 
0x0000000000484524: out dx, eax; cmp cx, 0x7fff; je 0x84514; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000435150: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000430623: out dx, eax; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430564: out dx, eax; lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc53: out dx, eax; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db94: out dx, eax; lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040e08f: out dx, eax; lea rbx, [r15 + rax]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000044a4bb: out dx, eax; mov eax, 9; syscall; 
0x000000000041248d: out dx, eax; mov eax, r9d; syscall; 
0x000000000042f2fa: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f6: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f342: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000474233: out dx, eax; mov r9, r14; call rbx; 
0x0000000000411e33: out dx, eax; mov rax, qword ptr [rsi + 0x60]; add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000040dffa: out dx, eax; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000043515a: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043f62d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000411803: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107e8: out dx, eax; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x000000000042c263: out dx, eax; push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c278: out dx, eax; push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c28d: out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000446743: out dx, eax; ret 0xf66; 
0x000000000040e909: out dx, eax; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000042d77c: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000042d765: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d74e: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042c20a: out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c4df: out dx, eax; xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c59c: out dx, eax; xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c54b: out dx, eax; xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000048ab07: out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000043d53e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004b2545: outsb dx, byte ptr [rsi]; add byte ptr [rax], al; cwde; out 0xfb, eax; jmp qword ptr [rdi]; 
0x0000000000444b6e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000004852e7: outsb dx, byte ptr [rsi]; and eax, dword ptr [rax]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004852de: outsb dx, byte ptr [rsi]; and eax, dword ptr [rax]; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x00000000004a75ac: outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004a9323: outsb dx, byte ptr [rsi]; ja 0xa92a9; ret 0x48f; 
0x000000000045aace: outsb dx, byte ptr [rsi]; jo 0x5aacb; jmp qword ptr [rsi + 0x2e]; 
0x000000000047d720: outsb dx, byte ptr [rsi]; or byte ptr [rax + 1], cl; ret; 
0x00000000004a7064: outsb dx, byte ptr [rsi]; sahf; ret 0x38ae; 
0x00000000004af691: outsb dx, byte ptr [rsi]; stc; call qword ptr [rbx + 4]; 
0x0000000000493f61: outsb dx, byte ptr [rsi]; stc; push qword ptr [rax]; outsd dx, dword ptr [rsi]; stc; jmp qword ptr [rax]; 
0x00000000004470dc: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [r11], xmm8; ret; 
0x0000000000419142: outsd dx, dword ptr [rsi]; and al, 0x89; adc byte ptr [r11 + 0x5d], r11b; ret; 
0x000000000042d2f8: outsd dx, dword ptr [rsi]; call 0xf69bbb1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d2dd: outsd dx, dword ptr [rsi]; fdiv dword ptr [rdx - 0x10f09928]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d0dd: outsd dx, dword ptr [rsi]; fdiv qword ptr [rdx - 0x10f09924]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000424998: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x0000000000438ebe: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x000000000042d25d: outsd dx, dword ptr [rsi]; fnstenv [rdx - 0x10f09927]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cfa7: outsd dx, dword ptr [rsi]; movabs rbp, 0xf66d1ef0f66bdb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d0a7: outsd dx, dword ptr [rsi]; movabs rsp, 0xf66d1ef0f66bcb2; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000438a94: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000042d1dd: outsd dx, dword ptr [rsi]; push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cfdd: outsd dx, dword ptr [rsi]; push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d61d: outsd dx, dword ptr [rsi]; push rdi; ret 0xff3; 
0x000000000047330a: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000042d57d: outsd dx, dword ptr [rsi]; push rdi; ret; 
0x00000000004443b6: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x000000000042ce0d: outsd dx, dword ptr [rsi]; push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cedd: outsd dx, dword ptr [rsi]; push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000444a06: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444356: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000444396: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x443a4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004633ed: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x000000000041a30a: outsd dx, dword ptr [rsi]; ret 0x4466; 
0x000000000046616d: outsd dx, dword ptr [rsi]; ret 0x4ce8; 
0x00000000004a7a26: outsd dx, dword ptr [rsi]; ret 0x5ae4; 
0x0000000000419d42: outsd dx, dword ptr [rsi]; ret 0x8348; 
0x0000000000463416: outsd dx, dword ptr [rsi]; ret 0xa3e8; 
0x0000000000466149: outsd dx, dword ptr [rsi]; ret 0xe583; 
0x000000000047335a: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000042d63d: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d75e: outsd dx, dword ptr [rsi]; sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d59d: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d6dd: outsd dx, dword ptr [rsi]; sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004633b4: outsd dx, dword ptr [rsi]; sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x000000000043893c: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004466ec: outsd dx, dword ptr [rsi]; ret; 
0x0000000000493f65: outsd dx, dword ptr [rsi]; stc; jmp qword ptr [rax]; 
0x00000000004a7a25: outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x000000000042b32d: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x2b390; xor eax, eax; ret; 
0x0000000000474814: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x00000000004747ff: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000044091b: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x4092a; bsf eax, edx; ret; 
0x000000000042b32c: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x2b390; xor eax, eax; ret; 
0x000000000044091a: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x4092a; bsf eax, edx; ret; 
0x00000000004a8e25: pcmpeqw mm5, qword ptr [rbp + r12*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x00000000004a8e26: pcmpeqw mm5, qword ptr [rbp + riz*2 - 0x5f]; mov cs, edi; ret 0x8b36; 
0x000000000041565b: pcmpgtb mm0, mm7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000446b70: pcmpistri xmm1, xmm1, 0x3a; movsxd rcx, ecx; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000485214: pcmpistri xmm3, xmmword ptr [rdi], 0x12; jae 0x85210; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000447e06: pextrw edi, mm0, 0x77; ret; 
0x00000000004402fc: pmovmskb eax, mm0; test eax, eax; je 0x40310; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b29c: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b332: pmovmskb eax, mm1; test eax, eax; jne 0x2b390; xor eax, eax; ret; 
0x000000000042b302: pmovmskb eax, mm1; test eax, eax; jne 0x2b3b0; xor eax, eax; ret; 
0x00000000004402fb: pmovmskb eax, xmm0; test eax, eax; je 0x40310; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b29b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b331: pmovmskb eax, xmm1; test eax, eax; jne 0x2b390; xor eax, eax; ret; 
0x000000000042b301: pmovmskb eax, xmm1; test eax, eax; jne 0x2b3b0; xor eax, eax; ret; 
0x000000000044091f: pmovmskb edx, mm4; test edx, edx; je 0x4092a; bsf eax, edx; ret; 
0x000000000044091e: pmovmskb edx, xmm4; test edx, edx; je 0x4092a; bsf eax, edx; ret; 
0x0000000000416935: pop qword ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000487b6d: pop qword ptr [rdi + rsi*4 - 0x3b7cb701]; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044bd35: pop r10; ret; 
0x000000000044a651: pop r12; jmp rax; 
0x000000000044a636: pop r12; mov esi, 2; jmp rax; 
0x000000000041fe89: pop r12; pop r13; pop r14; jmp rax; 
0x00000000004223ac: pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000421056: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004025fe: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x000000000040068f: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040f899: pop r12; pop r13; pop r14; pop rbp; ret; 
0x000000000041012e: pop r12; pop r13; pop r14; ret; 
0x000000000040daf9: pop r12; pop r13; ret; 
0x0000000000405e04: pop r12; ret; 
0x000000000041fe8b: pop r13; pop r14; jmp rax; 
0x00000000004223ae: pop r13; pop r14; jmp rcx; 
0x0000000000421058: pop r13; pop r14; pop r15; jmp rax; 
0x0000000000402600: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000400691: pop r13; pop r14; pop r15; ret; 
0x000000000040f89b: pop r13; pop r14; pop rbp; ret; 
0x0000000000410130: pop r13; pop r14; ret; 
0x000000000040dafb: pop r13; ret; 
0x000000000041fe8d: pop r14; jmp rax; 
0x00000000004223b0: pop r14; jmp rcx; 
0x000000000042105a: pop r14; pop r15; jmp rax; 
0x0000000000402602: pop r14; pop r15; pop rbp; ret; 
0x0000000000400693: pop r14; pop r15; ret; 
0x000000000040f89d: pop r14; pop rbp; ret; 
0x0000000000410132: pop r14; ret; 
0x000000000042105c: pop r15; jmp rax; 
0x0000000000402604: pop r15; pop rbp; ret; 
0x0000000000400695: pop r15; ret; 
0x00000000004b0f2d: pop rax; add byte ptr [rax], al; shr byte ptr [rdi], 1; cli; jmp qword ptr [rdi + 0x11]; 
0x000000000041e644: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4c07; 
0x00000000004b0e88: pop rax; and dl, bh; call qword ptr [rdi]; 
0x0000000000460dc2: pop rax; and eax, 0x48b4800; clc; jmp rax; 
0x000000000045dd13: pop rax; idiv edi; dec dword ptr [rax + 0x29]; bnd call qword ptr [rbx + 0x38]; 
0x000000000045dcdd: pop rax; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000481abc: pop rax; jmp qword ptr [rax]; 
0x00000000004adb68: pop rax; mov ah, 0xf6; call qword ptr [rdx]; 
0x0000000000411e3b: pop rax; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x0000000000411099: pop rax; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004119a4: pop rax; mov rdi, rax; call qword ptr [rax + 8]; 
0x0000000000419c91: pop rax; or byte ptr [rax + 1], bh; pop rbx; pop rbp; pop r12; ret; 
0x0000000000492112: pop rax; or byte ptr [rbp - 0x77], cl; ret; 
0x000000000040da66: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000481b76: pop rax; pop rdx; pop rbx; ret; 
0x00000000004b4974: pop rax; xchg edx, eax; add byte ptr [rax], al; sub byte ptr [rcx], cl; std; call qword ptr [rax]; 
0x0000000000481dab: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x00000000004821db: pop rax; xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x00000000004155a4: pop rax; ret; 
0x0000000000493f15: pop rax; stc; call qword ptr [rax + 0x5a]; 
0x000000000047285a: pop rbp; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000460d2a: pop rbp; and eax, 0x48b4800; clc; jmp rax; 
0x0000000000416670: pop rbp; jmp rax; 
0x0000000000475648: pop rbp; mov eax, 0x101; syscall; 
0x0000000000486b83: pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x0000000000400a9b: pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000412bad: pop rbp; movzx eax, byte ptr [rax]; pop r12; pop r13; pop r14; ret; 
0x0000000000488a5f: pop rbp; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044f9c6: pop rbp; or edi, ebx; jmp qword ptr [rsi + 0xf]; 
0x000000000044a650: pop rbp; pop r12; jmp rax; 
0x000000000044a635: pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000041fe88: pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x00000000004223ab: pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000421055: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x000000000040068e: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000041012d: pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040daf8: pop rbp; pop r12; pop r13; ret; 
0x0000000000405e03: pop rbp; pop r12; ret; 
0x000000000041fe8c: pop rbp; pop r14; jmp rax; 
0x00000000004223af: pop rbp; pop r14; jmp rcx; 
0x0000000000421059: pop rbp; pop r14; pop r15; jmp rax; 
0x0000000000402601: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000400692: pop rbp; pop r14; pop r15; ret; 
0x000000000040f89c: pop rbp; pop r14; pop rbp; ret; 
0x0000000000410131: pop rbp; pop r14; ret; 
0x0000000000484408: pop rbp; pop rbx; ret; 
0x0000000000400aa8: pop rbp; ret; 
0x00000000004b51f1: pop rbp; std; jmp qword ptr [rcx + 9]; 
0x00000000004a65f8: pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000461018: pop rbx; and eax, 0x48b4800; clc; jmp rax; 
0x00000000004481b2: pop rbx; and eax, 0x7ff80000; div ecx; mov eax, eax; ret; 
0x0000000000448156: pop rbx; and eax, 0x7ff80000; ret; 
0x00000000004165b4: pop rbx; jmp rax; 
0x00000000004866e1: pop rbx; mov ah, 0xf7; jmp qword ptr [rsi + 0x2e]; 
0x000000000047fcb7: pop rbx; mov eax, dword ptr fs:[rax]; ret; 
0x00000000004481a1: pop rbx; mov eax, eax; ret; 
0x000000000041058f: pop rbx; mov eax, edx; pop rbp; pop r12; pop r13; ret; 
0x0000000000465f0d: pop rbx; mov eax, edx; pop rbp; pop r12; ret; 
0x00000000004170f9: pop rbx; mov ecx, edx; xor edx, edx; jmp rax; 
0x0000000000411768: pop rbx; mov rax, qword ptr [rax + 0x130]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000044a647: pop rbx; mov rax, rbp; mov esi, 3; pop rbp; pop r12; jmp rax; 
0x000000000041ab13: pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x0000000000444691: pop rbx; or dword ptr [rip + 0xc634900], eax; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000040f898: pop rbx; pop r12; pop r13; pop r14; pop rbp; ret; 
0x0000000000457b2c: pop rbx; pop r12; ret; 
0x000000000048ab89: pop rbx; pop r14; ret; 
0x0000000000460dc1: pop rbx; pop rax; and eax, 0x48b4800; clc; jmp rax; 
0x000000000041666f: pop rbx; pop rbp; jmp rax; 
0x0000000000470d91: pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000044a634: pop rbx; pop rbp; pop r12; mov esi, 2; jmp rax; 
0x000000000041fe87: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x00000000004223aa: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rcx; 
0x0000000000410164: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040daf7: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000405e02: pop rbx; pop rbp; pop r12; ret; 
0x0000000000401bf6: pop rbx; pop rbp; ret; 
0x00000000004a98e0: pop rbx; ret 0x6f9; 
0x00000000004885ec: pop rbx; sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000044e030: pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x0000000000405e1e: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x00000000004170c2: pop rbx; xor edx, edx; jmp rax; 
0x00000000004a65f6: pop rbx; cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000400de8: pop rbx; ret; 
0x00000000004b1115: pop rcx; add byte ptr [rax], al; sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x0000000000461123: pop rcx; and eax, 0x48b4800; clc; jmp rax; 
0x00000000004a75a6: pop rcx; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x0000000000438a95: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000438468: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x00000000004b1119: pop rcx; cli; jmp qword ptr [rsi + 0xa]; 
0x00000000004b5171: pop rcx; std; call qword ptr [rdx]; 
0x00000000004b1681: pop rdi; add byte ptr [rax], al; sbb al, 0x95; cli; call qword ptr [rcx]; 
0x00000000004b16a9: pop rdi; add byte ptr [rax], al; xor al, 0x95; cli; call qword ptr [rax]; 
0x000000000043fcbd: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004608c9: pop rdi; and eax, 0x48b4800; clc; jmp rax; 
0x000000000042f899: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a9: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004a8b9e: pop rdi; insd dword ptr [rdi], dx; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x000000000042105d: pop rdi; jmp rax; 
0x00000000004a7b61: pop rdi; mov dh, 0x4e; ret 0x474c; 
0x00000000004832cd: pop rdi; mov edi, esp; jmp qword ptr [rsi + 0x2e]; 
0x000000000044a815: pop rdi; or byte ptr [rcx - 0xa], al; ret; 
0x000000000042f4c9: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f2f9: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f5: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f341: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000402605: pop rdi; pop rbp; ret; 
0x000000000046faad: pop rdi; ret 0xfffd; 
0x0000000000438bfd: pop rdi; ret 5; 
0x000000000046c6bd: pop rdi; stosd dword ptr [rdi], eax; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000047cb9b: pop rdi; test rcx, rcx; jne 0x7d176; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000400696: pop rdi; ret; 
0x000000000044400d: pop rdi; syscall; 
0x000000000044400d: pop rdi; syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000484da9: pop rdx; add al, byte ptr [rax]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000042ab26: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x00000000004917a3: pop rdx; add eax, 0x8b480000; or byte ptr [r8 + 0x7a840f01], bpl; add eax, 0x89490000; ret 0x8349; 
0x0000000000461074: pop rdx; and eax, 0x48b4800; clc; jmp rax; 
0x00000000004a8781: pop rdx; je 0xa8748; ret 0xacfc; 
0x00000000004a75a4: pop rdx; jp 0xa7600; cmp byte ptr [rbx + rdi*2], bh; push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004164b5: pop rdx; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004a9747: pop rdx; out 0xf5, eax; mov ch, 0xab; ret; 
0x000000000044bd34: pop rdx; pop r10; ret; 
0x0000000000481b77: pop rdx; pop rbx; ret; 
0x000000000044bd59: pop rdx; pop rsi; ret; 
0x0000000000494e95: pop rdx; cli; call qword ptr [rax]; 
0x000000000044bd36: pop rdx; ret; 
0x000000000043fbbe: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000420356: pop rsi; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000484d39: pop rsi; and eax, dword ptr [rax]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x00000000004963fc: pop rsi; jae 0x963fa; jmp qword ptr [rsi]; 
0x000000000041fe8e: pop rsi; jmp rax; 
0x00000000004223b1: pop rsi; jmp rcx; 
0x000000000042105b: pop rsi; pop r15; jmp rax; 
0x0000000000402603: pop rsi; pop r15; pop rbp; ret; 
0x0000000000400694: pop rsi; pop r15; ret; 
0x000000000040f89e: pop rsi; pop rbp; ret; 
0x00000000004a78dc: pop rsi; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004623ae: pop rsi; sbb al, 1; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x0000000000410133: pop rsi; ret; 
0x0000000000493f25: pop rsi; stc; call qword ptr [rax]; 
0x000000000043d750: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042ae24: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004b1389: pop rsp; add byte ptr [rax], al; add al, 0x74; cli; jmp rax; 
0x00000000004b134d: pop rsp; add byte ptr [rax], al; jo 0xb1344; std; jmp qword ptr [rdi]; 
0x000000000043e450: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x000000000041c94b: pop rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000481b1e: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aac: pop rsp; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x00000000004491b0: pop rsp; cmp byte ptr [rcx], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000044a652: pop rsp; jmp rax; 
0x0000000000490d30: pop rsp; mov dl, 0x22; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000419655: pop rsp; mov eax, dword ptr [rip + 0x2a2714]; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x000000000044a637: pop rsp; mov esi, 2; jmp rax; 
0x000000000041fe8a: pop rsp; pop r13; pop r14; jmp rax; 
0x00000000004223ad: pop rsp; pop r13; pop r14; jmp rcx; 
0x0000000000421057: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004025ff: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000400690: pop rsp; pop r13; pop r14; pop r15; ret; 
0x000000000040f89a: pop rsp; pop r13; pop r14; pop rbp; ret; 
0x000000000041012f: pop rsp; pop r13; pop r14; ret; 
0x000000000040dafa: pop rsp; pop r13; ret; 
0x0000000000401da3: pop rsp; ret; 
0x000000000046a7ba: pop rsp; stc; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x00000000004b51d9: pop rsp; std; jmp qword ptr [rcx]; 
0x00000000004964a8: pshufw mm7, mm3, 0xff; jo 0x964aa; jmp qword ptr [rax + 0x74]; 
0x0000000000435222: psllq mm1, qword ptr [r15]; jg 0x35237; ret; 
0x0000000000437d42: psllq mm1, qword ptr [r15]; jg 0x37d57; ret; 
0x0000000000435223: psllq mm1, qword ptr [rdi]; jg 0x35237; ret; 
0x0000000000437d43: psllq mm1, qword ptr [rdi]; jg 0x37d57; ret; 
0x0000000000444236: psllq mm1, qword ptr [rdi]; jg 0x44242; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000444297: psllq mm1, qword ptr [rdi]; jg 0x442a3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000444398: psllq mm1, qword ptr [rdi]; jg 0x443a4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004448c6: psllq mm1, qword ptr [rdi]; jg 0x448d2; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000444947: psllq mm1, qword ptr [rdi]; jg 0x44953; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000444a48: psllq mm1, qword ptr [rdi]; jg 0x44a54; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000494521: psubd mm7, mm7; mov dl, 0xe; cli; inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x00000000004585c0: push -0x17000001; test dword ptr [rbp - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x0000000000417863: push -0x3a171115; add r8d, dword ptr [r8]; nop dword ptr [rax + rax]; mov rax, 0xffffffffffffffff; ret; 
0x00000000004a75aa: push -0x42; outsb dx, byte ptr [rsi]; call qword ptr [rcx - 0x66]; 
0x00000000004794d2: push -0x7a; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000045e1d2: push -0x7c000003; ret; 
0x0000000000444b54: push -0x9ffffff; ret 0x7501; 
0x00000000004acbdd: push -0xa; call qword ptr [rax]; 
0x0000000000495eb9: push -5; call qword ptr [rax]; 
0x0000000000495eb1: push -5; push rsp; push 0x6a38fffb; sti; call qword ptr [rax]; 
0x0000000000493f51: push -7; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x0000000000473f63: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004530ca: push 0; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; mov rax, qword ptr [rsp + 0x20]; call rax; 
0x000000000044e750: push 0; mov rdx, rbp; mov rsi, qword ptr [rsp + 0x18]; mov r9, r13; call rbx; 
0x0000000000496454: push 0x40fffb75; jne 0x96456; dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x0000000000411bbd: push 0x48; add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000484f24: push 0x4800000c; mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000488454: push 0x4800001f; mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x00000000004614b4: push 0x48002552; mov eax, dword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000449afc: push 0x489066c3; lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000479a85: push 0x48b4901; and al, 0x83; ret; 
0x00000000004585cc: push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000004b0e84: push 0x58000057; and dl, bh; call qword ptr [rdi]; 
0x000000000047190b: push 0x60894c30; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000044b9d2: push 0x61; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000495ea9: push 0x68f4fffb; sti; jmp qword ptr [rax + 0x6a]; 
0x0000000000495ea1: push 0x68f4fffb; sti; push rsp; push 0x68f4fffb; sti; jmp qword ptr [rax + 0x6a]; 
0x0000000000495eb5: push 0x6a38fffb; sti; call qword ptr [rax]; 
0x0000000000495ead: push 0x6a60fffb; sti; push rsp; push 0x6a38fffb; sti; call qword ptr [rax]; 
0x0000000000495e7d: push 0x6b90fffb; sti; push qword ptr [rax + 0x6b]; sti; call qword ptr [rax + 0x6b]; 
0x0000000000495e65: push 0x6bb0fffb; sti; jmp rax; 
0x00000000004a9322: push 0x6e; ja 0xa92a9; ret 0x48f; 
0x00000000004718d5: push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x00000000004848fa: push 0x77; and eax, dword ptr [rax]; ret; 
0x00000000004b1984: push 0x78000062; mov al, 0xfa; call qword ptr [rax]; 
0x0000000000481f0c: push 0xc334864; and eax, 0x28; jne 0x81f4e; add rsp, 0x78; ret; 
0x0000000000473f5e: push 1; xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473ee4: push 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000493e6f: push qword ptr [rax + 0x21]; stc; call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x0000000000494dab: push qword ptr [rax + 0x29]; cli; call rax; 
0x0000000000494ba7: push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x0000000000493e8f: push qword ptr [rax + 0x2a]; stc; call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000497307: push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x0000000000494b2f: push qword ptr [rax + 0x33]; cli; jmp rax; 
0x000000000049495f: push qword ptr [rax + 0x35]; cli; inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000411804: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107e9: push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x0000000000494093: push qword ptr [rax + 0x40fff993]; xchg esp, eax; stc; call rax; 
0x000000000049464f: push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494437: push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x0000000000493f0f: push qword ptr [rax + 0x57]; stc; jmp rax; 
0x0000000000493f53: push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x0000000000495e83: push qword ptr [rax + 0x6b]; sti; call qword ptr [rax + 0x6b]; 
0x00000000004948a3: push qword ptr [rax + 4]; cli; jmp rax; 
0x000000000049469f: push qword ptr [rax + 5]; cli; jmp rax; 
0x0000000000494697: push qword ptr [rax + 6]; cli; push rax; add eax, 0x570fffa; cli; jmp rax; 
0x0000000000449ca2: push qword ptr [rax + rbp*4 + 0x49]; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x000000000049429f: push qword ptr [rax - 0x1f]; stc; jmp qword ptr [rax - 0x1d]; 
0x00000000004942bb: push qword ptr [rax - 0x21]; stc; call qword ptr [rax - 0x1f]; 
0x000000000049435b: push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x000000000049435b: push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x00000000004942d7: push qword ptr [rax - 0x23]; stc; call qword ptr [rax - 0x21]; 
0x0000000000494373: push qword ptr [rax - 0x26]; stc; inc dword ptr [rax - 0x24]; stc; jmp qword ptr [rax]; 
0x000000000049438f: push qword ptr [rax - 0x28]; stc; jmp qword ptr [rax]; 
0x0000000000493e97: push qword ptr [rax - 0x2f0006d4]; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x0000000000494413: push qword ptr [rax - 0x32]; stc; inc eax; iretd; stc; call qword ptr [rax]; 
0x000000000049500b: push qword ptr [rax - 0x3f000509]; idiv edx; call rax; 
0x0000000000494f77: push qword ptr [rax - 0x3f00050f]; int1; cli; call rax; 
0x0000000000494e7f: push qword ptr [rax - 0x3f0005b1]; push rcx; cli; call rax; 
0x00000000004941f3: push qword ptr [rax - 0x65]; stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x0000000000494f07: push qword ptr [rax - 0x6e]; cli; call qword ptr [rax]; 
0x0000000000494353: push qword ptr [rax - 0x6f000626]; fdiv st(1), st(0); push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x0000000000494ee7: push qword ptr [rax - 0x7b]; cli; call qword ptr [rax]; 
0x0000000000493d7b: push qword ptr [rax - 0xb]; clc; inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x000000000049504b: push qword ptr [rax - 7]; cli; call qword ptr [rax - 0x4f000507]; stc; cli; call rax; 
0x0000000000494fef: push qword ptr [rax]; idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x0000000000495e8b: push qword ptr [rax]; imul edi, ebx, -1; or byte ptr [rbx - 5], ch; jmp rax; 
0x000000000048aecf: push qword ptr [rax]; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x000000000048e06d: push qword ptr [rax]; jne 0x8e098; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048eecd: push qword ptr [rax]; jne 0x8eef8; mov rax, qword ptr [rsi + 0x10]; ret; 
0x00000000004942df: push qword ptr [rax]; loope 0x942dc; call qword ptr [rax]; 
0x00000000004941b7: push qword ptr [rax]; mov ah, 0xf9; call qword ptr [rax]; 
0x00000000004a39f3: push qword ptr [rax]; mov al, 0xfc; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax]; 
0x0000000000494137: push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000493f63: push qword ptr [rax]; outsd dx, dword ptr [rsi]; stc; jmp qword ptr [rax]; 
0x0000000000497303: push qword ptr [rax]; sub al, 0xfc; push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x0000000000493e87: push qword ptr [rax]; sub cl, bh; call qword ptr [rax + 0x29]; 
0x00000000004940ab: push qword ptr [rax]; xchg edi, eax; stc; dec dword ptr [rax]; mov dl, 0xf9; call rax; 
0x0000000000494b67: push qword ptr [rax]; xor al, 0xfa; inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x00000000004950ef: push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x0000000000493ea7: push qword ptr [rax]; xor ecx, edi; call rax; 
0x0000000000493ea7: push qword ptr [rax]; xor ecx, edi; call rax; and cl, bh; jmp rax; 
0x000000000049501f: push qword ptr [rax]; clc; cli; call qword ptr [rax - 8]; 
0x0000000000494f97: push qword ptr [rax]; cli; inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; 
0x0000000000495063: push qword ptr [rax]; cli; cli; call qword ptr [rax - 6]; 
0x0000000000495043: push qword ptr [rax]; stc; cli; call qword ptr [rax - 7]; 
0x000000000049574b: push qword ptr [rax]; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004464d8: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x00000000004b3e3f: push qword ptr [rbp + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x35b0303; ret; 
0x000000000042bee9: push qword ptr [rbp + 4]; vzeroupper; ret; 
0x00000000004718d8: push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x000000000041712d: push qword ptr [rbp + rax - 0xa]; ret 0x7401; 
0x00000000004718fe: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x00000000004737a3: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000417596: push qword ptr [rbp + rcx - 0x18]; ret 0x8a; 
0x0000000000458749: push qword ptr [rbp + rcx - 0x18]; xchg r13, rax; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000495777: push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x0000000000490ce9: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x0000000000417960: push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004494dc: push qword ptr [rbx + 1]; ret; 
0x00000000004b3e0b: push qword ptr [rbx + 4]; add byte ptr [rax], al; add byte ptr [rsi + rcx + 0x38], al; add dword ptr [rdi], 0x48; or eax, 0x34b0303; ret; 
0x00000000004178c4: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000471b55: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000493fdf: push qword ptr [rcx + 0x41fff995]; xchg esi, eax; stc; jmp rcx; 
0x00000000004945cb: push qword ptr [rcx + rdx]; cli; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x000000000045eb54: push qword ptr [rcx]; fcmovnb st(0), st(6); test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x000000000047a16f: push qword ptr [rcx]; fucomi st(3); ret 0x1f0f; 
0x000000000041dc06: push qword ptr [rcx]; mul byte ptr [rdi + rax*8]; or al, 0; add byte ptr [rax], al; mov rax, rsi; ret; 
0x000000000041570f: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000454f83: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000044f7fd: push qword ptr [rcx]; ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg esp, eax; ret 0xd5e9; 
0x0000000000448fab: push qword ptr [rdi + 0x22]; hlt; mov edi, edx; mov eax, r8d; syscall; 
0x0000000000475484: push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x0000000000494bf7: push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x0000000000494503: push qword ptr [rdx]; adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004949fb: push qword ptr [rdx]; cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000049496f: push qword ptr [rsi + 0x26fffa33]; cmp bh, dl; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x000000000049447f: push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494977: push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x000000000048aee2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e082: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eee2: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f952: push qword ptr [rsi + rax + 0x40]; cmp bh, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x0000000000494997: push qword ptr [rsi]; cli; inc esi; xor eax, 0x3556fffa; cli; jmp rsi; 
0x0000000000411396: push qword ptr [rsp + rcx - 0x18]; ret 0xec; 
0x0000000000494ae3: push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x000000000045194c: push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x00000000004753ab: push r12; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000452b15: push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e59: push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004174fe: push r8; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416562: push r8; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000040aaf4: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000407665: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x0000000000418311: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000044b009: push rax; adc byte ptr [rcx - 0x75], cl; push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041c39d: push rax; adc dh, dh; ret 0xf0f; 
0x0000000000494638: push rax; adc edi, edx; jmp rax; 
0x0000000000471a94: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x48], 0; pop rbx; ret; 
0x00000000004174ff: push rax; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rcx + 0x130], r8; mov qword ptr [rdi + 0xa8], 0; ret; 
0x0000000000416563: push rax; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000045e12f: push rax; add dword ptr [rax - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000049469b: push rax; add eax, 0x570fffa; cli; jmp rax; 
0x000000000046ea83: push rax; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x000000000046e9c9: push rax; add eax, dword ptr [rax]; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000494867: push rax; add edi, edx; jmp qword ptr [rax + 3]; 
0x00000000004948ac: push rax; add edi, edx; push rax; in eax, 0xf9; call qword ptr [rax]; 
0x0000000000400f30: push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000493e7f: push rax; and eax, 0x2710fff9; stc; push qword ptr [rax]; sub cl, bh; call qword ptr [rax + 0x29]; 
0x0000000000467e0a: push rax; call 0xffffffff89547e0f; ret 0x894c; 
0x000000000044e7d8: push rax; call rbx; 
0x0000000000470504: push rax; cmp byte ptr [rax + 1], cl; ret; 
0x000000000049431b: push rax; fdivp st(1); call rax; 
0x0000000000495017: push rax; idiv edx; call qword ptr [rax]; 
0x0000000000494ff8: push rax; idiv edx; jmp qword ptr [rax - 9]; 
0x00000000004948af: push rax; in eax, 0xf9; call qword ptr [rax]; 
0x000000000048aeca: push rax; je 0x8aeeb; cmp dil, 0x30; jne 0x8af08; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000004b336c: push rax; jl 0xb336f; add byte ptr [rax + 0x2b], al; cld; call qword ptr [rax + 5]; 
0x000000000044a20c: push rax; jo 0x4a20c; dec dword ptr [rax - 0x77]; ret; 
0x0000000000471f29: push rax; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004b3bc0: push rax; mov bh, 0xfc; jmp qword ptr [rdx]; 
0x0000000000494134: push rax; mov bl, 0xf9; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000450a81: push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004940e8: push rax; mov ebp, 0xbf50fff9; stc; jmp rax; 
0x00000000004940e4: push rax; mov ebx, 0xbd50fff9; stc; call qword ptr [rax - 0x41]; stc; jmp rax; 
0x0000000000494184: push rax; mov edx, 0xbc50fff9; stc; call qword ptr [rax - 0x42]; stc; jmp rax; 
0x0000000000494188: push rax; mov esp, 0xbe50fff9; stc; jmp rax; 
0x000000000045147d: push rax; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000489f86: push rax; or byte ptr [rax + 3], cl; push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x0000000000419092: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000470a13: push rax; or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x77], cl; jo 0x70a2c; mov qword ptr [rax + 0x40], rcx; ret; 
0x000000000041a3ba: push rax; or byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x0000000000418301: push rax; or byte ptr [rbp + 0xb], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000044b00d: push rax; or byte ptr [rbx + 0x94801e2], al; ret 0x8949; 
0x000000000041cd95: push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000044ce1b: push rax; or dh, dh; ret 0x8902; 
0x000000000041dad2: push rax; or dh, dh; ret 0xf02; 
0x0000000000494630: push rax; or eax, 0x13c0fffa; cli; call qword ptr [rax + 0x13]; 
0x0000000000494630: push rax; or eax, 0x13c0fffa; cli; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000488505: push rax; pop rbx; ret; 
0x00000000004b5170: push rax; pop rcx; std; call qword ptr [rdx]; 
0x00000000004718d4: push rax; push 0x74fff883; add eax, 0x5c415d5b; ret; 
0x000000000045194b: push rax; push r12; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x0000000000452b14: push rax; push r13; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e58: push rax; push r13; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x00000000004b0a6c: push rax; push rbx; add byte ptr [rax], al; sar dl, 0xfd; jmp qword ptr [rdx]; 
0x0000000000450a83: push rax; push rsp; ret; 
0x0000000000418306: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000471a19: push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004719d1: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000412853: push rax; sub al, byte ptr [eax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000471a15: push rax; sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004af4a0: push rax; xchg esi, eax; clc; call qword ptr [rax]; 
0x0000000000494b57: push rax; xor eax, 0x3580fffa; cli; call qword ptr [rax]; 
0x000000000049503b: push rax; clc; cli; call qword ptr [rax]; 
0x0000000000494e68: push rax; cli; jmp qword ptr [rax + 0x45]; 
0x0000000000494fa0: push rax; cli; jmp qword ptr [rax - 0xe]; 
0x0000000000494958: push rax; cli; jmp rax; 
0x0000000000493d88: push rax; cmc; clc; jmp qword ptr [rax]; 
0x0000000000494f87: push rax; int1; cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x00000000004b2100: push rax; iretd; sti; jmp qword ptr [rbx + 8]; 
0x0000000000493f8b: push rax; nop; stc; call qword ptr [rsi]; 
0x00000000004943f3: push rax; ret; 
0x0000000000493e9f: push rax; stc; call qword ptr [rax]; 
0x0000000000493eef: push rax; stc; jmp qword ptr [rax + 0x4d]; 
0x000000000049505b: push rax; stc; cli; call qword ptr [rax]; 
0x0000000000489f8a: push rbp; add bl, ch; add eax, 0x1489066; ret 0xb70f; 
0x000000000048ca32: push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x00000000004b0c29: push rbp; add byte ptr [rax], al; mov ah, 3; cli; jmp qword ptr [rdx]; 
0x000000000048cea7: push rbp; add byte ptr [rsi + 0xa], bh; mov edi, 1; call rax; 
0x000000000047fad8: push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000041039d: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x0000000000478adf: push rbp; jns 0x78ada; dec dword ptr [rax - 0x77]; ret; 
0x0000000000452b16: push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e5a: push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000410684: push rbp; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000048157c: push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x00000000004753ad: push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x000000000041795c: push rbp; xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000459e47: push rbp; ret; 
0x0000000000410946: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000040107f: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x000000000047f94f: push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x00000000004b0a6d: push rbx; add byte ptr [rax], al; sar dl, 0xfd; jmp qword ptr [rdx]; 
0x0000000000413488: push rbx; and byte ptr [rax - 0x77], cl; push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdac7e; jmp qword ptr [rsi + 0x2e]; 
0x0000000000412da8: push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x0000000000430719: push rbx; cmp eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004476c5: push rbx; jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000471912: push rbx; je 0x71970; pop rbp; pop r12; ret; 
0x000000000047199e: push rbx; je 0x719fc; pop rbp; pop r12; ret; 
0x000000000042c419: push rbx; jnp 0x2c422; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000045a560: push rbx; mov rax, qword ptr [rdi + 0x20]; mov rbx, rdi; test rax, rax; je 0x5a56f; call rax; 
0x00000000004753ae: push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000412da4: push rbx; or byte ptr [rax + 0x2b], cl; push rbx; cmp byte ptr [rax + 0x39], cl; ret 0x2175; 
0x00000000004132ac: push rbx; sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x00000000004718c3: push rbx; test byte ptr [rdi], 2; mov rbx, rdi; jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000046eefa: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000041348c: push rbx; xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdac7e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004245e9: push rbx; xor byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x0000000000494e89: push rbx; cli; jmp rax; 
0x000000000044b21f: push rbx; ret; 
0x000000000041e9b2: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x1f77; 
0x000000000041aceb: push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000041b067: push rcx; adc byte ptr [rax + 0x39], cl; ret 0xb277; 
0x000000000044b6bb: push rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000041cd8b: push rcx; add eax, 0x8b4d0000; or byte ptr [rbp - 0x75], cl; push rax; or byte ptr [rcx - 0xa], al; ret 0xf04; 
0x00000000004a7a05: push rcx; call qword ptr [rsi]; 
0x000000000045e646: push rcx; cmp byte ptr [rax + 0x39], cl; ret; 
0x00000000004955d8: push rcx; cmp eax, 0x3d51fffb; sti; call qword ptr [rdx]; 
0x000000000049579c: push rcx; cmp eax, 0x3d64fffb; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004957ec: push rcx; cmp eax, 0x3d74fffb; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004955fc: push rcx; cmp eax, 0x3d84fffb; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495668: push rcx; cmp eax, 0x3da2fffb; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495848: push rcx; cmp eax, 0x3e1cfffb; sti; call qword ptr [rcx + 0x3d]; 
0x000000000049593c: push rcx; cmp eax, 0x3f14fffb; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004725e3: push rcx; fdivp st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000004524eb: push rcx; idiv dl; inc dword ptr [rcx - 0x77]; ret; 
0x000000000043866f: push rcx; jl 0x386ba; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438676: push rcx; jl 0x386c1; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043867d: push rcx; jl 0x386c8; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004387d6: push rcx; jl 0x38821; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387dd: push rcx; jl 0x38828; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387e4: push rcx; jl 0x3882f; adc dword ptr [rcx + 7], edi; ret; 
0x000000000040d5a1: push rcx; or byte ptr [rax], al; movzx edi, dl; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x0000000000479101: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0x1475; 
0x00000000004790d3: push rcx; or byte ptr [rcx + 0x33], cl; add dword ptr [rax + 9], ecx; ret 0xe75; 
0x00000000004156ab: push rcx; ret 0xffff; 
0x00000000004197fd: push rcx; sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000494e85: push rcx; cli; call rax; 
0x0000000000494e85: push rcx; cli; call rax; push rbx; cli; jmp rax; 
0x0000000000493f01: push rcx; stc; jmp qword ptr [rax]; 
0x000000000044477a: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000435389: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x00000000004b0e85: push rdi; add byte ptr [rax], al; pop rax; and dl, bh; call qword ptr [rdi]; 
0x0000000000478044: push rdi; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000446c22: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x46c70; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044482c: push rdi; add eax, 0xc478d48; ret; 
0x0000000000473ad8: push rdi; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7d8: push rdi; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000045dd0e: push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x000000000045dd1f: push rdi; and byte ptr [rcx + 0x2b], cl; push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000042f142: push rdi; call 0xfffffffff0627a94; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f180: push rdi; call 0xfffffffff0627ad2; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f1b8: push rdi; call 0xfffffffff0627b0a; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f1f6: push rdi; call 0xfffffffff0627b48; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f22e: push rdi; call 0xfffffffff0627b80; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f256: push rdi; call 0xfffffffff0627ba8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f27e: push rdi; call 0xfffffffff0627bd0; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431b12: push rdi; call 0xfffffffff062a464; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431b50: push rdi; call 0xfffffffff062a4a2; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431b88: push rdi; call 0xfffffffff062a4da; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000431bc6: push rdi; call 0xfffffffff062a518; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431bfe: push rdi; call 0xfffffffff062a550; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c26: push rdi; call 0xfffffffff062a578; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431c4e: push rdi; call 0xfffffffff062a5a0; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000046fd35: push rdi; cmp byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000430915: push rdi; cmp dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d1de: push rdi; fidiv dword ptr [rdx - 0x10f09926]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cfde: push rdi; fnsave dword ptr [rdx - 0x10f09923]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004494e6: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000449576: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000449826: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000042f895: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f6a5: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042c615: push rdi; jns 0x2c61e; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x000000000042fe66: push rdi; loope 0x2feb5; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042feae: push rdi; loope 0x2fefd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042feec: push rdi; loope 0x2ff3b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff24: push rdi; loope 0x2ff73; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff62: push rdi; loope 0x2ffb1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ff9a: push rdi; loope 0x2ffe9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffc2: push rdi; loope 0x30011; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432836: push rdi; loope 0x32885; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043287e: push rdi; loope 0x328cd; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004328bc: push rdi; loope 0x3290b; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004328f4: push rdi; loope 0x32943; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432932: push rdi; loope 0x32981; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043296a: push rdi; loope 0x329b9; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000432992: push rdi; loope 0x329e1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d2a8: push rdi; mov eax, 0xf66b8b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d128: push rdi; mov ebx, 0xf66bbb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d228: push rdi; mov ecx, 0xf66b9b2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d1a8: push rdi; mov edx, 0xf66bab2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000416440: push rdi; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000416474: push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000434aca: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000411800: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 0x10]; lea r8, [rsp + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004107e5: push rdi; mov rdi, rbp; push qword ptr [rax + 0x38]; mov rcx, qword ptr [rbx + 8]; mov r9, qword ptr [rax + 0x10]; call qword ptr [rbp + 0x18]; 
0x00000000004843fa: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000048821a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000484401: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x000000000041a9b6: push rdi; or dh, dh; ret 0xf02; 
0x0000000000444a10: push rdi; or eax, 0x1c478d48; ret; 
0x000000000042f4c5: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f2f5: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f3f1: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042f33d: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042d61e: push rdi; ret 0xff3; 
0x000000000045dd23: push rdi; sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000419120: push rdi; sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000416438: push rdi; sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x00000000004111d8: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000047330b: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000042b338: push rdi; xor eax, eax; ret; 
0x000000000042f188: push rdi; clc; ret; 
0x000000000042f300: push rdi; cld; ret; 
0x0000000000494e91: push rdi; cli; inc dword ptr [rax]; pop rdx; cli; call qword ptr [rax]; 
0x000000000042fe27: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434c69: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434be9: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000434a3a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004235e5: push rdi; ret; 
0x00000000004af679: push rdi; stc; jmp qword ptr [rbx + 0x17]; 
0x0000000000493f11: push rdi; stc; jmp rax; 
0x0000000000430027: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f84a: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x000000000042fc27: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000049450c: push rdx; adc edx, edi; jmp rdx; 
0x0000000000494a04: push rdx; cmp dl, bh; jmp rdx; 
0x000000000049569f: push rdx; cmp eax, 0x3da2fffb; sti; dec ebp; sti; call qword ptr [rcx + 0x3d]; 
0x000000000042477a: push rdx; insb byte ptr [rdi], dx; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x000000000044bd41: push rdx; mov dword ptr [rdi], 0; mov esi, 0x81; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000431ab9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x627a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431819: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62a49]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431579: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62ce9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431429: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62e39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312d9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x62f89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431189: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x630d9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431039: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63229]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ee9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63379]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63619]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430af9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63769]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309a9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x638b9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430859: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63a09]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0e9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x64fb9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef99: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65109]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee49: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65259]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ecf9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x653a9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eba9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x654f9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea59: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65649]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e909: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65799]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7b9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x658e9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e669: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65a39]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e519: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65b89]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3c9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65cd9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e279: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65e29]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e129: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65f79]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfd9: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x660c9]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de89: push rdx; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x66219]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000450a7d: push rdx; sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x000000000048c11a: push rdx; sbb edi, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000494bf3: push rdx; xor dl, bh; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x0000000000444a67: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004443b7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000444316: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x44326; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000444336: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x44346; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000042c264: push rsi; adc byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000446d69: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x46db7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000435382: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004b0df1: push rsi; add byte ptr [rax], al; or al, 0x17; cli; call rcx; 
0x0000000000435621: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000435691: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000446d62: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x46db0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000435312: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000444825: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x00000000004441c5: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000446dff: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x00000000004355b1: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000444793: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x0000000000444163: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000469228: push rsi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff730; sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000042c279: push rsi; and byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042ce0e: push rsi; fbstp tbyte ptr [rdx - 0x10f09921]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cede: push rsi; fidiv word ptr [rdx - 0x10f09922]; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004a8ffd: push rsi; jnp 0xa9016; mov dl, 0x9f; sub edi, esi; int 0x6b; ret; 
0x000000000042cdd8: push rsi; mov edi, 0xf66bfb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042cea8: push rsi; mov esi, 0xf66beb2; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434b52: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000434ac2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000444a07: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000444357: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004a8780: push rsi; pop rdx; je 0xa8748; ret 0xacfc; 
0x0000000000444397: push rsi; psllq mm1, qword ptr [rdi]; jg 0x443a4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000444a47: push rsi; psllq mm1, qword ptr [rdi]; jg 0x44a54; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000469241: push rsi; sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x000000000045e133: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000040389c: push rsi; sub eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000445fe6: push rsi; sub eax, edx; ret; 
0x0000000000434d62: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000043ec26: push rsi; xchg edi, eax; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042c28e: push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042f296: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fbea: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fdea: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffea: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f27a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc06: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fe06: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430006: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f2b2: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fa21: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f459: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f639: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f819: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9f9: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f655: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f835: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa15: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f475: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000446bfa: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042fe21: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004a9320: push rsi; cli; push 0x6e; ja 0xa92a9; ret 0x48f; 
0x0000000000434c62: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000446016: push rsi; cmc; sub eax, edx; ret; 
0x0000000000434be2: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000446006: push rsi; hlt; sub eax, edx; ret; 
0x0000000000434a32: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000445fd6: push rsi; int1; sub eax, edx; ret; 
0x00000000004a66c6: push rsi; ret; 
0x0000000000430021: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000493f0d: push rsi; stc; push qword ptr [rax + 0x57]; stc; jmp rax; 
0x000000000042f842: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000446c01: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042fc21: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004945d4: push rsp; adc dl, bh; jmp rsp; 
0x0000000000475831: push rsp; add byte ptr [rax], al; mov eax, ecx; syscall; 
0x000000000048255a: push rsp; and al, 0x10; call rdx; 
0x000000000041ca08: push rsp; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x000000000040df62: push rsp; and al, 0x10; mov rsi, qword ptr [r15]; mov rdi, qword ptr [r13]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000474229: push rsp; and al, 0x10; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x000000000040dff2: push rsp; and al, 0x10; mov rsi, r15; mov rdi, r13; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004499ff: push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004756c6: push rsp; and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000041c941: push rsp; and al, 0x28; mov qword ptr [rsp + 0x20], rsi; mov qword ptr [rsp + 0x10], r11; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000481b23: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481ab1: push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x000000000045118c: push rsp; and al, 0x48; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000449b02: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000413bc4: push rsp; and al, 8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004a6465: push rsp; jmp qword ptr [rbx - 0x40]; 
0x00000000004adc1c: push rsp; mov ch, 0xf6; call qword ptr [rsi]; 
0x000000000045194d: push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000040d2bb: push rsp; or byte ptr [rax], al; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x00000000004608c8: push rsp; pop rdi; and eax, 0x48b4800; clc; jmp rax; 
0x0000000000495ea7: push rsp; push 0x68f4fffb; sti; jmp qword ptr [rax + 0x6a]; 
0x0000000000495eb3: push rsp; push 0x6a38fffb; sti; call qword ptr [rax]; 
0x0000000000495e7b: push rsp; push 0x6b90fffb; sti; push qword ptr [rax + 0x6b]; sti; call qword ptr [rax + 0x6b]; 
0x0000000000495e63: push rsp; push 0x6bb0fffb; sti; jmp rax; 
0x00000000004753ac: push rsp; push rbp; push rbx; mov rbx, rsi; sub rsp, 8; syscall; 
0x0000000000488ffc: push rsp; ret 0x4808; 
0x0000000000481481: push rsp; ret 0xeb30; 
0x00000000004ab791: push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x0000000000450a84: push rsp; ret; 
0x00000000004a8f4a: push rsp; syscall; 
0x0000000000452b13: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x20]; mov rsi, qword ptr [rsp + 0x40]; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e57: rcl byte ptr [rax + 0x41], cl; push rbp; mov r9, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045194a: rcl byte ptr [rax + 0x41], cl; push rsp; mov r9, qword ptr [rsp + 0x40]; mov rsi, qword ptr [rsp + 0x38]; mov rdi, qword ptr [rsp + 0x30]; call rbx; 
0x000000000046033a: rcl byte ptr [rax + rax]; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000494f04: rcl byte ptr [rax - 0x6d8f0006]; cli; call qword ptr [rax]; 
0x00000000004b4cec: rcl byte ptr [rbp + 0x2fb00000]; std; jmp qword ptr [rbp]; 
0x0000000000494e88: rcl byte ptr [rbx - 6]; jmp rax; 
0x0000000000494634: rcl byte ptr [rbx], 0xfa; call qword ptr [rax + 0x13]; 
0x0000000000494634: rcl byte ptr [rbx], 0xfa; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000494e84: rcl byte ptr [rcx - 6], 0xff; rcl byte ptr [rbx - 6]; jmp rax; 
0x0000000000494440: rcl byte ptr [rdx]; cli; jmp qword ptr [rax + 0x12]; 
0x0000000000432c9a: rcl byte ptr [rip + 0x63490006], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040389b: rcl byte ptr [rsi + 0x2b], 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004ab65c: rcl dword ptr [rax], 0xfe; call rsp; 
0x00000000004ab65c: rcl dword ptr [rax], 0xfe; call rsp; adc dh, bh; jmp rdi; 
0x00000000004a877f: rcl dword ptr [rsi + 0x5a], cl; je 0xa8748; ret 0xacfc; 
0x0000000000460e5c: rcr byte ptr [rax + 0x25], 0; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x00000000004730f3: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000405e20: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000410591: rcr byte ptr [rbp + 0x41], 1; pop rsp; pop r13; ret; 
0x0000000000465f0f: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000484407: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x000000000044fa12: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x000000000041474c: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000040ece6: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000041063a: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; ret; 
0x000000000040ffd2: rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000493e60: rcr byte ptr [rcx], 0xf9; inc dword ptr [rax]; sbb edi, ecx; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x00000000004a8b9d: rcr byte ptr [rdi + 0x6d], cl; test eax, 0x7d4c8c5d; ret 0xd8f; 
0x00000000004b56dc: rcr byte ptr [rdi - 0x7af00000], 0xfd; call qword ptr [rbx]; 
0x00000000004b51ec: rcr byte ptr [rdx + 0x5d300000], 1; std; jmp qword ptr [rcx + 9]; 
0x00000000004826b9: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000043ddcc: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fa19: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f239: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f629: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee49: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e92c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e10c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043d8ec: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043efe8: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e44c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dc2c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d40c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e5ec: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f4d9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ecf9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fe09: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d74c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d882: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e582: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e0a2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f3da: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fd0a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e8c2: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dbc2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d6e2: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e3e2: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043f52a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ed4a: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000446ea4: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000446e96: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447bca: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000041ec91: rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004006c7: ret 0; 
0x000000000049f200: ret 0x10; 
0x000000000047b56a: ret 0x101; 
0x00000000004843dc: ret 0x114d; 
0x0000000000457ad4: ret 0x1176; 
0x000000000047fadc: ret 0x1272; 
0x000000000047c673: ret 0x13e9; 
0x000000000048aba1: ret 0x145; 
0x0000000000483886: ret 0x1474; 
0x0000000000479108: ret 0x1475; 
0x00000000004758e1: ret 0x1477; 
0x0000000000445f78: ret 0x148; 
0x0000000000404814: ret 0x149; 
0x0000000000438a3f: ret 0x14d; 
0x000000000040b09a: ret 0x14f; 
0x000000000040a29a: ret 0x15d; 
0x000000000046c191: ret 0x1674; 
0x00000000004493de: ret 0x16e9; 
0x000000000042716a: ret 0x17; 
0x000000000042b816: ret 0x1776; 
0x000000000040ab02: ret 0x18; 
0x000000000043897c: ret 0x180f; 
0x000000000042b3a5: ret 0x1876; 
0x0000000000406b9a: ret 0x194; 
0x0000000000457acb: ret 0x1a72; 
0x00000000004a90fa: ret 0x1ad4; 
0x0000000000407cc2: ret 0x1b; 
0x00000000004a788d: ret 0x1b49; 
0x000000000040449a: ret 0x1bb; 
0x000000000048ec6f: ret 0x1be8; 
0x000000000042463a: ret 0x1c6; 
0x000000000045cc49: ret 0x1ce9; 
0x00000000004a0ed0: ret 0x1d4; 
0x00000000004a1668: ret 0x1d5; 
0x0000000000400c41: ret 0x1d89; 
0x00000000004661ba: ret 0x1e4; 
0x000000000040eba2: ret 0x1f0f; 
0x000000000041e9b6: ret 0x1f77; 
0x0000000000459ebd: ret 0x1fe9; 
0x000000000045ab17: ret 0x200; 
0x0000000000477c8b: ret 0x2041; 
0x0000000000449e9c: ret 0x2044; 
0x0000000000461be7: ret 0x20be; 
0x000000000048ab0b: ret 0x2148; 
0x000000000041381d: ret 0x214c; 
0x0000000000412dac: ret 0x2175; 
0x0000000000490674: ret 0x22; 
0x000000000047e878: ret 0x2275; 
0x0000000000440ce8: ret 0x2288; 
0x000000000042474a: ret 0x22a; 
0x000000000042d782: ret 0x2373; 
0x000000000049fed8: ret 0x24; 
0x000000000047ad92: ret 0x241a; 
0x00000000004765f2: ret 0x2424; 
0x000000000047263a: ret 0x2459; 
0x0000000000476591: ret 0x2462; 
0x000000000044a1c4: ret 0x24e9; 
0x000000000045cb39: ret 0x25; 
0x0000000000415f5d: ret 0x2501; 
0x0000000000467294: ret 0x2504; 
0x0000000000423663: ret 0x2575; 
0x000000000048c5a1: ret 0x25e9; 
0x000000000044c7f9: ret 0x26; 
0x0000000000457aaa: ret 0x2643; 
0x000000000044ca72: ret 0x26db; 
0x000000000044b6ea: ret 0x2706; 
0x00000000004737e6: ret 0x2774; 
0x000000000042ef56: ret 0x280f; 
0x000000000042b395: ret 0x2876; 
0x000000000047e8f7: ret 0x28f5; 
0x000000000041df4c: ret 0x29; 
0x00000000004633ee: ret 0x290f; 
0x0000000000411567: ret 0x2948; 
0x000000000046632a: ret 0x2949; 
0x000000000040f0b0: ret 0x294c; 
0x000000000041308d: ret 0x294d; 
0x000000000042442a: ret 0x2979; 
0x000000000041e81a: ret 0x29b0; 
0x000000000046dcf9: ret 0x29e8; 
0x0000000000410510: ret 0x2a; 
0x0000000000419f9a: ret 0x2a1d; 
0x0000000000419692: ret 0x2a26; 
0x0000000000415b4a: ret 0x2a61; 
0x000000000042114a: ret 0x2ab; 
0x000000000040e92a: ret 0x2ade; 
0x000000000041094a: ret 0x2b48; 
0x0000000000422d8b: ret 0x2b74; 
0x000000000041ecd2: ret 0x2b75; 
0x0000000000448042: ret 0x2b77; 
0x00000000004009b5: ret 0x2b8; 
0x000000000048c58f: ret 0x2be9; 
0x000000000041f51e: ret 0x2c75; 
0x000000000041e34a: ret 0x2d9; 
0x000000000046f105: ret 0x2e66; 
0x000000000044c11e: ret 0x2f75; 
0x0000000000467e55: ret 0x30be; 
0x00000000004a03c8: ret 0x33; 
0x0000000000452934: ret 0x349; 
0x000000000048a940: ret 0x3575; 
0x000000000047b23a: ret 0x3774; 
0x000000000042b7f6: ret 0x3776; 
0x00000000004a89da: ret 0x3827; 
0x000000000046ff8e: ret 0x3873; 
0x000000000042b385: ret 0x3876; 
0x0000000000416a0b: ret 0x389; 
0x00000000004a7066: ret 0x38ae; 
0x000000000048e252: ret 0x38e8; 
0x0000000000489518: ret 0x3901; 
0x0000000000480ffd: ret 0x3934; 
0x000000000046d74f: ret 0x3941; 
0x00000000004111f1: ret 0x3948; 
0x0000000000411fad: ret 0x3949; 
0x000000000041edfc: ret 0x394c; 
0x0000000000468dfd: ret 0x394d; 
0x00000000004465f2: ret 0x3a01; 
0x000000000042d76b: ret 0x3a73; 
0x0000000000488063: ret 0x3a83; 
0x0000000000447011: ret 0x3b48; 
0x0000000000449b7f: ret 0x3b8; 
0x0000000000414009: ret 0x3c75; 
0x0000000000480fbd: ret 0x3d; 
0x00000000004767e8: ret 0x3d01; 
0x000000000040e94a: ret 0x3d3; 
0x000000000047f268: ret 0x3d73; 
0x00000000004205d1: ret 0x3d83; 
0x000000000041c92f: ret 0x3de9; 
0x000000000047b09a: ret 0x3e80; 
0x000000000045a2cb: ret 0x4002; 
0x00000000004569fa: ret 0x403; 
0x000000000040d28d: ret 0x4074; 
0x0000000000473dd1: ret 0x408d; 
0x000000000044c36a: ret 0x4101; 
0x00000000004604b8: ret 0x4108; 
0x0000000000460c6d: ret 0x4110; 
0x0000000000481496: ret 0x4118; 
0x0000000000481037: ret 0x4134; 
0x00000000004530e7: ret 0x415f; 
0x0000000000450b4e: ret 0x41c3; 
0x0000000000425dea: ret 0x4266; 
0x0000000000453e5a: ret 0x431; 
0x0000000000470a63: ret 0x4389; 
0x0000000000405df1: ret 0x4401; 
0x00000000004686ab: ret 0x4404; 
0x0000000000481816: ret 0x4418; 
0x000000000041a30b: ret 0x4466; 
0x000000000041dca3: ret 0x4473; 
0x00000000004520d0: ret 0x44a; 
0x00000000004a7b64: ret 0x474c; 
0x000000000040e0d4: ret 0x4801; 
0x00000000004121a6: ret 0x4803; 
0x0000000000422671: ret 0x4804; 
0x0000000000440c73: ret 0x4808; 
0x0000000000402fb6: ret 0x480a; 
0x000000000041c348: ret 0x4810; 
0x000000000045887c: ret 0x4811; 
0x000000000045dbb7: ret 0x481e; 
0x000000000045dbd7: ret 0x4820; 
0x000000000044e2fe: ret 0x4830; 
0x0000000000425cf6: ret 0x4840; 
0x000000000044db99: ret 0x486; 
0x0000000000440928: ret 0x48c3; 
0x0000000000418d23: ret 0x48e9; 
0x00000000004a9326: ret 0x48f; 
0x0000000000405d8c: ret 0x4901; 
0x000000000045558b: ret 0x4902; 
0x0000000000419362: ret 0x4908; 
0x000000000042a2bc: ret 0x4910; 
0x000000000045a719: ret 0x4c01; 
0x000000000041e64a: ret 0x4c07; 
0x000000000045d476: ret 0x4c40; 
0x000000000046616e: ret 0x4ce8; 
0x000000000041d306: ret 0x4d01; 
0x000000000045bf38: ret 0x4d10; 
0x00000000004026bf: ret 0x4de8; 
0x00000000004a8d87: ret 0x4e27; 
0x00000000004016ee: ret 0x4f76; 
0x000000000044ee8f: ret 0x5089; 
0x000000000044bf87: ret 0x508b; 
0x000000000042d754: ret 0x5173; 
0x0000000000449dd7: ret 0x5488; 
0x00000000004a6fec: ret 0x5508; 
0x0000000000471b2e: ret 0x5590; 
0x000000000042b7d6: ret 0x5776; 
0x00000000004a92b8: ret 0x5803; 
0x00000000004555f1: ret 0x5841; 
0x00000000004879d5: ret 0x5876; 
0x000000000040e6e3: ret 0x589; 
0x00000000004a6cc0: ret 0x591c; 
0x00000000004a7a27: ret 0x5ae4; 
0x000000000042432e: ret 0x5ae9; 
0x00000000004557d9: ret 0x5be9; 
0x000000000040f3ea: ret 0x5d5b; 
0x00000000004a9752: ret 0x62c1; 
0x000000000047c4e0: ret 0x6349; 
0x00000000004851f4: ret 0x637f; 
0x0000000000458853: ret 0x6411; 
0x0000000000423bf5: ret 0x65e8; 
0x000000000045b431: ret 0x6601; 
0x000000000042b311: ret 0x6620; 
0x00000000004237d8: ret 0x66c3; 
0x000000000047faee: ret 0x674; 
0x000000000042b7c6: ret 0x6776; 
0x00000000004a6cdf: ret 0x67b2; 
0x0000000000416fb5: ret 0x6874; 
0x000000000044948a: ret 0x6ae9; 
0x00000000004a98e1: ret 0x6f9; 
0x0000000000420f62: ret 0x72b; 
0x000000000045ea2a: ret 0x73; 
0x0000000000417131: ret 0x7401; 
0x000000000042263a: ret 0x7402; 
0x000000000047c54a: ret 0x7403; 
0x000000000044a501: ret 0x7404; 
0x0000000000471902: ret 0x7408; 
0x00000000004128bd: ret 0x7420; 
0x0000000000464344: ret 0x7450; 
0x0000000000480cfa: ret 0x7472; 
0x0000000000444b59: ret 0x7501; 
0x0000000000444b66: ret 0x7502; 
0x0000000000444b73: ret 0x7504; 
0x000000000041e95d: ret 0x7508; 
0x0000000000444b2b: ret 0x7510; 
0x0000000000444b38: ret 0x7520; 
0x000000000042465e: ret 0x7540; 
0x0000000000475840: ret 0x7577; 
0x000000000042c642: ret 0x7677; 
0x0000000000482972: ret 0x777; 
0x0000000000484236: ret 0x77f; 
0x0000000000402e11: ret 0x7ce9; 
0x000000000042b2b1: ret 0x7e20; 
0x000000000042b72c: ret 0x7e40; 
0x000000000042499c: ret 0x7f10; 
0x000000000046d958: ret 0x7f3c; 
0x0000000000432f1e: ret 0x80; 
0x0000000000425b79: ret 0x8000; 
0x000000000048df12: ret 0x8001; 
0x0000000000476c8e: ret 0x8116; 
0x000000000045fc8b: ret 0x8148; 
0x000000000048e468: ret 0x8166; 
0x000000000041d030: ret 0x820f; 
0x0000000000454e13: ret 0x8301; 
0x000000000047d267: ret 0x8303; 
0x000000000042c210: ret 0x830f; 
0x000000000045da84: ret 0x8341; 
0x0000000000402c3b: ret 0x8348; 
0x0000000000446a70: ret 0x8349; 
0x000000000047f0df: ret 0x8364; 
0x0000000000471246: ret 0x840; 
0x0000000000475c39: ret 0x8401; 
0x0000000000411fb5: ret 0x840f; 
0x0000000000453b60: ret 0x841; 
0x000000000048b1be: ret 0x8440; 
0x0000000000479c87: ret 0x848b; 
0x000000000046eda9: ret 0x8502; 
0x0000000000413142: ret 0x850f; 
0x00000000004581b3: ret 0x8511; 
0x000000000044a832: ret 0x8545; 
0x0000000000402b92: ret 0x8548; 
0x0000000000476dac: ret 0x8549; 
0x000000000042368a: ret 0x854d; 
0x0000000000405c61: ret 0x8575; 
0x0000000000401422: ret 0x860f; 
0x000000000041acef: ret 0x870f; 
0x00000000004a65fe: ret 0x871e; 
0x000000000046d95f: ret 0x875; 
0x000000000042b3b5: ret 0x876; 
0x0000000000402cbc: ret 0x8801; 
0x0000000000451e5d: ret 0x8804; 
0x0000000000479913: ret 0x882e; 
0x000000000045b482: ret 0x8841; 
0x000000000047e1ce: ret 0x8844; 
0x000000000045a9aa: ret 0x88e8; 
0x00000000004024aa: ret 0x8901; 
0x000000000044ce1e: ret 0x8902; 
0x000000000041243a: ret 0x8908; 
0x000000000045da76: ret 0x8941; 
0x000000000041f5bf: ret 0x8944; 
0x0000000000403e7f: ret 0x8948; 
0x000000000041366a: ret 0x8949; 
0x0000000000410c61: ret 0x894c; 
0x00000000004833eb: ret 0x894e; 
0x000000000041759a: ret 0x8a; 
0x0000000000487c00: ret 0x8b; 
0x0000000000450729: ret 0x8b01; 
0x000000000046f3fa: ret 0x8b04; 
0x00000000004759d3: ret 0x8b05; 
0x000000000046f2ab: ret 0x8b08; 
0x00000000004a8e2e: ret 0x8b36; 
0x000000000041d511: ret 0x8b41; 
0x000000000046d98b: ret 0x8b44; 
0x0000000000413a93: ret 0x8b48; 
0x0000000000411416: ret 0x8b49; 
0x000000000048336e: ret 0x8b4a; 
0x000000000040d49d: ret 0x8b4c; 
0x0000000000464bad: ret 0x8c0f; 
0x000000000045d4d1: ret 0x8d04; 
0x000000000048c3bf: ret 0x8d0f; 
0x000000000041cc0c: ret 0x8d44; 
0x0000000000419801: ret 0x8d48; 
0x000000000046808c: ret 0x8d49; 
0x0000000000482717: ret 0x8d4a; 
0x000000000041dd24: ret 0x8d4c; 
0x000000000045da92: ret 0x8d89; 
0x000000000045292b: ret 0x8e0f; 
0x000000000045dd3a: ret 0x8f0f; 
0x00000000004400f5: ret 0x90c3; 
0x0000000000423da9: ret 0x90e9; 
0x0000000000477d4e: ret 0x9174; 
0x000000000048affb: ret 0x9272; 
0x000000000041b00d: ret 0x948; 
0x00000000004733a8: ret 0x94c; 
0x0000000000484c22: ret 0x950f; 
0x0000000000448e10: ret 0x9572; 
0x00000000004a7c53: ret 0x9576; 
0x000000000046068f: ret 0x958b; 
0x00000000004225ce: ret 0x976; 
0x00000000004a98b9: ret 0x990e; 
0x000000000047d013: ret 0x9be9; 
0x0000000000480d05: ret 0x9de8; 
0x00000000004870e5: ret 0x9eb; 
0x000000000049ea00: ret 0xa; 
0x00000000004ae936: ret 0xa01; 
0x000000000044a528: ret 0xa076; 
0x0000000000449354: ret 0xa0e9; 
0x0000000000463417: ret 0xa3e8; 
0x000000000048c47e: ret 0xa4e9; 
0x00000000004a7943: ret 0xa514; 
0x000000000048c57d: ret 0xa5e9; 
0x000000000047cc8a: ret 0xa8e8; 
0x000000000044b4cd: ret 0xabe; 
0x000000000040fc96: ret 0xac20; 
0x00000000004a7dc7: ret 0xac65; 
0x00000000004a8784: ret 0xacfc; 
0x000000000045f4cf: ret 0xae9; 
0x00000000004234ca: ret 0xaeeb; 
0x00000000004abf7f: ret 0xb00e; 
0x000000000041187d: ret 0xb074; 
0x000000000041b06b: ret 0xb277; 
0x000000000046517e: ret 0xb2c8; 
0x00000000004563bb: ret 0xb2eb; 
0x0000000000449340: ret 0xb4e9; 
0x000000000045dab6: ret 0xb589; 
0x0000000000489ef5: ret 0xb5e8; 
0x0000000000402c75: ret 0xb60f; 
0x0000000000400f34: ret 0xb70f; 
0x0000000000469cf5: ret 0xb8; 
0x000000000046ba9c: ret 0xb848; 
0x000000000047af3a: ret 0xb850; 
0x000000000048e2d2: ret 0xb8e8; 
0x00000000004a7c8e: ret 0xb9b9; 
0x000000000046d2d5: ret 0xb9e9; 
0x000000000046ee84: ret 0xba41; 
0x0000000000422d03: ret 0xbae9; 
0x00000000004564f2: ret 0xbaeb; 
0x000000000048ca36: ret 0xbc80; 
0x000000000045daa2: ret 0xbd89; 
0x0000000000464aed: ret 0xbde8; 
0x0000000000480e42: ret 0xbe0f; 
0x00000000004a79e4: ret 0xbe57; 
0x0000000000425a39: ret 0xc000; 
0x00000000004031a6: ret 0xc031; 
0x000000000045889e: ret 0xc083; 
0x000000000042b170: ret 0xc085; 
0x000000000040e116: ret 0xc148; 
0x000000000041b189: ret 0xc183; 
0x0000000000404948: ret 0xc189; 
0x000000000044a1c2: ret 0xc221; 
0x000000000041f5fb: ret 0xc275; 
0x00000000004767e6: ret 0xc283; 
0x000000000042d624: ret 0xc2b2; 
0x00000000004480ae: ret 0xc35b; 
0x0000000000457c8d: ret 0xc389; 
0x000000000041f5fd: ret 0xc3f3; 
0x00000000004a6182: ret 0xc4c3; 
0x00000000004a7598: ret 0xc4ff; 
0x000000000042b791: ret 0xc540; 
0x0000000000457d56: ret 0xc589; 
0x000000000046334c: ret 0xc689; 
0x000000000047f0bd: ret 0xc74; 
0x0000000000441030: ret 0xc748; 
0x0000000000468f48: ret 0xc789; 
0x0000000000480ed2: ret 0xc829; 
0x0000000000461d22: ret 0xc839; 
0x00000000004169fc: ret 0xc883; 
0x0000000000460767: ret 0xc985; 
0x000000000046f393: ret 0xc9eb; 
0x0000000000440c41: ret 0xc9ff; 
0x00000000004008d1: ret 0xca21; 
0x000000000047828f: ret 0xcbe9; 
0x00000000004a702a: ret 0xcca7; 
0x00000000004a910d: ret 0xcd11; 
0x0000000000405152: ret 0xce80; 
0x000000000049ee00: ret 0xd; 
0x0000000000420e7e: ret 0xd020; 
0x000000000040df26: ret 0xd021; 
0x00000000004641cb: ret 0xd120; 
0x0000000000401254: ret 0xd284; 
0x000000000045784a: ret 0xd285; 
0x000000000048e9b8: ret 0xd2e8; 
0x0000000000479d16: ret 0xd348; 
0x000000000044f807: ret 0xd5e9; 
0x000000000048128f: ret 0xd75; 
0x000000000045ce76: ret 0xd774; 
0x00000000004a8ba5: ret 0xd8f; 
0x000000000040058f: ret 0xda80; 
0x000000000040ff83: ret 0xdaf7; 
0x000000000045403a: ret 0xdb76; 
0x00000000004a8c86: ret 0xdcd9; 
0x00000000004a7c02: ret 0xde5d; 
0x00000000004a6991: ret 0xde9e; 
0x00000000004258f9: ret 0xe000; 
0x0000000000444ae9: ret 0xe074; 
0x000000000044d570: ret 0xe083; 
0x00000000004b515c: ret 0xe0a; 
0x000000000048c641: ret 0xe1e9; 
0x000000000044d3a2: ret 0xe1eb; 
0x000000000040db30: ret 0xe281; 
0x0000000000400c75: ret 0xe283; 
0x00000000004730b8: ret 0xe575; 
0x00000000004657d0: ret 0xe57f; 
0x000000000046614a: ret 0xe583; 
0x00000000004480a2: ret 0xe680; 
0x000000000046682f: ret 0xe683; 
0x00000000004a8da6: ret 0xe71f; 
0x00000000004790da: ret 0xe75; 
0x0000000000422db6: ret 0xe775; 
0x0000000000465e03: ret 0xe7e9; 
0x000000000042bdf5: ret 0xe883; 
0x0000000000478c56: ret 0xe8c0; 
0x0000000000402f4a: ret 0xe901; 
0x0000000000402f8f: ret 0xe902; 
0x0000000000440cd6: ret 0xe908; 
0x000000000043d276: ret 0xe910; 
0x000000000045e2fd: ret 0xe920; 
0x00000000004a7107: ret 0xe970; 
0x000000000044803a: ret 0xea81; 
0x000000000040dbfd: ret 0xeab8; 
0x0000000000400c5d: ret 0xeac1; 
0x000000000047d916: ret 0xeb01; 
0x000000000046f2c3: ret 0xeb04; 
0x000000000042a2ea: ret 0xeb10; 
0x0000000000481482: ret 0xeb30; 
0x000000000041139a: ret 0xec; 
0x00000000004a98b8: ret 0xec2; 
0x000000000045ce00: ret 0xed75; 
0x00000000004a955a: ret 0xef32; 
0x000000000048c208: ret 0xef89; 
0x0000000000475e1f: ret 0xefeb; 
0x00000000004290de: ret 0xf; 
0x00000000004257b9: ret 0xf000; 
0x0000000000405635: ret 0xf01; 
0x000000000041a9b9: ret 0xf02; 
0x000000000041cd99: ret 0xf04; 
0x0000000000411b03: ret 0xf08; 
0x000000000041ac89: ret 0xf0f; 
0x000000000040e42e: ret 0xf10; 
0x000000000046664b: ret 0xf20; 
0x000000000041cf03: ret 0xf275; 
0x0000000000480d40: ret 0xf2e8; 
0x0000000000463706: ret 0xf3f; 
0x0000000000466bd3: ret 0xf40; 
0x000000000046fd3d: ret 0xf41; 
0x000000000048c6bc: ret 0xf45; 
0x00000000004239a9: ret 0xf475; 
0x00000000004516e6: ret 0xf48; 
0x00000000004004fd: ret 0xf49; 
0x0000000000466bb9: ret 0xf50; 
0x0000000000489686: ret 0xf608; 
0x0000000000475495: ret 0xf631; 
0x0000000000425d76: ret 0xf66; 
0x000000000047ad67: ret 0xf675; 
0x000000000046fdfc: ret 0xf741; 
0x0000000000405882: ret 0xf748; 
0x000000000048295c: ret 0xf749; 
0x0000000000425679: ret 0xf800; 
0x00000000004a6870: ret 0xf869; 
0x0000000000418733: ret 0xf8b; 
0x0000000000463701: ret 0xf8c1; 
0x0000000000440556: ret 0xf8c5; 
0x00000000004483e4: ret 0xf8e9; 
0x0000000000493f94: ret 0xf98e; 
0x0000000000464fe2: ret 0xf9b4; 
0x000000000049471c: ret 0xfa05; 
0x0000000000494714: ret 0xfa06; 
0x000000000049470c: ret 0xfa07; 
0x0000000000494704: ret 0xfa08; 
0x00000000004946fc: ret 0xfa09; 
0x0000000000494508: ret 0xfa11; 
0x0000000000494a00: ret 0xfa38; 
0x000000000041f2e2: ret 0xfae9; 
0x00000000004596ca: ret 0xfb50; 
0x000000000041f8ca: ret 0xfbe9; 
0x0000000000425539: ret 0xfc00; 
0x0000000000424451: ret 0xfc3; 
0x00000000004771ba: ret 0xfd32; 
0x00000000004713ea: ret 0xfd72; 
0x00000000004253f9: ret 0xfe00; 
0x0000000000400da5: ret 0xfe83; 
0x00000000004252b9: ret 0xff00; 
0x0000000000434a91: ret 0xff2; 
0x000000000044d51b: ret 0xff25; 
0x000000000042bfb9: ret 0xff2d; 
0x0000000000425d1a: ret 0xff3; 
0x000000000046adf7: ret 0xff31; 
0x000000000041c21a: ret 0xff3c; 
0x000000000041b91a: ret 0xff45; 
0x0000000000425179: ret 0xff80; 
0x00000000004663d1: ret 0xff83; 
0x0000000000453fcc: ret 0xff85; 
0x000000000045d462: ret 0xffa0; 
0x000000000042365a: ret 0xffa5; 
0x000000000040b0da: ret 0xffaf; 
0x000000000040adda: ret 0xffb2; 
0x000000000044f75a: ret 0xffb3; 
0x0000000000410f17: ret 0xffb8; 
0x000000000040dc4a: ret 0xffc0; 
0x0000000000485cda: ret 0xffc7; 
0x0000000000423368: ret 0xffdf; 
0x0000000000424ef9: ret 0xffe0; 
0x000000000046223e: ret 0xffe6; 
0x0000000000468069: ret 0xffe8; 
0x00000000004493f5: ret 0xffe9; 
0x000000000040f111: ret 0xffef; 
0x0000000000422d82: ret 0xfff; 
0x000000000040da72: ret 0xfff0; 
0x000000000046a7e0: ret 0xfff1; 
0x0000000000485856: ret 0xfff7; 
0x0000000000424c79: ret 0xfff8; 
0x000000000041c838: ret 0xfffa; 
0x0000000000404869: ret 0xfffb; 
0x0000000000424b39: ret 0xfffc; 
0x00000000004181b5: ret 0xfffd; 
0x00000000004249f9: ret 0xfffe; 
0x00000000004156ac: ret 0xffff; 
0x000000000042ba05: ret 1; 
0x000000000042ba2b: ret 2; 
0x000000000040fa24: ret 3; 
0x0000000000409f38: ret 4; 
0x0000000000438bfe: ret 5; 
0x000000000049e5a8: ret 6; 
0x000000000042a87a: ret 7; 
0x0000000000409f98: ret 8; 
0x000000000044559a: ret 9; 
0x0000000000491446: retf 0x2283; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000044bbf2: retf 0x270c; add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x000000000047e875: retf 0x394c; ret 0x2275; 
0x000000000040e90c: retf 0x6411; xor rdx, qword ptr [0x30]; call rdx; 
0x000000000040e9f8: retf 0x6411; xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004a7062: retf 0x6ee8; sahf; ret 0x38ae; 
0x00000000004111d3: retf 0x775; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000042a28f: retf 0x8349; ret 0x7f10; 
0x000000000043d4d7: retf 0x8349; ret 0xf10; 
0x00000000004126e2: retf 0x894c; out 0x8b, al; mov ebp, 0xffffff7c; mov eax, r13d; syscall; 
0x00000000004499fc: retf 0x8d48; push rsp; and al, 0x18; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044468d: retf 0x8d4c; sbb eax, 0x5095b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044406d: retf 0x8d4c; sbb eax, 0x50efb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042a2b6: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000447fa6: retf 0xd975; vzeroupper; ret; 
0x0000000000447de3: retf 0xe175; vzeroupper; ret; 
0x0000000000486767: retf 0xe677; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000047456c: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a80: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000473851: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000042d1c6: retf 0xf66; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000494b2c: retf 0xfa33; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x00000000004734f6: retf 0xfdc5; xlatb; ret; 
0x0000000000418f62: retf 0xfe74; dec dword ptr [rax - 0x77]; ret; 
0x000000000046484a: retf 0xfff5; jmp qword ptr [rsi - 0x70]; 
0x0000000000494409: retf 0xfff9; ror bl, 1; stc; jmp qword ptr [rax]; 
0x00000000004545be: retf 0xfffa; dec dword ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000423455: retf 0xfffe; call 0xdc70; nop dword ptr [rax]; mov eax, 0x16; ret; 
0x00000000004489f2: retf 0xfffe; jmp qword ptr [rsi + 0x2e]; 
0x000000000041105e: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000048c115: retf 4; add al, ch; push rdx; sbb edi, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000004943b8: rol ah, 1; stc; jmp qword ptr [rax]; 
0x000000000045da79: rol al, 0xea; add eax, dword ptr [rcx - 0x40]; call 0xffffffff89d76386; ret 0x8341; 
0x0000000000400b81: rol bh, 1; add byte ptr [rax - 0x77], cl; hlt; ret; 
0x000000000042b30e: rol bl, 0x83; ret 0x6620; 
0x000000000044705d: rol byte ptr [r9 + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x0000000000425cf2: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000474a06: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440bc6: rol byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7fb: rol byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x00000000004737e2: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000004a28a0: rol byte ptr [rax + rax], 0; ret 4; 
0x0000000000448064: rol byte ptr [rax + rax], 1; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000448086: rol byte ptr [rax + rax], 1; shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000400d9a: rol byte ptr [rax + rcx*2], 0x83; mov dword ptr [rcx + rax*2], 0x72f2a30f; ret 0xfe83; 
0x0000000000454944: rol byte ptr [rax - 0x7af07f07], 0xc1; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000400406: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x412; call rax; 
0x0000000000479c81: rol byte ptr [rax], 0; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x000000000040dbc8: rol byte ptr [rax], 0; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000042c54d: rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000044ce2b: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x000000000048d0be: rol byte ptr [rax], 1; add byte ptr [rax], al; add rsp, 0x18; ret; 
0x000000000040dbd0: rol byte ptr [rax], 1; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040faa9: rol byte ptr [rax], 1; add byte ptr [rax], al; pop rbx; ret; 
0x000000000047574f: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x000000000042b552: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x000000000045f4c5: rol byte ptr [rbp - 0x40f0b737], 1; ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x00000000004826bb: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x0000000000418788: rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x00000000004530e1: rol byte ptr [rbx - 0x76befb08], 1; ret 0x415f; 
0x0000000000494ee4: rol byte ptr [rbx - 0x7a8f0006], 1; cli; call qword ptr [rax]; 
0x0000000000474872: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x0000000000448031: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0xea81; 
0x000000000046661f: rol byte ptr [rcx + 0xf], 0x94; ret; 
0x000000000044705e: rol byte ptr [rcx + 0xf], 1; adc dword ptr [rbx], esp; ret; 
0x000000000046d2d2: rol byte ptr [rcx - 0x77], 1; ret 0xb9e9; 
0x0000000000474852: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x000000000044e7d6: rol byte ptr [rcx], 0x50; call rbx; 
0x000000000045939b: rol byte ptr [rcx], 0x83; ret 0x4801; 
0x00000000004483c7: rol byte ptr [rcx], 0x83; ret 0xf01; 
0x0000000000464913: rol byte ptr [rcx], 0xc7; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x00000000004483e0: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x000000000044e011: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000042383a: rol byte ptr [rcx], cl; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x1d0a2]; cmove rax, rdx; ret; 
0x00000000004748b2: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x0000000000474862: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000004748a2: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000447412: rol ch, 0x7e; jg 0x47458; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x0000000000447545: rol ch, 0x7e; jg 0x4758b; movabs al, byte ptr [0x77f8c5237f7ec1c4]; ret; 
0x000000000042b87f: rol ch, 1; std; xlatb; ret; 
0x0000000000440bef: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000473556: rol ch, cl; std; xlatb; ret; 
0x00000000004a6180: rol cl, 0xc2; ret; 
0x00000000004747fc: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x0000000000447ddc: rol dword ptr [rax + 0x48000000], 0x39; retf 0xe175; vzeroupper; ret; 
0x0000000000447bc2: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447f9f: rol dword ptr [rax], 1; add byte ptr [rax], al; cmp rdx, rcx; jne 0x47f82; vzeroupper; ret; 
0x000000000042b7b0: rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000042b334: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000444aef: rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000042b873: rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004406c3: rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042b304: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000473a67: rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000042b773: rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x000000000047c9c1: rol dword ptr [rbx + 0x634a0002], cl; add al, 0xa7; add rax, rdi; jmp rax; 
0x0000000000473c3e: rol dword ptr [rcx + 0x20c00e1], 1; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000477f39: rol dword ptr [rcx], 0; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7d]; ret; 
0x0000000000416f0a: rol dword ptr [rcx], 0xf; mov dh, 0x3c; adc byte ptr [rax - 0x78], al; jl 0x16f29; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000045688f: rol dword ptr [rcx], 0xf; mov dh, 0x41; dec dword ptr [rax - 0x7d]; ret 0x8801; 
0x00000000004a6e0a: rol dword ptr [rdi + 0x42923bbd], 1; jmp qword ptr [rdx - 0x71]; 
0x000000000045494a: rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000042bfb5: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x00000000004943c4: ror al, 0xf9; call qword ptr [rax]; 
0x0000000000494418: ror bh, 0xf9; call qword ptr [rax]; 
0x0000000000494418: ror bh, 0xf9; call qword ptr [rax]; sar ecx, 1; jmp qword ptr [rax - 0x2e]; 
0x000000000049440c: ror bl, 1; stc; jmp qword ptr [rax]; 
0x0000000000400c04: ror byte ptr [r8 - 0x77], 0xc7; call 0xb5d; mov eax, 0; leave; ret; 
0x000000000043061f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc4f: ror byte ptr [r8 - 0x7d], 0xef; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000472205: ror byte ptr [r9 + rcx*4 - 1], 0x41; call rsp; 
0x000000000048a928: ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000042b11b: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2b3c0; add rax, rdi; add rax, rcx; ret; 
0x000000000042b382: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b392: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b3a2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3b2: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000047451c: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000440a87: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x00000000004110ce: ror byte ptr [rax + 0x29], 1; ret; 
0x000000000041067c: ror byte ptr [rax + 0x29], 1; xlatb; cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000042b7d3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x2b830; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x000000000042b7f3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x2b830; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000042b813: ror byte ptr [rax + 0x39], 0xc2; jbe 0x2b830; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c3: ror byte ptr [rax + 0x39], 0xc2; jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x0000000000473ab3: ror byte ptr [rax + 0x39], 0xc6; jbe 0x73b30; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000044bd08: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000041dbd3: ror byte ptr [rax + 0x39], 1; ret; 
0x000000000046ff93: ror byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000047c80a: ror byte ptr [rax + 0x39], cl; ret; 
0x00000000004852d9: ror byte ptr [rax + 0x3b], 1; add eax, 0x236e8f; jae 0x852ef; mov rdx, qword ptr [rip + 0x236e8e]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000044d4cd: ror byte ptr [rax + 0x63], cl; test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000045f4cb: ror byte ptr [rax + 0xf], 0x44; ret 0xae9; 
0x000000000044bd02: ror byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000440776: ror byte ptr [rax + 1], 0xc8; add rax, rdi; vzeroupper; ret; 
0x0000000000474908: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ad8: ror byte ptr [rax + 1], 0xf8; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b42c: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000042b8e8: ror byte ptr [rax + 1], 0xf8; add rax, rcx; vzeroupper; ret; 
0x00000000004749c3: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b93: ror byte ptr [rax + 1], 0xf8; sub rax, rdx; vzeroupper; ret; 
0x000000000042b352: ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000042b843: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x00000000004059d3: ror byte ptr [rax + 1], 1; ret; 
0x0000000000474519: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x0000000000440a84: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000040eaba: ror byte ptr [rax + 1], cl; ror byte ptr [rax - 0x3f], 1; call 0x648e36c8; ret; 
0x0000000000440415: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000049eca8: ror byte ptr [rax + rax], 0; ret; 
0x000000000042bad5: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x00000000004409c6: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440965: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x00000000004b3fec: ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x000000000048318c: ror byte ptr [rax - 0x3f], 0xe0; add ecx, dword ptr [rbp - 0x77]; ret 0x8d48; 
0x00000000004663ca: ror byte ptr [rax - 0x3f], 0xe2; and byte ptr [rax + 9], cl; ret 0xff83; 
0x000000000040eabd: ror byte ptr [rax - 0x3f], 1; call 0x648e36c8; ret; 
0x0000000000474911: ror byte ptr [rax - 0x3f], 1; call 0x78000e1b; ret; 
0x00000000004749c9: ror byte ptr [rax - 0x3f], 1; call 0x78000ed3; ret; 
0x00000000004749ed: ror byte ptr [rax - 0x3f], 1; call 0x78000ef7; ret; 
0x0000000000474a0d: ror byte ptr [rax - 0x3f], 1; call 0x78000f17; ret; 
0x0000000000474a5b: ror byte ptr [rax - 0x3f], 1; call 0x78000f65; ret; 
0x0000000000474afa: ror byte ptr [rax - 0x3f], 1; call 0x78001004; ret; 
0x0000000000474c7e: ror byte ptr [rax - 0x3f], 1; call 0x78001188; ret; 
0x0000000000474ca2: ror byte ptr [rax - 0x3f], 1; call 0x780011ac; ret; 
0x0000000000474cc2: ror byte ptr [rax - 0x3f], 1; call 0x780011cc; ret; 
0x0000000000474ce2: ror byte ptr [rax - 0x3f], 1; call 0x780011ec; ret; 
0x0000000000474d19: ror byte ptr [rax - 0x3f], 1; call 0x78001223; ret; 
0x0000000000474d3d: ror byte ptr [rax - 0x3f], 1; call 0x78001247; ret; 
0x0000000000474d5d: ror byte ptr [rax - 0x3f], 1; call 0x78001267; ret; 
0x0000000000474dab: ror byte ptr [rax - 0x3f], 1; call 0x780012b5; ret; 
0x00000000004244f4: ror byte ptr [rax - 0x73], 0x15; xor al, 0x38; add al, byte ptr [rax]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000044cf77: ror byte ptr [rax - 0x73], 0x3d; adc byte ptr [rcx + 0xf480004], 0x44; ret; 
0x000000000042b342: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x000000000042b372: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x000000000042b362: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x0000000000422d7e: ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x0000000000440fb3: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000440fef: ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000432d4b: ror byte ptr [rax - 0x73], 0x7f; ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044054b: ror byte ptr [rax - 0x73], cl; add al, 7; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000047990a: ror byte ptr [rax - 0x73], cl; add dword ptr [r15], r9d; xchg ebp, eax; ret 0xc283; 
0x0000000000421b67: ror byte ptr [rax - 0x75], 0x3d; mov dword ptr [rsi - 0x7af0ffd7], eax; sti; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000400c05: ror byte ptr [rax - 0x77], 0xc7; call 0xb5d; mov eax, 0; leave; ret; 
0x000000000047582b: ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004498ba: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; mov eax, 1; syscall; 
0x00000000004497ea: ror byte ptr [rax - 0x77], 0xee; mov edi, ebx; xor eax, eax; syscall; 
0x0000000000473dbd: ror byte ptr [rax - 0x77], 0xee; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x0000000000410764: ror byte ptr [rax - 0x77], 0xef; call qword ptr [rbp + 0x20]; 
0x000000000048460c: ror byte ptr [rax - 0x77], 1; or byte ptr [r8 + 2], r15b; ret; 
0x000000000048a93d: ror byte ptr [rax - 0x77], 1; ret 0x3575; 
0x000000000045a284: ror byte ptr [rax - 0x77], 1; ret 0x894c; 
0x0000000000413a90: ror byte ptr [rax - 0x77], 1; ret 0x8b48; 
0x0000000000481e8a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x000000000040db2d: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000411310: ror byte ptr [rax - 0x77], 1; ret; 
0x000000000041f3cd: ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000484c1c: ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000474a03: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440bc3: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b863: ror byte ptr [rax - 0x7d], 0xc0; add rax, rdi; vzeroupper; ret; 
0x0000000000440ba3: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042b853: ror byte ptr [rax - 0x7d], 0xc0; and byte ptr [rax + 1], cl; clc; vzeroupper; ret; 
0x0000000000423485: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004164f5: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000488357: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x0000000000475803: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000048e3d7: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000415711: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000432d4f: ror byte ptr [rax - 0x7d], 0xea; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c8f: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301cb: ror byte ptr [rax - 0x7d], 0xea; sfence; lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430620: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc50: ror byte ptr [rax - 0x7d], 0xef; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046c186: ror byte ptr [rax - 0x7d], 1; mov ebp, 0xfffffae8; add byte ptr [rcx - 0x77], al; ret 0x1674; 
0x000000000040ebb0: ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x0000000000454f85: ror byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000446a3b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000446a38: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446a35: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000489515: ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000046efd2: ror byte ptr [rbp + 0x39441704], cl; ret 0xf49; 
0x0000000000444083: ror byte ptr [rbp + rcx*4 + 0x1d], cl; in eax, 0xe; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044466b: ror byte ptr [rbp + rcx*4 + 0x1d], cl; jge 0x4467a; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444646: ror byte ptr [rbp + rcx*4 + 0x1d], cl; movabs byte ptr [0x49930c6349000509], al; lea ecx, [rbx + rcx]; jmp rcx; 
0x00000000004446a3: ror byte ptr [rbp + rcx*4 + 0x1d], cl; or dword ptr [rip + 0xc634900], r8d; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444009: ror byte ptr [rbp + rcx*4 + 0x1d], cl; pop rdi; syscall; 
0x0000000000444026: ror byte ptr [rbp + rcx*4 + 0x1d], cl; syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000473eec: ror byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x20; call rbx; 
0x00000000004756c4: ror byte ptr [rbx + 0x481c2454], 0x8b; je 0x756f1; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004b2d00: ror byte ptr [rbx], 0xfc; jmp qword ptr [rax]; 
0x000000000044a324: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000428933: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004845f4: ror byte ptr [rcx + 0x2b802], 1; add byte ptr [rax], al; ret; 
0x000000000048c007: ror byte ptr [rcx + 0x63], 4; test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x00000000004686d8: ror byte ptr [rcx + rcx*4 + 0x2f], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x000000000040dc17: ror byte ptr [rcx + rcx*4 - 0x32], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004740d7: ror byte ptr [rcx + rcx*4 - 0xe], 0x4c; lea ecx, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000472206: ror byte ptr [rcx + rcx*4 - 1], 0x41; call rsp; 
0x0000000000471f22: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004720fe: ror byte ptr [rcx + rcx*4 - 7], 0x48; lea esi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004733bc: ror byte ptr [rcx + riz - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000045bf86: ror byte ptr [rcx - 0x73], 0x43; adc byte ptr [rdi], cl; sahf; ret 0x894c; 
0x00000000004680b8: ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000044f7ff: ror byte ptr [rcx - 0x7d], cl; cmp al, 0x24; add byte ptr [rdi], cl; xchg esp, eax; ret 0xd5e9; 
0x000000000047fad2: ror byte ptr [rcx], cl; clc; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000045ad22: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000044bbfc: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x00000000004100bd: ror byte ptr [rdi], 0x84; lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000460337: ror byte ptr [rdi], 0x84; rcl byte ptr [rax + rax]; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x0000000000466bcb: ror byte ptr [rdi], 0x84; ret 0x17; 
0x0000000000450787: ror byte ptr [rdi], 0x84; ret 0xfffc; 
0x0000000000477ee1: ror byte ptr [rdi], 0x84; clc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000045eacc: ror byte ptr [rdi], 0x84; lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000475a39: ror byte ptr [rdi], 0x84; nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000040f841: ror byte ptr [rdi], 0x84; popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000402796: ror byte ptr [rdi], 0x84; ret; 
0x0000000000440fba: ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x000000000044c85f: ror byte ptr [rdi], 0x85; ret 0xfffe; 
0x000000000047d9f2: ror byte ptr [rdi], 0x85; ret 2; 
0x000000000042271f: ror byte ptr [rdi], 0x85; ret; 
0x0000000000467769: ror byte ptr [rdi], 0x8f; ret 7; 
0x0000000000480fba: ror byte ptr [rdi], 0x94; ret 0x3d; 
0x000000000046d955: ror byte ptr [rdi], 0x94; ret 0x7f3c; 
0x0000000000484c1f: ror byte ptr [rdi], 0x94; ret 0x950f; 
0x0000000000446b2e: ror byte ptr [rdi], 0x94; ret 0xc085; 
0x00000000004105eb: ror byte ptr [rdi], 0x94; ret 0xdaf7; 
0x0000000000422d78: ror byte ptr [rdi], 0x94; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x000000000047f4c9: ror byte ptr [rdi], 0x94; ret; 
0x000000000040ff80: ror byte ptr [rdi], 0x95; ret 0xdaf7; 
0x0000000000488354: ror byte ptr [rdi], 0x95; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000046cd8a: ror byte ptr [rdi], 0xb6; add al, 7; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000422d7b: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x000000000049445c: ror byte ptr [rdi], 0xfa; call qword ptr [rax + 0xf]; 
0x000000000049445c: ror byte ptr [rdi], 0xfa; call qword ptr [rax + 0xf]; cli; jmp rax; 
0x0000000000446fa5: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000422daf: ror byte ptr [rdi], 1; mov dh, 0x14; add dword ptr [rax + rdi - 0x3e], eax; jne 0x22da0; sub rax, 0x10; ret; 
0x0000000000494658: ror byte ptr [rdi], 1; cli; jmp qword ptr [rax + 0xf]; 
0x00000000004743ff: ror byte ptr [rdi], cl; test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000047373b: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000044096b: ror byte ptr [rdi], cl; test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004946f4: ror byte ptr [rdx], cl; cli; call qword ptr [rdx + 0xa]; 
0x00000000004b3ff0: ror ch, 1; cld; jmp qword ptr [rsi]; 
0x00000000004b3f10: ror dl, 0xfc; jmp qword ptr [rcx]; 
0x00000000004732ba: ror dword ptr [rax + 0x21], 0xce; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000048521e: ror dword ptr [rax + 1], 0xf8; sub rax, r8; ret; 
0x0000000000446b38: ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000473be9: ror dword ptr [rax + rax], cl; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0xa22]; cmove rax, rdx; ret; 
0x0000000000440a79: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000048ab04: ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x000000000046f586: ror dword ptr [rax - 0x75], 4; ret 0x8548; 
0x00000000004234c7: ror dword ptr [rax - 0x77], 1; ret 0xaeeb; 
0x0000000000479d13: ror dword ptr [rax - 0x77], 1; ret 0xd348; 
0x0000000000465e00: ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x0000000000485831: ror dword ptr [rax - 0x77], cl; ret; 
0x00000000004409c2: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440961: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x000000000045dbd4: ror dword ptr [rax - 0x7d], cl; ret 0x4820; 
0x000000000040127b: ror dword ptr [rax], 0; add byte ptr [rdx + 0x3c], bh; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000418783: ror dword ptr [rax], 0x74; adc dword ptr [rcx], esi; rol byte ptr [rbx - 0x6af00002], 0xc0; neg eax; ret; 
0x0000000000483e5d: ror dword ptr [rbp + rcx*4 + 0x14], cl; ret; 
0x00000000004833e8: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004657bb: ror dword ptr [rcx - 0x77], 0x14; ret 0x8b48; 
0x000000000041140b: ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000444ae7: ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000042cdb8: ror dword ptr [rdi], 0x85; adc byte ptr [rdx], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d4c4: ror dword ptr [rdi], 0x85; add al, 3; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d296: ror dword ptr [rdi], 0x85; add eax, 0xc0310000; ret; 
0x000000000042d216: ror dword ptr [rdi], 0x85; cmpsb byte ptr [rsi], byte ptr [rdi]; add eax, 0xc0310000; ret; 
0x000000000042d554: ror dword ptr [rdi], 0x85; je 0x2d55b; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d04b: ror dword ptr [rdi], 0x85; jno 0x2d057; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d113: ror dword ptr [rdi], 0x85; mov ch, 6; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042cd90: ror dword ptr [rdi], 0x85; sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040e9d1: ror eax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040e90b: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040e9f7: ror edx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000040e9d0: ror rax, 0x11; xor rax, qword ptr fs:[0x30]; call rax; 
0x000000000040e90a: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040e9f6: ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000041878e: sal bh, 0xd8; ret; 
0x0000000000495010: sal bh, 0xfa; call rax; 
0x0000000000495010: sal bh, 0xfa; call rax; idiv edx; push rax; idiv edx; call qword ptr [rax]; 
0x0000000000425b77: sal bh, 1; ret 0x8000; 
0x0000000000425a37: sal bh, 1; ret 0xc000; 
0x00000000004258f7: sal bh, 1; ret 0xe000; 
0x00000000004257b7: sal bh, 1; ret 0xf000; 
0x0000000000425677: sal bh, 1; ret 0xf800; 
0x0000000000425537: sal bh, 1; ret 0xfc00; 
0x00000000004253f7: sal bh, 1; ret 0xfe00; 
0x00000000004252b7: sal bh, 1; ret 0xff00; 
0x0000000000425177: sal bh, 1; ret 0xff80; 
0x0000000000425037: sal bh, 1; ret 0xffc0; 
0x0000000000424ef7: sal bh, 1; ret 0xffe0; 
0x0000000000424db7: sal bh, 1; ret 0xfff0; 
0x0000000000424c77: sal bh, 1; ret 0xfff8; 
0x0000000000424b37: sal bh, 1; ret 0xfffc; 
0x00000000004249f7: sal bh, 1; ret 0xfffe; 
0x0000000000495014: sal bh, 1; cli; push rax; idiv edx; call qword ptr [rax]; 
0x0000000000494fdc: sal bl, 0xfa; jmp rax; 
0x000000000042b97f: sal bl, 1; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004745ff: sal bl, 1; ret; 
0x000000000047f36d: sal bl, cl; ret; 
0x0000000000489681: sal byte ptr [rax + rax*8 + 0x49], 0x83; ret 0xf608; 
0x000000000041908d: sal byte ptr [rax + rbx + 0x48], 0x8b; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x00000000004765ed: sal byte ptr [rax + riz - 0x75], 0x35; ret 0x2424; 
0x000000000040da6d: sal byte ptr [rax + riz*2 + 0x48], 0xc7; ret 0xfff0; 
0x0000000000444af1: sal byte ptr [rbp + 0x10], 0x66; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000047f2d6: sal byte ptr [rbp + 0x13], 1; mov byte ptr [rip + 0x23d4e8], 0; mov qword ptr [rip + 0x23d0c9], rax; add rsp, 8; ret; 
0x0000000000449887: sal byte ptr [rbp + 0x16], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000449b57: sal byte ptr [rbp + 0x16], 0xb8; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x000000000040dc3a: sal byte ptr [rbp + 0x1f], 0x48; add esp, 0x118; ret; 
0x0000000000474c62: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x0000000000473aa2: sal byte ptr [rbp + 0x2b], 0x4c; mov eax, eax; vzeroupper; ret; 
0x000000000042b572: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000048254e: sal byte ptr [rbp + 0x4f], 0x89; ret; 
0x0000000000475646: sal byte ptr [rbp + 0x5d], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000449627: sal byte ptr [rbp + 0x61], 0x89; mov eax, 0x101; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x0000000000405e1b: sal byte ptr [rbp + 0xa], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000048f4a3: sal byte ptr [rbp + 0xa], 0xf3; ret; 
0x0000000000471e78: sal byte ptr [rbp + 0xd], 0x8b; cmp rcx, qword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x00000000004855af: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048f488: sal byte ptr [rbp + 5], 0xf3; ret; 
0x000000000044bd21: sal byte ptr [rbp + 8], 1; nop; mov eax, 0xca; syscall; 
0x0000000000440770: sal byte ptr [rbp + rbx - 0xd], 0xf; mov esp, 0xc80148c0; add rax, rdi; vzeroupper; ret; 
0x0000000000474480: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000400a98: sal byte ptr [rbp + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000004747f8: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x000000000044bd31: sal byte ptr [rbp - 0x10], 0x5a; pop r10; ret; 
0x000000000041732d: sal byte ptr [rbp - 0x10], 0xf3; ret; 
0x0000000000446820: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x0000000000425e9b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x000000000042b87d: sal byte ptr [rbp - 0x30], 0xc5; std; xlatb; ret; 
0x0000000000480e28: sal byte ptr [rbp - 0x31], cl; movsx eax, cl; neg eax; ret; 
0x000000000042b875: sal byte ptr [rbp - 0x38], 0xc5; std; xlatb; ret 0xc085; 
0x00000000004406cd: sal byte ptr [rbp - 0x50], 0xc5; std; xlatb; ret; 
0x00000000004406c5: sal byte ptr [rbp - 0x68], 0xc5; std; xlatb; ret 0xc085; 
0x000000000041874c: sal byte ptr [rbx + 0x21], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000044ce16: sal byte ptr [rbx + rbp + 0x48], 0x8b; push rax; or dh, dh; ret 0x8902; 
0x000000000042b8e2: sal byte ptr [rbx + rbx - 0xd], 0xf; mov esp, 0xf80148c0; add rax, rcx; vzeroupper; ret; 
0x000000000048d1f2: sal byte ptr [rbx + rcx + 0x48], 0x8b; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000400ada: sal byte ptr [rbx + rcx + 0x5d], 0xbf; shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000471392: sal byte ptr [rbx + rdi + 0x4d], 0x8b; mov ch, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x0000000000494b6c: sal byte ptr [rbx], 0xfa; jmp qword ptr [rax + 0x29]; 
0x00000000004409cc: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000048afac: sal byte ptr [rcx + riz*2 + 0x3c], 0x2f; ja 0x8b861; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x0000000000494110: sal byte ptr [rcx - 0x4c7f0007], 0xf9; jmp qword ptr [rax - 0x4b]; 
0x000000000044e7cd: sal byte ptr [rcx], 0xc9; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000473ee8: sal byte ptr [rcx], 0xc9; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044e7d2: sal byte ptr [rcx], 0xd2; add eax, 1; push rax; call rbx; 
0x0000000000440683: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406a3: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406e1: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x0000000000440663: sal byte ptr [rcx], 0xd2; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044bd06: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000448197: sal byte ptr [rcx], 1; shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000047534d: sal byte ptr [rcx], cl; imul al; sti; std; jmp qword ptr [rsi + 0xf]; 
0x000000000040aaf8: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret 0x18; 
0x0000000000407669: sal byte ptr [rdi + rbp - 0x75], cl; or al, byte ptr [rbx - 0x7bf0fd07]; ret; 
0x00000000004a4d08: sal byte ptr [rdi - 3], 1; jmp rbx; 
0x000000000040eaac: sal byte ptr [rdx + 0x3948006b], 1; ret; 
0x000000000040040d: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000446b33: sal byte ptr [rdx + rbx*8 + 0x48], 0x63; ror dword ptr [rax + 1], 0xf8; sub rax, rsi; ret; 
0x0000000000484d32: sal byte ptr [rdx + rcx + 0x48], 0x8d; adc eax, 0x235e24; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x000000000044c63b: sal byte ptr [rdx + rcx + 0x48], cl; lea edi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000486c2b: sal byte ptr [rdx + rcx + 0x49], cl; mov eax, dword ptr [rsp]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000494a24: sal byte ptr [rdx + rdi*8], cl; jmp qword ptr [rdx + 0x34]; 
0x0000000000440ce3: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x000000000047446b: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004737ab: sal byte ptr [rdx + riz + 0x48], cl; bsf eax, edx; ret; 
0x000000000042d63f: sal byte ptr [rdx - 0x10f0992e], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d760: sal byte ptr [rdx - 0x10f09930], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000416c95: sal byte ptr [rsi + 0x10], 0x48; mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004848d2: sal byte ptr [rsi + rcx + 0x48], 0x8d; add eax, 0x2377a4; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x000000000042b427: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x0000000000494954: sal byte ptr [rsi], 0xfa; call qword ptr [rax + 0x36]; 
0x0000000000494954: sal byte ptr [rsi], 0xfa; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x0000000000494b50: sal byte ptr [rsi], 1; cli; jmp qword ptr [rax + 0x36]; 
0x000000000040da61: sal byte ptr [rsp + rbp*2 + 0x48], 0x8d; pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b79f8c], eax; ret 0xfff0; 
0x0000000000419653: sal byte ptr [rsp + rbx*2 - 0x75], cl; add eax, 0x2a2714; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x0000000000484fe1: sal byte ptr [rsp + rcx + 0x5b], 0x5d; pop r12; ret; 
0x000000000047f929: sal byte ptr [rsp + rsi + 0x48], 0x89; ret; 
0x00000000004896da: sal byte ptr [rsp + rsi*4 + 0x48], 0x83; ret 0xf608; 
0x0000000000494f7c: sal cl, 0xfa; call rax; 
0x0000000000494f7c: sal cl, 0xfa; call rax; int1; cli; jmp rax; 
0x0000000000494f80: sal cl, 1; cli; jmp rax; 
0x0000000000494fb8: sal dl, 0xfa; call rax; 
0x0000000000494fb8: sal dl, 0xfa; call rax; cli; jmp rax; 
0x0000000000494fbc: sal dl, 1; cli; jmp rax; 
0x000000000042d59f: sal dword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d6df: sal dword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000428936: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000446f03: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000480e2d: sal edi, 0xd8; ret; 
0x00000000004ae06d: sal esi, cl; call qword ptr [rax]; 
0x000000000042d59e: sal qword ptr [rdx - 0x10f0992d], cl; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d6de: sal qword ptr [rdx - 0x10f0992f], 1; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000495038: sar al, 1; cli; push rax; clc; cli; call qword ptr [rax]; 
0x000000000047fcb3: sar bh, 0xff; call ptr [rbx + 0x64]; mov eax, dword ptr [rax]; ret; 
0x0000000000449493: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret 0xffff; 
0x0000000000403060: sar bh, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x0000000000411c0b: sar bh, 0xff; inc dword ptr [rbx + 0x178920ca]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000415653: sar bh, 0xff; inc dword ptr [rbx + 0xf8920c9]; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000484550: sar bh, 0xff; mov eax, 1; ret; 
0x00000000004494e3: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x0000000000449573: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000449823: sar bh, 0xff; push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, 0xffffffffffffffff; ret; 
0x000000000048450d: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000412957: sar byte ptr [rax + 0x36], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000402792: sar byte ptr [rax + 0x5b], 0x85; ror byte ptr [rdi], 0x84; ret; 
0x000000000047bbf1: sar byte ptr [rax + 0xe], 0x5b; ret; 
0x000000000042c6ac: sar byte ptr [rax + 6], 0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000044a3d2: sar byte ptr [rax - 0x21], 0x48; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000494160: sar byte ptr [rax - 0x456f0007], 0xf9; call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x00000000004941cc: sar byte ptr [rbp - 0x4f9f0007], 1; stc; call qword ptr [rax]; 
0x00000000004941cc: sar byte ptr [rbp - 0x4f9f0007], 1; stc; call qword ptr [rax]; mov dl, 0xf9; jmp rax; 
0x00000000004941c8: sar byte ptr [rbx - 0x422f0007], 1; stc; jmp qword ptr [rax - 0x50]; 
0x0000000000494148: sar byte ptr [rcx + rdi*8 - 0x6412f01], 1; jmp qword ptr [rax - 0x4f]; 
0x00000000004941c4: sar byte ptr [rcx - 0x442f0007], 1; stc; call rax; mov ebp, 0xb060fff9; stc; call qword ptr [rax]; 
0x0000000000446ade: sar byte ptr [rcx], 0xc8; jle 0x46b18; movsxd rax, ecx; ret; 
0x0000000000494938: sar byte ptr [rcx], 1; cli; jmp qword ptr [rax + 0x39]; 
0x000000000044d39d: sar byte ptr [rcx], cl; ret; 
0x0000000000494144: sar byte ptr [rdx - 0x432f0007], 1; stc; call rax; mov esi, 0xb160fff9; stc; jmp qword ptr [rax]; 
0x00000000004400e5: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x00000000004a78dd: sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004af4ec: sar byte ptr [rip - 0x26700000], 1; clc; call qword ptr [rax]; 
0x0000000000458761: sar byte ptr [rsi + 8], 0x83; call 0x849106b; pop rbx; ret; 
0x00000000004a79ff: sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000049414c: sar byte ptr [rsi - 0x4e9f0007], 1; stc; jmp qword ptr [rax]; 
0x0000000000438a77: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000048d402: sar ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000495058: sar cl, 1; cli; push rax; stc; cli; call qword ptr [rax]; 
0x00000000004b0a70: sar dl, 0xfd; jmp qword ptr [rdx]; 
0x0000000000438435: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043843c: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x38440; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438443: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x38448; ret; 
0x0000000000448132: sar dword ptr [rax], 1; and ch, 0xf0; cmovne rax, rdx; pop rbx; ret; 
0x0000000000447af8: sar dword ptr [rbp + 0x48], 1; out 0x49, eax; jmp qword ptr [rdx - 0x2f]; 
0x00000000004845ea: sar dword ptr [rdi - 0x76b30001], 1; or byte ptr [r9 + r13 - 0x30], r8b; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000447419: sar dword ptr [rsi + 0x7f], 0x23; vzeroupper; ret; 
0x000000000048bffc: sar dword ptr [rsi + rbp*8], cl; ja 0x8c119; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000048d198: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000471bfc: sar eax, 2; lea eax, [r8 - 1]; ret; 
0x000000000041109f: sar eax, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004885ee: sar eax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000042bad1: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000447959: sar ebp, 1; jg 0x479a7; jmp qword ptr [rdx - 0x2f]; 
0x000000000049441d: sar ecx, 1; jmp qword ptr [rax - 0x2e]; 
0x00000000004a7763: sar ecx, 1; jnp 0xa7720; ret; 
0x00000000004631bd: sar ecx, cl; dec dword ptr [rax + 0x29]; ret; 
0x0000000000469235: sar edx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000471d02: sar edx, 2; sub eax, edx; ret; 
0x000000000042bad7: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000004409c8: sar edx, cl; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440967: sar edx, cl; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x00000000004737a7: sar edx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000473737: sar edx, cl; test rdx, rdx; je 0x737e0; bsf rax, rdx; ret; 
0x0000000000474467: sar edx, cl; test rdx, rdx; je 0x74490; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004743fb: sar edx, cl; test rdx, rdx; je 0x744a0; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004478d3: sar esi, 1; jg 0x478fb; vzeroupper; ret; 
0x0000000000447a6c: sar esi, 1; jg 0x47a94; vzeroupper; ret; 
0x000000000046b521: sar esi, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000046b520: sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000471bfb: sar r8, 2; lea eax, [r8 - 1]; ret; 
0x000000000041109e: sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000048d197: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004885ed: sar rax, 3; pop rbp; pop r12; pop r13; ret; 
0x000000000042bad0: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000469234: sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x0000000000471d01: sar rdx, 2; sub eax, edx; ret; 
0x000000000042bad6: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x00000000004409c7: sar rdx, cl; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440966: sar rdx, cl; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x00000000004737a6: sar rdx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000473736: sar rdx, cl; test rdx, rdx; je 0x737e0; bsf rax, rdx; ret; 
0x0000000000474466: sar rdx, cl; test rdx, rdx; je 0x74490; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004743fa: sar rdx, cl; test rdx, rdx; je 0x744a0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044cf72: sbb ah, bh; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x73], 0x3d; adc byte ptr [rcx + 0xf480004], 0x44; ret; 
0x00000000004633b5: sbb ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; ret; 
0x00000000004af6a0: sbb al, 0; add byte ptr [rax], al; mov byte ptr [rdi], bh; add byte ptr [rax], al; or byte ptr [rbx - 7], dh; call qword ptr [rdi]; 
0x00000000004addd4: sbb al, 0; add byte ptr [rax], al; mov esp, 0xf5000026; cmc; call qword ptr [rsi]; 
0x00000000004b3fe8: sbb al, 0; add byte ptr [rax], al; ror byte ptr [rax - 0x32300000], 1; cld; jmp qword ptr [rsi]; 
0x000000000044a5c1: sbb al, 0; add byte ptr [rax], al; syscall; 
0x000000000044a5c1: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x00000000004ad381: sbb al, 0; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x000000000046682d: sbb al, 0x29; ret 0xe683; 
0x000000000049584c: sbb al, 0x3e; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004756c8: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000467767: sbb al, 0x85; ror byte ptr [rdi], 0x8f; ret 7; 
0x00000000004b4538: sbb al, 0x8e; add byte ptr [rax], al; test al, dh; cld; jmp qword ptr [rdx + 5]; 
0x00000000004b4738: sbb al, 0x90; add byte ptr [rax], al; add al, 4; std; jmp qword ptr [rdx]; 
0x00000000004b1684: sbb al, 0x95; cli; call qword ptr [rcx]; 
0x000000000047b51f: sbb al, 0xba; add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000048bf97: sbb al, 0xf8; jmp qword ptr [rsi + 0xf]; 
0x0000000000493e69: sbb al, 0xf9; jmp qword ptr [rax]; 
0x00000000004623af: sbb al, 1; add byte ptr [rax - 0x7d], cl; clc; dec dword ptr [rcx - 0x77]; ret; 
0x000000000040e092: sbb al, 7; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000463e96: sbb al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000406f43: sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000046993b: sbb al, byte ptr fs:[rax]; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000040b0d8: sbb al, ch; ret 0xffaf; 
0x0000000000458ec4: sbb al, ch; xchg esi, eax; jno 0x58ec5; jmp qword ptr [rsi + 0xf]; 
0x00000000004a64e5: sbb bl, byte ptr [rsi]; ret; 
0x00000000004449ea: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044433a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449ab: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004442fb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004449e9: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000444339: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x00000000004449aa: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x00000000004442fa: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004165cf: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000481b74: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000416470: sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x0000000000485af4: sbb byte ptr [r8], al; add byte ptr [rax], al; add bl, ch; ret; 
0x0000000000470d89: sbb byte ptr [r9 + rcx*4 - 0x1a], r8b; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000411403: sbb byte ptr [r9 - 0x77], r9b; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000484c19: sbb byte ptr [r9], sil; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004756d1: sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000047e1d1: sbb byte ptr [rax + 0x29], cl; ret 0x394c; 
0x000000000045dd24: sbb byte ptr [rax + 0x39], cl; ret 0x850f; 
0x0000000000419121: sbb byte ptr [rax + 0x39], cl; ret; 
0x0000000000481b75: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000469242: sbb byte ptr [rax - 0x3f], cl; cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000449acd: sbb byte ptr [rax - 0x73], cl; and al, 0x30; mov qword ptr [rsp + 0x20], rax; je 0x49b00; mov eax, 0x48; syscall; 
0x00000000004119a0: sbb byte ptr [rax - 0x73], cl; ja 0x119fd; mov rdi, rax; call qword ptr [rax + 8]; 
0x00000000004170b7: sbb byte ptr [rax - 0x75], cl; add rsp, 0x20; mov ecx, edx; pop rbx; xor edx, edx; jmp rax; 
0x000000000040e903: sbb byte ptr [rax - 0x75], cl; jo 0xe928; mov edi, ebp; ror rdx, 0x11; xor rdx, qword ptr fs:[0x30]; call rdx; 
0x0000000000416439: sbb byte ptr [rax - 0x75], cl; mov qword ptr [rdi + 0x48], rdx; mov qword ptr [rdi + 0x18], rax; mov qword ptr [rdi + 8], rax; ret; 
0x000000000048dcfa: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x000000000041908f: sbb byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000482557: sbb byte ptr [rax - 0x75], cl; push rsp; and al, 0x10; call rdx; 
0x0000000000416469: sbb byte ptr [rax - 0x77], cl; adc byte ptr [r8 - 0x77], r9b; sbb byte ptr [r8 - 0x77], r9b; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000047515b: sbb byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000041f37d: sbb byte ptr [rax - 0x77], cl; fistp word ptr [rbx + 0x5d]; jmp rax; 
0x0000000000474230: sbb byte ptr [rax - 0x77], cl; out dx, eax; mov r9, r14; call rbx; 
0x0000000000411e30: sbb byte ptr [rax - 0x77], cl; out dx, eax; mov rax, qword ptr [rsi + 0x60]; add rsi, 0x58; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x000000000047f94c: sbb byte ptr [rax - 0x77], cl; push rbx; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000416471: sbb byte ptr [rax - 0x77], cl; push rdi; mov qword ptr [rdi + 8], rax; ret; 
0x000000000041a0cb: sbb byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x00000000004857ff: sbb byte ptr [rax - 0x77], cl; ret; 
0x00000000004198e3: sbb byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret; 
0x0000000000485af5: sbb byte ptr [rax], al; add byte ptr [rax], al; add bl, ch; ret; 
0x00000000004b2760: sbb byte ptr [rax], al; add byte ptr [rax], al; jo 0xb2767; add al, bl; sti; jmp qword ptr [rbx]; 
0x00000000004494d1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x00000000004494d1: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x00000000004acfa5: sbb byte ptr [rax], al; add byte ptr [rax], bl; test dh, dh; call qword ptr [rdi]; 
0x000000000040a58a: sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000046079b: sbb byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 9], cl; mov dword ptr [rbp - 0x4e8], r9d; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004950ec: sbb byte ptr [rax], dh; sti; push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x00000000004a4d04: sbb byte ptr [rbp + rdi*8 - 1], dh; sal byte ptr [rdi - 3], 1; jmp rbx; 
0x00000000004165d0: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000048a775: sbb byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000041f998: sbb byte ptr [rbx + 0x5d], bl; jmp rax; 
0x000000000044d17c: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000411847: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000418307: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000048ab01: sbb byte ptr [rcx + 0x21], cl; ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x0000000000471a1a: sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x00000000004acff0: sbb byte ptr [rcx + 0xe], al; adc byte ptr [rdx + 0xe], al; or byte ptr [rax + 0xb], cl; add dh, byte ptr [rbx + 0xa]; ret; 
0x00000000004197fe: sbb byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000471f2e: sbb byte ptr [rcx + rcx*4 - 0x19], cl; call rbx; 
0x0000000000470d8a: sbb byte ptr [rcx + rcx*4 - 0x1a], al; mov rdi, rbx; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000046ec96: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048ffef: sbb byte ptr [rcx + rdi + 0x6d], cl; js 0x9006c; ret 0x8b48; 
0x000000000045dd0b: sbb byte ptr [rcx - 0x75], cl; push rdi; and byte ptr [rax - 0x75], cl; mov ebp, 0xfffff758; sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x0000000000454348: sbb byte ptr [rcx - 0x77], al; ret; 
0x0000000000411404: sbb byte ptr [rcx - 0x77], cl; sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x00000000004ab8c8: sbb byte ptr [rcx - 0xb], ah; call qword ptr [rbx + 1]; 
0x000000000040dc40: sbb byte ptr [rcx], al; add byte ptr [rax], al; ret; 
0x000000000041f3cb: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; rcr byte ptr [rbx + 0x5d], 1; ret; 
0x0000000000484c1a: sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x000000000044bfa3: sbb byte ptr [rdi + 0x10], dh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfa2: sbb byte ptr [rdi + 0x10], sil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfd1: sbb byte ptr [rdi - 0x1e], bh; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x000000000044bfd0: sbb byte ptr [rdi - 0x1e], dil; mov qword ptr [rax + 0x20], rcx; mov byte ptr [rax + 0x28], 1; ret; 
0x00000000004af934: sbb byte ptr [rdx], al; add byte ptr [rax - 0x7b], ch; stc; call qword ptr [rbx]; 
0x0000000000486fdb: sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004af134: sbb byte ptr [rdx], bh; add byte ptr [rax], al; cmp byte ptr [rdx - 9], dl; jmp qword ptr [rbx]; 
0x0000000000449a01: sbb byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x00000000004719d2: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000470ea7: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471c6f: sbb byte ptr [rsi + 0x24], dh; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471c6e: sbb byte ptr [rsi + 0x24], sil; mov rax, qword ptr [rdx + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000471057: sbb byte ptr [rsi + 0x28], dh; mov rax, qword ptr [rax + 0x130]; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000049423c: sbb byte ptr [rsi - 0x602f0007], 0xf9; jmp qword ptr [rax]; 
0x0000000000432dbb: sbb byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000045deb9: sbb byte ptr [rsi], dl; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000046c702: sbb ch, byte ptr [rbx - 0x74b7ffdc]; add al, 0xf8; jmp rax; 
0x00000000004af518: sbb ch, dh; clc; call qword ptr [rax]; 
0x000000000041dbcd: sbb cl, byte ptr [rax + 0x29480614]; ror byte ptr [rax + 0x39], 1; ret; 
0x0000000000457acd: sbb cl, byte ptr [rdi]; mov bh, 0x47; or cl, byte ptr [rax + 0x39]; ret 0x1176; 
0x0000000000450a7a: sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x000000000043ddcd: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fa1a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f23a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f62a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee4a: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e92d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e10d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043d8ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043efe9: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e44d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043dc2d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d40d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043e5ed: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043f4da: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ecfa: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fe0a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d74d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d883: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e583: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e0a3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f3db: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043fd0b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e8c3: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dbc3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d6e3: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e3e3: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043f52b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ed4b: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048e025: sbb dh, bl; ret; 
0x0000000000494270: sbb dl, bl; stc; jmp rax; 
0x000000000046cb80: sbb dword ptr [r8], r8d; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000401805: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax - 0x77], r9b; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000048df19: sbb dword ptr [rax - 0x7d], ecx; ret 0x8001; 
0x00000000004885cb: sbb dword ptr [rax - 0x7d], ecx; ret; 
0x00000000004699d5: sbb dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x000000000044bc74: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000044bc74: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000046cb81: sbb dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000461219: sbb dword ptr [rbx - 0x52743], eax; call qword ptr [rax]; 
0x00000000004a8d9d: sbb dword ptr [rbx], edx; mov ch, 0x99; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x0000000000450a73: sbb dword ptr [rcx - 0x41f0b3b8], ecx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004446d3: sbb dword ptr [rcx], ecx; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000045e634: sbb dword ptr [rdi], ecx; add byte ptr [rax], al; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000042de93: sbb dword ptr [rdx + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000448f95: sbb dword ptr [rsi + 0x2e], esp; nop dword ptr [rax + rax]; mov edi, edx; mov eax, esi; syscall; 
0x00000000004464f7: sbb eax, -1; ret; 
0x000000000048d072: sbb eax, 0x18c48348; ret; 
0x00000000004246db: sbb eax, 0x2002977; lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x00000000004900b0: sbb eax, 0x22bc3b; jne 0x90098; pop rbx; ret; 
0x000000000045e734: sbb eax, 0x39480001; ret; 
0x00000000004352f5: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004352f0: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000444707: sbb eax, 0x508e4; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446d2: sbb eax, 0x50919; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004446a6: sbb eax, 0x50945; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444690: sbb eax, 0x5095b; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044466e: sbb eax, 0x5097d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444649: sbb eax, 0x509a2; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044462c: sbb eax, 0x509bf; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004445d4: sbb eax, 0x50a17; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440e7: sbb eax, 0x50e84; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004440b2: sbb eax, 0x50eb9; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444086: sbb eax, 0x50ee5; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444070: sbb eax, 0x50efb; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044404e: sbb eax, 0x50f1d; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000444029: sbb eax, 0x50f42; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044400c: sbb eax, 0x50f5f; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000443fb4: sbb eax, 0x50fb7; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000437463: sbb eax, 0x5d4c8; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437105: sbb eax, 0x5d826; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004372b0: sbb eax, 0x5d8bb; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f85: sbb eax, 0x5d9a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000437048: sbb eax, 0x5db23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e05: sbb eax, 0x5db26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec8: sbb eax, 0x5dca3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c85: sbb eax, 0x5dca6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d48: sbb eax, 0x5de23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b05: sbb eax, 0x5de26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc9: sbb eax, 0x5dfa2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436985: sbb eax, 0x5dfa6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a48: sbb eax, 0x5e123; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436805: sbb eax, 0x5e126; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c8: sbb eax, 0x5e2a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436685: sbb eax, 0x5e2a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436748: sbb eax, 0x5e423; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436505: sbb eax, 0x5e426; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c8: sbb eax, 0x5e5a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436385: sbb eax, 0x5e5a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436448: sbb eax, 0x5e723; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436205: sbb eax, 0x5e726; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c8: sbb eax, 0x5e8a3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436085: sbb eax, 0x5e8a6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436148: sbb eax, 0x5ea23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f05: sbb eax, 0x5ea26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc8: sbb eax, 0x5eba3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d85: sbb eax, 0x5eba6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e48: sbb eax, 0x5ed23; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c05: sbb eax, 0x5ed26; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a8c: sbb eax, 0x5ee9f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc8: sbb eax, 0x5eea3; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b48: sbb eax, 0x5f023; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043588d: sbb eax, 0x5f09e; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a0b: sbb eax, 0x5f160; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358af: sbb eax, 0x5f2bc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043494f: sbb eax, 0x5fadc; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434625: sbb eax, 0x5fe06; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347bc: sbb eax, 0x5feaf; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004344a5: sbb eax, 0x5ff86; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434568: sbb eax, 0x60103; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434325: sbb eax, 0x60106; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e8: sbb eax, 0x60283; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004341a5: sbb eax, 0x60286; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434268: sbb eax, 0x60403; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434025: sbb eax, 0x60406; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e9: sbb eax, 0x60582; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ea5: sbb eax, 0x60586; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f68: sbb eax, 0x60703; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d25: sbb eax, 0x60706; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de8: sbb eax, 0x60883; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ba5: sbb eax, 0x60886; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c68: sbb eax, 0x60a03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a25: sbb eax, 0x60a06; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae8: sbb eax, 0x60b83; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004338a5: sbb eax, 0x60b86; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433968: sbb eax, 0x60d03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433725: sbb eax, 0x60d06; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e8: sbb eax, 0x60e83; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335a5: sbb eax, 0x60e86; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433668: sbb eax, 0x61003; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433425: sbb eax, 0x61006; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e8: sbb eax, 0x61183; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004332a5: sbb eax, 0x61186; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433368: sbb eax, 0x61303; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433125: sbb eax, 0x61306; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fac: sbb eax, 0x6147f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e8: sbb eax, 0x61483; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432d56: sbb eax, 0x61515; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c99: sbb eax, 0x615d2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433068: sbb eax, 0x61603; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432dcc: sbb eax, 0x6165f; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432bae: sbb eax, 0x616bd; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f2b: sbb eax, 0x61740; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ae3: sbb eax, 0x61788; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db9: sbb eax, 0x618b2; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431ac2: sbb eax, 0x627a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431a24: sbb eax, 0x62847; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431972: sbb eax, 0x628f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004318d4: sbb eax, 0x62997; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431822: sbb eax, 0x62a49; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431784: sbb eax, 0x62ae7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004316d2: sbb eax, 0x62b99; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431634: sbb eax, 0x62c37; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431582: sbb eax, 0x62ce9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004314e4: sbb eax, 0x62d87; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431432: sbb eax, 0x62e39; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431394: sbb eax, 0x62ed7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004312e2: sbb eax, 0x62f89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431244: sbb eax, 0x63027; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431192: sbb eax, 0x630d9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004310f9: sbb eax, 0x63172; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000431042: sbb eax, 0x63229; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430fa4: sbb eax, 0x632c7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430ef2: sbb eax, 0x63379; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430e54: sbb eax, 0x63417; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430da2: sbb eax, 0x634c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430d04: sbb eax, 0x63567; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430c52: sbb eax, 0x63619; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430bb4: sbb eax, 0x636b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430b02: sbb eax, 0x63769; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430a64: sbb eax, 0x63807; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004309b2: sbb eax, 0x638b9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430914: sbb eax, 0x63957; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430862: sbb eax, 0x63a09; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004307c4: sbb eax, 0x63aa7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430718: sbb eax, 0x63b53; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430627: sbb eax, 0x63c44; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430568: sbb eax, 0x63d03; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304fe: sbb eax, 0x63d6d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043040f: sbb eax, 0x63e5c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301d5: sbb eax, 0x63ed6; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043034a: sbb eax, 0x63f21; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300fb: sbb eax, 0x63fb0; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f0f2: sbb eax, 0x64fb9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042f054: sbb eax, 0x65057; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042efa2: sbb eax, 0x65109; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ef04: sbb eax, 0x651a7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ee52: sbb eax, 0x65259; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042edb4: sbb eax, 0x652f7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ed02: sbb eax, 0x653a9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ec64: sbb eax, 0x65447; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ebb2: sbb eax, 0x654f9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042eb14: sbb eax, 0x65597; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ea62: sbb eax, 0x65649; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e9c4: sbb eax, 0x656e7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e912: sbb eax, 0x65799; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e874: sbb eax, 0x65837; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e7c2: sbb eax, 0x658e9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e729: sbb eax, 0x65982; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e672: sbb eax, 0x65a39; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e5d4: sbb eax, 0x65ad7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e522: sbb eax, 0x65b89; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e484: sbb eax, 0x65c27; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e3d2: sbb eax, 0x65cd9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e334: sbb eax, 0x65d77; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e282: sbb eax, 0x65e29; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e1e4: sbb eax, 0x65ec7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e132: sbb eax, 0x65f79; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e094: sbb eax, 0x66017; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dfe2: sbb eax, 0x660c9; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042df44: sbb eax, 0x66167; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042de92: sbb eax, 0x66219; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042ddf4: sbb eax, 0x662b7; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dd48: sbb eax, 0x66363; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc57: sbb eax, 0x66454; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db98: sbb eax, 0x66513; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db2e: sbb eax, 0x6657d; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da3f: sbb eax, 0x6666c; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d97a: sbb eax, 0x66731; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc35: sbb eax, 0x67336; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbbb: sbb eax, 0x673b0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb2c: sbb eax, 0x6743f; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c921: sbb eax, 0x6764a; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7ef: sbb eax, 0x6777c; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c729: sbb eax, 0x67842; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6ab: sbb eax, 0x678c0; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c614: sbb eax, 0x67957; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c418: sbb eax, 0x67b53; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e7: sbb eax, 0x67c84; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d8: sbb eax, 0x67d93; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000046b8d9: sbb eax, 0x8b410000; add byte ptr [r11 - 0x78f0d008], r8b; mov esi, 0x8900002b; ret 0x349; 
0x00000000004244f2: sbb eax, 0x8d48c085; adc eax, 0x23834; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000440772: sbb eax, 0xc0bc0ff3; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000454e75: sbb eax, 0xd6ba0004; add dword ptr [rax], eax; add al, ch; mov esi, 0x89fffacc; ret 0xe283; 
0x0000000000414661: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045dbb2: sbb eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x481e; 
0x0000000000407cba: sbb eax, dword ptr [rax]; add byte ptr [rbx - 0x7bf0fe02], al; ret 0x1b; 
0x00000000004826ba: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000042bf37: sbb eax, eax; or eax, 1; ret; 
0x00000000004464f5: sbb eax, eax; sbb eax, -1; ret; 
0x000000000044cf71: sbb ebx, dword ptr [rax]; cld; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x73], 0x3d; adc byte ptr [rcx + 0xf480004], 0x44; ret; 
0x0000000000448f03: sbb ebx, edx; add byte ptr es:[rax + 0x39], cl; ret; 
0x000000000048d0f4: sbb ecx, dword ptr [rax - 0x73]; adc eax, 0x22f0a4; cmp byte ptr [rdx + rsi], 8; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x00000000004729c9: sbb ecx, dword ptr [rbp + 0x29]; ret 0x8948; 
0x0000000000450a7e: sbb ecx, dword ptr [rcx + 0x50895048]; push rsp; ret; 
0x0000000000403f1d: sbb ecx, dword ptr [rcx - 0x7d]; ret; 
0x0000000000493e61: sbb ecx, edi; inc dword ptr [rax]; sbb edi, ecx; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x0000000000404a19: sbb edi, dword ptr [rdx - 0x73740001]; and al, 0x8c; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x149; 
0x000000000048c11b: sbb edi, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000044e90b: sbb edi, ebx; jmp qword ptr [rsi - 0x70]; 
0x0000000000493e65: sbb edi, ecx; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x00000000004842c1: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000042b8e4: sbb esi, ebx; bsf eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x0000000000450a72: sbb qword ptr [rcx - 0x41f0b3b8], rcx; sbb cl, byte ptr [rdi]; mov esi, 0x48891b52; push rax; mov dword ptr [rax + 0x54], edx; ret; 
0x00000000004842c0: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004ab658: scasb al, byte ptr [rdi]; adc dh, bh; inc ecx; adc dh, bh; call rsp; 
0x000000000042afd2: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004196ae: scasb al, byte ptr [rdi]; add dword ptr [rdx], ebp; add bl, dh; ret; 
0x000000000043fa6e: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x000000000044b9c8: scasb al, byte ptr [rdi]; movabs al, byte ptr [0xe800000077ba0004]; push 0x61; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000046c66e: scasb al, byte ptr [rdi]; stosd dword ptr [rdi], eax; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000432c95: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432adf: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301d1: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f7: scasb al, byte ptr [rdi]; clc; lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000490364: scasb al, byte ptr [rdi]; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000043fb6d: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041670d: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000492885: scasd eax, dword ptr [rdi]; idiv edi; mov r8b, 0xf7; jmp qword ptr [rcx]; 
0x00000000004347bd: scasd eax, dword ptr [rdi]; inc byte ptr [rip + 0x14634900]; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048b8fb: scasd eax, dword ptr [rdi]; or byte ptr [rbx], ah; add byte ptr [rax], cl; mov byte ptr [rip + 0x2308a9], 8; ret; 
0x000000000045afce: scasd eax, dword ptr [rdi]; ret 0x148; 
0x0000000000411566: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x00000000004197f9: scasd eax, dword ptr [rdi]; ret 0x8948; 
0x00000000004483e3: scasd eax, dword ptr [rdi]; ret 0xf8e9; 
0x00000000004a39d9: scasd eax, dword ptr [rdi]; cld; call qword ptr [rax - 0x50]; 
0x00000000004a39d1: scasd eax, dword ptr [rdi]; cld; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; call qword ptr [rax - 0x50]; 
0x00000000004a39c9: scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax - 0x50]; 
0x00000000004a39fd: scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax]; 
0x000000000041106a: scasd eax, dword ptr [rdi]; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x000000000041475e: scasd eax, dword ptr [rdi]; nop; xor eax, eax; ret; 
0x000000000040e449: scasd eax, dword ptr [rdi]; ret; 
0x000000000044bd0c: setae al; ret; 
0x000000000045acfa: sete dh; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000045acf9: sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000488355: setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000041878c: setne al; neg eax; ret; 
0x0000000000474a54: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440c14: shl byte ptr [rax + 0x48], 1; clc; sub rax, rdx; vzeroupper; ret; 
0x000000000042b81b: shl byte ptr [rax + 0x48], 1; clc; vzeroupper; ret; 
0x00000000004749e6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440ba6: shl byte ptr [rax], 0x48; add eax, edi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b7db: shl byte ptr [rax], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000493eac: shl byte ptr [rax], 1; stc; jmp rax; 
0x000000000049424c: shl byte ptr [rbx - 0x5aef0007], 0xf9; jmp qword ptr [rax - 0x5a]; 
0x000000000047f013: shl byte ptr [rbx], 1; add byte ptr [rbx + 0x23d01405], cl; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x000000000047f019: shl byte ptr [rbx], 1; add byte ptr [rcx - 0x75], al; adc edi, dword ptr [rcx]; ret 0x840f; 
0x0000000000448199: shl byte ptr [rip + 0x3fffc00], cl; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000475752: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x000000000044673f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x0000000000444ae3: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000440295: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000042d74b: shl byte ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042d762: shl byte ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x0000000000473357: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000473346: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000042d641: shl byte ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000049fed0: shl dword ptr [rax + rax], 0; add byte ptr [rax], al; add byte ptr [rax], al; ret 0x24; 
0x000000000047f21b: shl dword ptr [rbx], 1; add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x00000000004a78e8: shl dword ptr [rdi - 5], 1; ret; 
0x0000000000444adb: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000473342: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000044659b: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000042d6c6: shl dword ptr [rsi + 0xf], 0xef; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d77d: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x2373; 
0x000000000042d766: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x3a73; 
0x000000000042d74f: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x5173; 
0x000000000042c20b: shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042d6e1: shl dword ptr [rsi + 0xf], 1; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042b16c: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000042d5a1: shl dword ptr [rsi + 0xf], cl; out dx, eax; shl dword ptr [rsi + 0xf], 1; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000448f04: shl dword ptr [rsi], cl; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047f8a2: shl eax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x000000000044e031: shl eax, cl; pop rbp; pop r12; ret; 
0x0000000000440a7b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044e02d: shl ecx, 3; pop rbx; shl eax, cl; pop rbp; pop r12; ret; 
0x0000000000482d8c: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d17: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482ce6: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044041a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044bf32: shl edx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047f8f4: shl esi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000484493: shl esi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000482d8b: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d16: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482ce5: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000047f8a1: shl rax, 4; mov rax, qword ptr [rdx + rax]; mov edx, 0; cmp rax, -1; cmove rax, rdx; ret; 
0x0000000000440a7a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000440419: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044bf31: shl rdx, 4; mov rdx, qword ptr [rcx + rdx]; lea rcx, [rip - 0x60]; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 8], rdx; ret; 
0x000000000047f8f3: shl rsi, 4; cmp rcx, qword ptr [rdi + rsi]; jae 0x7f8a1; xor eax, eax; ret; 
0x0000000000484492: shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000482d84: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d10: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000482d83: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000482d0f: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004235e3: shr al, 0x57; ret; 
0x000000000044ffad: shr al, 0xf5; add al, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x00000000004754e7: shr bl, 0xb5; call 0x4be30; nop; mov eax, 0x3f; syscall; 
0x000000000048d201: shr bl, 0xf6; nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000049422c: shr byte ptr [rbp - 0x66ef0007], 1; stc; jmp rax; 
0x0000000000400a9d: shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax + rax]; pop rbp; ret; 
0x0000000000400adf: shr byte ptr [rbx - 0x1f00ff95], 1; nop dword ptr [rax]; pop rbp; ret; 
0x0000000000495e60: shr byte ptr [rbx - 5], 1; push rsp; push 0x6bb0fffb; sti; jmp rax; 
0x0000000000425e9f: shr byte ptr [rcx], 0xc8; ret; 
0x000000000042444a: shr byte ptr [rcx], cl; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000457878: shr byte ptr [rcx], cl; ret; 
0x00000000004b0f30: shr byte ptr [rdi], 1; cli; jmp qword ptr [rdi + 0x11]; 
0x0000000000473f62: shr byte ptr [rdx], 0x48; lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000493e9c: shr byte ptr [rip + 0x2ef0fff9], 1; stc; call qword ptr [rax]; 
0x00000000004674a8: shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000048cb52: shr cl, 1; ret 0xfffe; 
0x000000000048c65f: shr cl, cl; ret; 
0x0000000000444b2e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000448089: shr eax, 0xc; and eax, 0xf; movsxd rcx, dword ptr [rsi + rax*4]; add rcx, rsi; jmp rcx; 
0x0000000000448119: shr eax, 0xc; mov edx, eax; and edx, 0xf; movsxd rax, dword ptr [rsi + rdx*4]; add rax, rsi; jmp rax; 
0x00000000004480ba: shr eax, 0xe; and eax, 0x3fc00; pop rbx; ret; 
0x000000000047440b: shr eax, 2; ret; 
0x0000000000474913: shr eax, 2; vzeroupper; ret; 
0x000000000040eabf: shr eax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000448105: shr eax, 6; and eax, 0x3fffc00; pop rbx; ret; 
0x000000000041ec8e: shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000482e9c: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e21: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000482df0: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000482e9b: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e20: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000482def: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000047440a: shr rax, 2; ret; 
0x0000000000474912: shr rax, 2; vzeroupper; ret; 
0x000000000040eabe: shr rax, 3; lea r12, [rbx + rax*8 + 8]; nop word ptr [rax + rax]; call qword ptr [rbx]; 
0x0000000000482e94: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e1a: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000482e93: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000482e19: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000049f0a1: sldt word ptr [rax]; mov ebp, 0xc000000f; sldt word ptr [rax]; ret; 
0x000000000045e635: sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000049f0a9: sldt word ptr [rax]; ret; 
0x000000000046c748: stosb byte ptr [rdi], al; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000462372: stosb byte ptr [rdi], al; fdiv st(7), st(0); jmp qword ptr [rsi + 0x2e]; 
0x0000000000447bcb: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000048afb3: stosb byte ptr [rdi], al; or byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; add al, 0x87; add rax, r15; jmp rax; 
0x00000000004a9536: stosb byte ptr [rdi], al; xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x00000000004b3ac1: stosb byte ptr [rdi], al; cld; jmp qword ptr [rsi]; 
0x0000000000494f59: stosb byte ptr [rdi], al; cli; inc dword ptr [rax - 0x2f000555]; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x000000000044d362: stosb byte ptr [rdi], al; cmc; add byte ptr es:[rbp - 0xcf98b40], al; ret; 
0x00000000004b00f9: stosb byte ptr [rdi], al; stc; call qword ptr [rdi]; 
0x000000000046c66f: stosd dword ptr [rdi], eax; and al, 0; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000474514: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000473854: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000046863e: stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000041ec93: stosd dword ptr [rdi], eax; pop rbx; ret; 
0x00000000004737b5: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000494068: stosd dword ptr [rdi], eax; xchg esi, eax; stc; dec dword ptr [rbx - 0x69]; stc; call rax; 
0x0000000000494f5d: stosd dword ptr [rdi], eax; cli; call rax; 
0x0000000000494f5d: stosd dword ptr [rdi], eax; cli; call rax; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000411e0c: stosd dword ptr [rdi], eax; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x00000000004a8ecc: stosd dword ptr [rdi], eax; ret; 
0x0000000000494225: stosd dword ptr [rdi], eax; stc; inc dword ptr [rax - 0x2f000654]; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x000000000041ec92: stosq qword ptr [rdi], rax; pop rbx; ret; 
0x00000000004abbd4: sub al, 0; add byte ptr [rax], al; mov esp, 0xe4000004; xchg esp, eax; cmc; call rsp; 
0x00000000004b4498: sub al, 0; add byte ptr [rax], al; or byte ptr [rbp - 0x15f00000], 0xfc; jmp qword ptr [rcx]; 
0x00000000004491ac: sub al, 0x10; add al, ch; pop rsp; cmp byte ptr [rcx], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x00000000004b4ad4: sub al, 0x10; std; call qword ptr [rax]; 
0x0000000000449b53: sub al, 0x27; add byte ptr [rbp - 0x47e98a40], al; add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000495158: sub al, 0x2f; sti; jmp qword ptr [rax]; 
0x0000000000495150: sub al, 0x2f; sti; jmp qword ptr [rcx + 0x30]; 
0x0000000000495160: sub al, 0x2f; sti; jmp qword ptr [rdi]; 
0x00000000004af948: sub al, 0x42; add byte ptr [rax], al; je 0xaf8d3; stc; call qword ptr [rcx + 1]; 
0x0000000000481cf6: sub al, 0x48; add esp, 0x38; ret; 
0x0000000000447e02: sub al, 0x72; add cl, byte ptr [rax + 0x77f8c50f]; ret; 
0x00000000004af7e4: sub al, 0x7a; stc; call rsp; 
0x000000000042cd93: sub al, 0xa; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004ac1a9: sub al, 0xf6; call qword ptr [rax]; 
0x00000000004ac1bd: sub al, 0xf6; call qword ptr [rdx]; 
0x00000000004ac1d1: sub al, 0xf6; jmp qword ptr [rax]; 
0x0000000000493e99: sub al, 0xf9; call rax; 
0x0000000000493e99: sub al, 0xf9; call rax; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x0000000000494b99: sub al, 0xfa; call qword ptr [rax]; 
0x0000000000494d95: sub al, 0xfa; jmp qword ptr [rax]; 
0x0000000000494c15: sub al, 0xfa; jmp qword ptr [rdx + 0x2c]; 
0x0000000000494c19: sub al, 0xfa; jmp rdx; 
0x0000000000497305: sub al, 0xfc; push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x0000000000497301: sub al, 0xfc; push qword ptr [rax]; sub al, 0xfc; push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x00000000004732c0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004946f0: sub al, 3; cli; call rdx; 
0x00000000004946f0: sub al, 3; cli; call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x0000000000466d75: sub al, 4; add byte ptr [rcx + 0xf], al; xchg esp, eax; ret; 
0x00000000004946e8: sub al, 4; cli; call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; 
0x0000000000431584: sub al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000412854: sub al, byte ptr [eax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x0000000000431823: sub al, byte ptr [r14]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418710: sub al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004600dd: sub al, byte ptr [rax]; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000412855: sub al, byte ptr [rax]; add byte ptr [rdx + rax - 0xd], dh; ret; 
0x00000000004191b8: sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x0000000000419178: sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x0000000000419158: sub al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x00000000004186a6: sub al, byte ptr [rax]; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000041a0c6: sub al, byte ptr [rax]; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000041965a: sub al, byte ptr [rax]; test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x0000000000418615: sub al, byte ptr [rax]; ret; 
0x000000000042440a: sub al, byte ptr [rdx]; add bh, dh; ret 0; 
0x0000000000424444: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x229d2; cmovne rax, rdx; ret; 
0x000000000042474b: sub al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22a7b; cmovne rax, rdx; ret; 
0x0000000000431786: sub al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041870f: sub al, byte ptr ss:[rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004186a5: sub al, byte ptr ss:[rax]; add dword ptr [rip + 0x2a3665], 1; ret; 
0x000000000042c155: sub al, ch; std; xlatb; ret; 
0x0000000000493e91: sub bh, cl; call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000494ca9: sub bh, dl; call ptr [rsi + 0x2efffa29]; sub edx, edi; call rsp; 
0x0000000000494d65: sub bh, dl; call qword ptr [rax]; 
0x0000000000494da5: sub bh, dl; inc dword ptr [rax]; sub bh, dl; push qword ptr [rax + 0x29]; cli; call rax; 
0x0000000000494ba9: sub bh, dl; jmp rax; 
0x0000000000494da9: sub bh, dl; push qword ptr [rax + 0x29]; cli; call rax; 
0x000000000041149d: sub byte ptr [r13 - 0x667bf02e], r8b; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000431a25: sub byte ptr [r14], r8b; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000411407: sub byte ptr [r8 + 1], r9b; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000477227: sub byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000477226: sub byte ptr [rax + 0x39], r9b; ret 0x870f; 
0x0000000000483883: sub byte ptr [rax + 1], cl; ret 0x1474; 
0x0000000000411408: sub byte ptr [rax + 1], cl; ror dword ptr [rcx - 0x77], 0x47; and byte ptr [rcx - 0x77], cl; xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x0000000000451482: sub byte ptr [rax - 0x75], cl; je 0x514ab; mov rdi, qword ptr [rsp + 0x38]; call rbx; 
0x0000000000455e5f: sub byte ptr [rax - 0x75], cl; je 0x55e88; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x000000000045709f: sub byte ptr [rax - 0x75], cl; je 0x570c8; mov rdi, qword ptr [rsp + 0x40]; call rbx; 
0x0000000000450d6e: sub byte ptr [rax - 0x75], cl; jl 0x50d97; and byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x0000000000471059: sub byte ptr [rax - 0x75], cl; xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041c943: sub byte ptr [rax - 0x77], cl; je 0x1c96c; and byte ptr [rcx + rcx*4 + 0x5c], cl; and al, 0x10; mov qword ptr [rsp + 8], rax; call rcx; 
0x0000000000422844: sub byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x0000000000471a16: sub byte ptr [rax - 0x77], cl; push rax; sbb byte ptr [rcx + 0x5bc0310b], cl; ret; 
0x000000000046f9e4: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000048c15c: sub byte ptr [rax - 0x77], cl; ret; 
0x0000000000404a63: sub byte ptr [rax - 0x7d], cl; ret; 
0x000000000044877b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x487a4; add rsp, 0x20; pop rbx; ret; 
0x0000000000449533: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49549; add rsp, 0x28; ret; 
0x0000000000449651: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49709; add rsp, 0x68; ret; 
0x0000000000449763: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499e4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449af3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000044a462: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4a477; add rsp, 0x28; ret; 
0x000000000045ac6b: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5ac76; add rsp, 0x18; ret; 
0x000000000045aeb3: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688ae: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x688bc; add rsp, 0xd8; ret; 
0x0000000000475666: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75729; add rsp, 0x78; ret; 
0x0000000000475778: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004757fb: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75809; movzx eax, al; add rsp, 0x58; ret; 
0x00000000004758aa: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000481bf6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81c02; add rsp, 0x20; pop rbx; ret; 
0x0000000000481cf1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481db1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f12: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821e1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8220e; add rsp, 0x68; ret; 
0x000000000048421d: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8425e; leave; ret; 
0x00000000004847e4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x848a4; add rsp, 0x30; pop rbx; ret; 
0x0000000000484ec9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fac: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x84fc4; add rsp, 0x38; ret; 
0x0000000000488307: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000040f7ae: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xf7bc; add rsp, 0xd8; ret; 
0x000000000040dc34: sub byte ptr [rax], al; add byte ptr [rax], al; mov eax, r8d; jne 0xdc5c; add rsp, 0x118; ret; 
0x000000000041075a: sub byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 8], rax; xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004ad37c: sub byte ptr [rax], al; add byte ptr [rax], al; sbb al, 0; add byte ptr [rdi + rdx*4 - 0xa], bh; call qword ptr [rdi]; 
0x00000000004b1840: sub byte ptr [rax], al; add byte ptr [rax], al; sub byte ptr [rcx], ah; add byte ptr [rax - 0xb], ch; std; call rdx; 
0x000000000044c635: sub byte ptr [rax], al; je 0x4c648; test rdx, rdx; je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x0000000000477e7e: sub byte ptr [rbp + rcx*4 + 0x15], cl; pushfq; ret 2; 
0x00000000004b5c44: sub byte ptr [rbp - 0x5ef80000], ah; std; jmp qword ptr [rax]; 
0x000000000041149e: sub byte ptr [rbp - 0x667bf02e], al; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000048f551: sub byte ptr [rbx + 0x22ce3005], cl; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f550: sub byte ptr [rbx + 0x22ce3005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f441: sub byte ptr [rbx + 0x22cf4005], cl; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x000000000048f440: sub byte ptr [rbx + 0x22cf4005], r9b; add byte ptr [rbp - 0xcfb8b40], al; ret; 
0x0000000000448bc4: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000481b1b: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aa9: sub byte ptr [rbx + rcx*4 + 0x5c], cl; and al, 0x30; mov rdx, qword ptr [rsp + 0x38]; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000488073: sub byte ptr [rbx - 0x26], dh; mov eax, 1; ret; 
0x0000000000488072: sub byte ptr [rbx - 0x26], sil; mov eax, 1; ret; 
0x0000000000494f5c: sub byte ptr [rbx - 0x532f0006], 0xfa; jmp qword ptr [rax]; 
0x00000000004b4844: sub byte ptr [rcx + 0x6980000], dl; std; jmp qword ptr [rbp]; 
0x000000000041f34e: sub byte ptr [rcx + rax], 1; add rsp, 0x18; mov rax, rdx; pop rbx; pop rbp; ret; 
0x0000000000482676: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x00000000004b1118: sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x0000000000494d6c: sub byte ptr [rcx], 0xfa; call qword ptr [rax]; 
0x00000000004b1844: sub byte ptr [rcx], ah; add byte ptr [rax - 0xb], ch; std; call rdx; 
0x000000000044bfac: sub byte ptr [rcx], al; ret; 
0x00000000004b4978: sub byte ptr [rcx], cl; std; call qword ptr [rax]; 
0x0000000000478a05: sub byte ptr [rcx], dh; imul al; jnp 0x78a85; clc; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000475829: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov esi, 0x5401; mov eax, ecx; syscall; 
0x00000000004a39d4: sub byte ptr [rdi - 0x507f0004], 0xfc; call qword ptr [rax - 0x50]; 
0x00000000004a39c4: sub byte ptr [rdi - 0x507f0004], 0xfc; jmp qword ptr [rax - 0x50]; 
0x00000000004a39f8: sub byte ptr [rdi - 0x507f0004], 0xfc; jmp qword ptr [rax]; 
0x00000000004af678: sub byte ptr [rdi - 7], dl; jmp qword ptr [rbx + 0x17]; 
0x00000000004015b3: sub byte ptr [rdi], al; add dword ptr [rax], eax; add byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004af644: sub byte ptr [rdi], bh; add byte ptr [rax], al; mov byte ptr [rbp - 7], cl; jmp qword ptr [rdi + 6]; 
0x0000000000421666: sub byte ptr [rdi], cl; test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000493f50: sub byte ptr [rdx - 7], 0xff; jo 0x93fc1; stc; jmp qword ptr [rax + 0x6c]; 
0x000000000042456a: sub byte ptr [rdx], al; add bh, dh; ret 0; 
0x0000000000431974: sub byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000493e89: sub cl, bh; call qword ptr [rax + 0x29]; 
0x0000000000468066: sub cl, bpl; ret 0xffe8; 
0x000000000040ebad: sub cl, byte ptr [rax - 0x77]; ror byte ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000048ce42: sub cl, byte ptr [rsi]; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000468067: sub cl, ch; ret 0xffe8; 
0x000000000045e134: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000467a8d: sub dh, al; add byte ptr [rip - 0x11ac17], ch; jmp qword ptr [rsi + 0x2e]; 
0x0000000000485492: sub dh, byte ptr [rbx + riz]; ret; 
0x00000000004ac0e9: sub dh, dh; jmp qword ptr [rax]; 
0x000000000047575e: sub dword ptr [rax + 0x101], edi; syscall; 
0x0000000000477542: sub dword ptr [rax + 0xf000002], -0x7b; ret; 
0x000000000048aec6: sub dword ptr [rax - 0x80], eax; call qword ptr [rax + 0x74]; 
0x00000000004237c4: sub dword ptr [rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0x23282; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000424354: sub dword ptr [rax], eax; adc byte ptr [rax - 0x73], cl; adc eax, 0xfffffa62; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004ae069: sub dword ptr [rax], eax; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x000000000041f794: sub dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000046b9a2: sub dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004246dd: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x227d9; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x000000000042459d: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22909; lea rax, [rip + 0x22862]; cmovne rax, rdx; ret; 
0x000000000042443d: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22a79; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424744: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22ac2; lea rax, [rip + 0x22a7b]; cmovne rax, rdx; ret; 
0x0000000000424604: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22bf2; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004244a4: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22d62; lea rax, [rip + 0x22d1b]; cmovne rax, rdx; ret; 
0x0000000000424723: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x22f23; lea rax, [rip + 0x22ecc]; cmovne rax, rdx; ret; 
0x00000000004245e3: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23053; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000424543: sub dword ptr [rax], eax; add cl, byte ptr [rax - 0x73]; adc eax, 0x23973; lea rax, [rip + 0x2390c]; cmovne rax, rdx; ret; 
0x000000000042442c: sub dword ptr [rax], eax; add dh, byte ptr [rax + rcx - 9]; ret 0; 
0x0000000000422d2b: sub dword ptr [rax], eax; add dword ptr [rax + rbp + 0x48], esi; test eax, eax; je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x000000000041f76e: sub dword ptr [rax], eax; lea rax, [rip - 0x1497]; mov qword ptr [rip + 0x29a0ea], rax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f77c: sub dword ptr [rax], eax; lea rax, [rip - 0xa75]; mov qword ptr [rip + 0x29a0d4], rax; ret; 
0x000000000041f78a: sub dword ptr [rax], eax; ret; 
0x000000000046e914: sub dword ptr [rdi + 0x29], esi; movzx eax, al; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000447051: sub dword ptr [rdi], ecx; adc dword ptr [rcx - 0x10], esi; movups xmmword ptr [rcx - 0x20], xmm7; movups xmmword ptr [rcx - 0x30], xmm8; movups xmmword ptr [r11], xmm4; ret; 
0x000000000046e916: sub dword ptr [rdi], ecx; mov dh, 0xc0; movsxd rax, dword ptr [rsi + rax*4]; add rax, rsi; jmp rax; 
0x0000000000412e68: sub dword ptr [rdx], 0x4f0f4800; ret 0x8948; 
0x00000000004245a4: sub dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x22862; cmovne rax, rdx; ret; 
0x000000000042d576: sub dword ptr [rip - 0xcfffffe], 0xf; outsd dx, dword ptr [rsi]; push rdi; ret; 
0x000000000042e283: sub dword ptr [rsi + 6], ebx; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000453ce9: sub dword ptr [rsi], 0x2fba0004; add al, byte ptr [rax]; add al, ch; fdivp st(2); jmp qword ptr [rsi + 0xf]; 
0x00000000004318d6: sub dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000040dbcd: sub dword ptr [rsp + 0xd0], eax; movaps xmmword ptr [rsp + 0xe0], xmm0; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd5: sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbdd: sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000042bee7: sub eax, -1; jne 0x2bef0; vzeroupper; ret; 
0x0000000000422dba: sub eax, 0x10; ret; 
0x000000000046f0aa: sub eax, 0x20; cmp eax, 0x29; ja 0x6f140; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x0000000000494b95: sub eax, 0x2c90fffa; cli; call qword ptr [rax]; 
0x0000000000494d91: sub eax, 0x2ca0fffa; cli; jmp qword ptr [rax]; 
0x0000000000494c11: sub eax, 0x2ce2fffa; cli; jmp qword ptr [rdx + 0x2c]; 
0x0000000000494c0d: sub eax, 0x2d62fffa; cli; jmp rdx; 
0x0000000000493e9d: sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x0000000000481577: sub eax, 0x3349646c; push rbp; or byte ptr [rcx + 0x33], cl; add byte ptr [r8 + 9], r9b; ret 0x840f; 
0x00000000004314e6: sub eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004668e5: sub eax, 0x83000000; ret 0x8b01; 
0x0000000000469514: sub eax, 0x83000000; ret; 
0x00000000004a953a: sub eax, 0x8acc8c6; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000043ce4f: sub eax, 0x8b0005b5; or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004244ab: sub eax, 0x8d480002; add eax, 0x22d1b; cmovne rax, rdx; ret; 
0x0000000000453eea: sub eax, 0xbeba0004; add dword ptr [rax], eax; add al, ch; fdiv st(2), st(0); jmp qword ptr [rsi + 0xf]; 
0x00000000004a98d4: sub eax, 0xddb680a7; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x0000000000467a90: sub eax, 0xffee53e9; jmp qword ptr [rsi + 0x2e]; 
0x000000000042bfdf: sub eax, 0xffff; jne 0x2bef0; ret; 
0x0000000000458764: sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x0000000000446974: sub eax, 1; ret; 
0x00000000004021f2: sub eax, 3; cmp eax, 0xa; ja 0x1e5f; movsxd rax, dword ptr [r13 + rax*4]; add rax, r13; jmp rax; 
0x000000000044c729: sub eax, 3; cmp rax, 0x1e; ja 0x4c754; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d44e: sub eax, 4; cmp rax, 0x16; ja 0x4d4a0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000481a46: sub eax, dword ptr [0]; ret; 
0x000000000040389d: sub eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000400ddf: sub eax, dword ptr [rax]; add rsp, 0x88; pop rbx; ret; 
0x0000000000401187: sub eax, dword ptr [rax]; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0xc]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004004cc: sub eax, dword ptr [rax]; nop; ret; 
0x0000000000401bef: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045e0d6: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x0000000000418fce: sub eax, dword ptr [rdi + 0x18]; ret; 
0x000000000042460b: sub eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x22bab; cmovne rax, rdx; ret; 
0x0000000000411093: sub eax, dword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004182e3: sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004237c2: sub eax, dword ptr [rsi + 0x48100029]; lea edx, [rip + 0x23282]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x00000000004316d4: sub eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000401551: sub eax, dword ptr [rsp + rax - 0x77d00]; je 0x162b; add rsp, 0x98; ret; 
0x0000000000446add: sub eax, eax; cmp eax, ecx; jle 0x46b18; movsxd rax, ecx; ret; 
0x0000000000480eb4: sub eax, eax; ret; 
0x000000000042bf33: sub eax, ecx; je 0x2bf40; sbb eax, eax; or eax, 1; ret; 
0x00000000004179b9: sub eax, ecx; lea eax, [r8 - 1]; ret; 
0x0000000000484510: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000471bf9: sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000484490: sub eax, ecx; shl rsi, cl; mov qword ptr [rdi], rsi; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000425bdc: sub eax, ecx; ret; 
0x000000000047451e: sub eax, edi; shr rax, 2; ret; 
0x0000000000440a89: sub eax, edi; ret; 
0x00000000004845f3: sub eax, edx; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000422dae: sub eax, edx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x22da0; sub rax, 0x10; ret; 
0x0000000000474910: sub eax, edx; shr rax, 2; vzeroupper; ret; 
0x0000000000416aa9: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b22: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178b2: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471ae7: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff6d: sub eax, edx; sub rcx, rdx; cmp rax, rcx; jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000041067b: sub eax, edx; sub rdi, rdx; cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000470d02: sub eax, edx; sub rsi, rdx; cmp rax, rsi; jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000041830b: sub eax, edx; ret; 
0x000000000042befc: sub eax, edx; vzeroupper; ret; 
0x0000000000484650: sub eax, esi; mov qword ptr [rdi + 8], r9; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000446b3d: sub eax, esi; ret; 
0x00000000004845f2: sub eax, r10d; mov dword ptr [rdx], eax; mov eax, 2; ret; 
0x0000000000446adc: sub eax, r8d; cmp eax, ecx; jle 0x46b18; movsxd rax, ecx; ret; 
0x0000000000480eb3: sub eax, r8d; ret; 
0x0000000000413d00: sub ebp, eax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000467418: sub ebp, ecx; cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x00000000004128d6: sub ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x00000000004a65f5: sub ebx, dword ptr [rbx - 0xb]; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000428935: sub ebx, edx; jbe 0x28944; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a095: sub ebx, edx; jbe 0x2a0a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b075: sub ebx, edx; jbe 0x2b084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044ce18: sub ecx, dword ptr [rax - 0x75]; push rax; or dh, dh; ret 0x8902; 
0x0000000000474c64: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; shr rax, 2; vzeroupper; ret; 
0x0000000000473aa4: sub ecx, dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x000000000048806d: sub ecx, dword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x0000000000493e8d: sub ecx, edi; push qword ptr [rax + 0x2a]; stc; call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000416706: sub ecx, edx; cmp rax, rcx; jbe 0x167c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041692e: sub ecx, edx; cmp rax, rcx; jbe 0x169c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416aac: sub ecx, edx; cmp rax, rcx; jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b25: sub ecx, edx; cmp rax, rcx; jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178b5: sub ecx, edx; cmp rax, rcx; jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041794c: sub ecx, edx; cmp rax, rcx; jbe 0x17970; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471aea: sub ecx, edx; cmp rax, rcx; jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff70: sub ecx, edx; cmp rax, rcx; jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000046b514: sub ecx, esp; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x000000000042dd43: sub edi, 0x20; lea r11, [rip + 0x66363]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430622: sub edi, 0x40; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430563: sub edi, 0x40; lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc52: sub edi, 0x40; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db93: sub edi, 0x40; lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000484456: sub edi, eax; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000004601ed: sub edi, ebx; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000413ab0: sub edi, ecx; cmp rax, rdi; jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000493e95: sub edi, ecx; push qword ptr [rax - 0x2f0006d4]; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x0000000000494c21: sub edi, edx; call rdx; 
0x000000000041067e: sub edi, edx; cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000494ba1: sub edi, edx; inc dword ptr [rax]; sub edi, edx; push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x0000000000494d9d: sub edi, edx; jmp qword ptr [rax]; 
0x0000000000494c1d: sub edi, edx; jmp qword ptr [rdx + 0x2b]; 
0x000000000043745f: sub edi, edx; lea r11, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043494b: sub edi, edx; lea r11, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000494ba5: sub edi, edx; push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x00000000004370fe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f7e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dfe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c7e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436afe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043697e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367fe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043667e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364fe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043637e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361fe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043607e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435efe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d7e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bfe: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a85: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043461e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043449e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043431e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043419e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043401e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e9e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d1e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b9e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a1e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043389e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043371e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043359e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043341e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043329e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043311e: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fa5: sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a9002: sub edi, esi; int 0x6b; ret; 
0x00000000004b3371: sub edi, esp; call qword ptr [rax + 5]; 
0x0000000000497309: sub edi, esp; jmp qword ptr [rax]; 
0x000000000045fcb1: sub edi, esp; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000432d51: sub edx, 0x40; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c91: sub edx, 0x40; sfence; lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301cd: sub edx, 0x40; sfence; lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418310: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000418305: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000471cfb: sub edx, dword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000471d11: sub edx, dword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x000000000042b11d: sub edx, eax; jbe 0x2b3c0; add rax, rdi; add rax, rcx; ret; 
0x000000000042b384: sub edx, eax; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b394: sub edx, eax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b3a4: sub edx, eax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3b4: sub edx, eax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044468c: sub edx, ecx; lea r11, [rip + 0x5095b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044406c: sub edx, ecx; lea r11, [rip + 0x50efb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000494d6d: sub edx, edi; call qword ptr [rax]; 
0x0000000000494bad: sub edx, edi; call qword ptr [rsi + 0x29]; 
0x0000000000494dad: sub edx, edi; call rax; 
0x0000000000494cb1: sub edx, edi; call rsp; 
0x0000000000494b71: sub edx, edi; jmp qword ptr [rax]; 
0x000000000041ec86: sub edx, edi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x0000000000494bf1: sub edx, edi; push rdx; xor dl, bh; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x000000000045dd18: sub edx, esi; call qword ptr [rbx + 0x38]; 
0x0000000000413e37: sub edx, esi; cmp r12, rdx; jbe 0x14020; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x00000000004111db: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004132af: sub edx, esi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000469232: sub edx, esi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043055f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db8f: sub esi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000046b9d5: sub esi, ecx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004164af: sub esi, edx; cmp rax, rsi; jbe 0x16510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000470d05: sub esi, edx; cmp rax, rsi; jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000471b84: sub esi, edx; cmp rax, rsi; jbe 0x71ba0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000437101: sub esi, edx; lea r11, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f81: sub esi, edx; lea r11, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e01: sub esi, edx; lea r11, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c81: sub esi, edx; lea r11, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b01: sub esi, edx; lea r11, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436981: sub esi, edx; lea r11, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436801: sub esi, edx; lea r11, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436681: sub esi, edx; lea r11, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436501: sub esi, edx; lea r11, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436381: sub esi, edx; lea r11, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436201: sub esi, edx; lea r11, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436081: sub esi, edx; lea r11, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f01: sub esi, edx; lea r11, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d81: sub esi, edx; lea r11, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c01: sub esi, edx; lea r11, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a88: sub esi, edx; lea r11, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434621: sub esi, edx; lea r11, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004344a1: sub esi, edx; lea r11, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434321: sub esi, edx; lea r11, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004341a1: sub esi, edx; lea r11, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434021: sub esi, edx; lea r11, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ea1: sub esi, edx; lea r11, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d21: sub esi, edx; lea r11, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ba1: sub esi, edx; lea r11, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a21: sub esi, edx; lea r11, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004338a1: sub esi, edx; lea r11, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433721: sub esi, edx; lea r11, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335a1: sub esi, edx; lea r11, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433421: sub esi, edx; lea r11, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004332a1: sub esi, edx; lea r11, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433121: sub esi, edx; lea r11, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fa8: sub esi, edx; lea r11, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043745c: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434948: sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048a773: sub esp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000047fa06: sub esp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000004687b2: sub esp, 0x80; call 0x4bd40; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000475387: sub esp, 0x80; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x000000000045c9a7: sub esp, 0x80; call 0x4bd40; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000492431: sub esp, 8; add rsp, 8; ret; 
0x000000000048d176: sub esp, 8; call 0xdc70; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047ba8b: sub esp, 8; call qword ptr [rip + 0x23e78c]; xor eax, eax; add rsp, 8; ret; 
0x00000000004753b3: sub esp, 8; syscall; 
0x00000000004137bb: sub esp, esi; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x00000000004ae068: sub qword ptr [rax], r8; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x0000000000428934: sub r11, rdx; jbe 0x28944; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a094: sub r11, rdx; jbe 0x2a0a4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042b074: sub r11, rdx; jbe 0x2b084; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004137ba: sub r12, r14; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000046b9d4: sub r14, rcx; mov rsi, rcx; mov rdi, r15; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x00000000004601ec: sub r15, r11; mov rsi, r11; mov rdi, r14; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x000000000045fcb0: sub r15, r12; mov rdx, r15; call qword ptr [rax + 0x38]; 
0x0000000000411092: sub r8, qword ptr [rsi + 0x10]; add rsi, 0x58; mov rax, qword ptr [rsi + 8]; sar r8, 2; mov qword ptr [rsi], rax; call qword ptr [rbp + 0x30]; 
0x00000000004179b8: sub r8, rcx; lea eax, [r8 - 1]; ret; 
0x0000000000471bf8: sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret; 
0x0000000000422db9: sub rax, 0x10; ret; 
0x0000000000446973: sub rax, 1; ret; 
0x000000000044c728: sub rax, 3; cmp rax, 0x1e; ja 0x4c754; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000044d44d: sub rax, 4; cmp rax, 0x16; ja 0x4d4a0; movsxd rax, dword ptr [rbx + rax*4]; add rax, rbx; jmp rax; 
0x0000000000481a45: sub rax, qword ptr [0]; ret; 
0x0000000000418fcd: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000481a44: sub rax, qword ptr fs:[0]; ret; 
0x0000000000485222: sub rax, r8; ret; 
0x000000000042bf32: sub rax, rcx; je 0x2bf40; sbb eax, eax; or eax, 1; ret; 
0x000000000047451d: sub rax, rdi; shr rax, 2; ret; 
0x0000000000440a88: sub rax, rdi; ret; 
0x0000000000422dad: sub rax, rdx; movzx edx, byte ptr [rcx + rax]; cmp dl, r8b; jne 0x22da0; sub rax, 0x10; ret; 
0x000000000047490f: sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000416aa8: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b21: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178b1: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471ae6: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff6c: sub rax, rdx; sub rcx, rdx; cmp rax, rcx; jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000041067a: sub rax, rdx; sub rdi, rdx; cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000470d01: sub rax, rdx; sub rsi, rdx; cmp rax, rsi; jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000446a43: sub rax, rdx; ret; 
0x0000000000440adf: sub rax, rdx; vzeroupper; ret; 
0x0000000000446b3c: sub rax, rsi; ret; 
0x0000000000413cff: sub rbp, rax; mov rax, rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000048806c: sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x000000000046b513: sub rcx, r12; mov r14, rcx; mov qword ptr [rbp - 0x4c8], rcx; sar r14, 2; mov rdx, r14; call qword ptr [rax + 0x38]; 
0x0000000000416705: sub rcx, rdx; cmp rax, rcx; jbe 0x167c0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041692d: sub rcx, rdx; cmp rax, rcx; jbe 0x169c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000416aab: sub rcx, rdx; cmp rax, rcx; jbe 0x16ae8; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000416b24: sub rcx, rdx; cmp rax, rcx; jbe 0x16b50; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004178b4: sub rcx, rdx; cmp rax, rcx; jbe 0x178f0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041794b: sub rcx, rdx; cmp rax, rcx; jbe 0x17970; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000471ae9: sub rcx, rdx; cmp rax, rcx; jbe 0x71b20; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000040ff6f: sub rcx, rdx; cmp rax, rcx; jbe 0xffe8; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000042dd42: sub rdi, 0x20; lea r11, [rip + 0x66363]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430621: sub rdi, 0x40; lea r11, [rip + 0x63c44]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430562: sub rdi, 0x40; lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042dc51: sub rdi, 0x40; lea r11, [rip + 0x66454]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db92: sub rdi, 0x40; lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000413aaf: sub rdi, rcx; cmp rax, rdi; jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041067d: sub rdi, rdx; cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000043745e: sub rdi, rdx; lea r11, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043494a: sub rdi, rdx; lea r11, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004370fd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f7d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dfd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c7d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436afd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043697d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367fd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043667d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364fd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043637d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361fd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043607d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435efd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d7d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bfd: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a84: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043461d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043449d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043431d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043419d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043401d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e9d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d1d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b9d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a1d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043389d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043371d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043359d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043341d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043329d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043311d: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fa4: sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432d50: sub rdx, 0x40; lea r11, [rip + 0x61515]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432c90: sub rdx, 0x40; sfence; lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301cc: sub rdx, 0x40; sfence; lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000471cfa: sub rdx, qword ptr [rcx + 0x10]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000471d10: sub rdx, qword ptr [rcx + 8]; mov eax, dword ptr [rdi + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000413e36: sub rdx, r14; cmp r12, rdx; jbe 0x14020; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000494bf0: sub rdx, r15; push rdx; xor dl, bh; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x000000000042b11c: sub rdx, rax; jbe 0x2b3c0; add rax, rdi; add rax, rcx; ret; 
0x000000000042b383: sub rdx, rax; jbe 0x2b3c0; add rax, rdi; ret; 
0x000000000042b393: sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042b3a3: sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3b3: sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044468b: sub rdx, rcx; lea r11, [rip + 0x5095b]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044406b: sub rdx, rcx; lea r11, [rip + 0x50efb]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000041ec85: sub rdx, rdi; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000045dd17: sub rdx, rsi; call qword ptr [rbx + 0x38]; 
0x00000000004111da: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004132ae: sub rdx, rsi; mov qword ptr [rsp], rcx; mov rdi, rbx; call rax; 
0x0000000000469231: sub rdx, rsi; sar rdx, 2; call qword ptr [rbx + 0x38]; 
0x000000000043055e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x63d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db8e: sub rsi, 0x40; sub rdi, 0x40; lea r11, [rip + 0x66513]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004164ae: sub rsi, rdx; cmp rax, rsi; jbe 0x16510; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000470d04: sub rsi, rdx; cmp rax, rsi; jbe 0x70d40; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000471b83: sub rsi, rdx; cmp rax, rsi; jbe 0x71ba0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000437100: sub rsi, rdx; lea r11, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f80: sub rsi, rdx; lea r11, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436e00: sub rsi, rdx; lea r11, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c80: sub rsi, rdx; lea r11, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436b00: sub rsi, rdx; lea r11, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436980: sub rsi, rdx; lea r11, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436800: sub rsi, rdx; lea r11, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436680: sub rsi, rdx; lea r11, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436500: sub rsi, rdx; lea r11, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436380: sub rsi, rdx; lea r11, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436200: sub rsi, rdx; lea r11, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436080: sub rsi, rdx; lea r11, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435f00: sub rsi, rdx; lea r11, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d80: sub rsi, rdx; lea r11, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435c00: sub rsi, rdx; lea r11, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a87: sub rsi, rdx; lea r11, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434620: sub rsi, rdx; lea r11, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004344a0: sub rsi, rdx; lea r11, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434320: sub rsi, rdx; lea r11, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004341a0: sub rsi, rdx; lea r11, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434020: sub rsi, rdx; lea r11, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ea0: sub rsi, rdx; lea r11, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d20: sub rsi, rdx; lea r11, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ba0: sub rsi, rdx; lea r11, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a20: sub rsi, rdx; lea r11, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004338a0: sub rsi, rdx; lea r11, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433720: sub rsi, rdx; lea r11, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004335a0: sub rsi, rdx; lea r11, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433420: sub rsi, rdx; lea r11, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004332a0: sub rsi, rdx; lea r11, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433120: sub rsi, rdx; lea r11, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fa7: sub rsi, rdx; lea r11, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043745b: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434947: sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048a772: sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret; 
0x000000000047fa05: sub rsp, 0x1000; mov rbx, rsp; mov rsi, rbx; syscall; 
0x00000000004687b1: sub rsp, 0x80; call 0x4bd40; add rsp, 0x80; mov eax, edx; pop rbx; ret; 
0x0000000000475386: sub rsp, 0x80; call 0x4bd40; add rsp, 0x80; pop rbx; ret; 
0x000000000045c9a6: sub rsp, 0x80; call 0x4bd40; add rsp, 0x80; xor eax, eax; add rsp, 8; ret; 
0x0000000000492430: sub rsp, 8; add rsp, 8; ret; 
0x000000000048d175: sub rsp, 8; call 0xdc70; nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047ba8a: sub rsp, 8; call qword ptr [rip + 0x23e78c]; xor eax, eax; add rsp, 8; ret; 
0x00000000004753b2: sub rsp, 8; syscall; 
0x0000000000444c9d: test ah, 0x20; jne 0x44d80; test ah, 0x40; jne 0x44d90; lea rax, [rdi + 0xf]; ret; 
0x0000000000444ca6: test ah, 0x40; jne 0x44d90; lea rax, [rdi + 0xf]; ret; 
0x0000000000444bbe: test ah, 0x40; jne 0x44d90; test dh, 0x40; jne 0x44b00; lea rax, [rdi + 0xf]; ret; 
0x000000000045e86d: test ah, dh; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x000000000049143f: test ah, dl; add dword ptr [rax], eax; add byte ptr [rbx + 0x2283ca3d], cl; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000417224: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004754b5: test al, 0; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x000000000048af03: test al, 0; add byte ptr [rax], al; ret; 
0x0000000000444c4c: test al, 0x20; jne 0x44d10; test al, 0x40; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x000000000046c929: test al, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x00000000004718f7: test al, 0x28; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000444c54: test al, 0x40; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x0000000000444b3c: test al, 0x40; jne 0x44d20; test dl, 0x40; jne 0x44b00; lea rax, [rdi + 7]; ret; 
0x0000000000449ca4: test al, 0x49; mov esp, edi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x00000000004963f8: test al, 0x70; sti; call ptr [rsi + 0x73]; sti; jmp qword ptr [rsi]; 
0x000000000049642c: test al, 0x70; sti; call qword ptr [rdx + 0x71]; 
0x000000000044b97a: test al, 0x75; ret; 
0x00000000004a6eb7: test al, 0x97; xchg esp, eax; ret; 
0x00000000004a79fb: test al, 0xe0; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x000000000049421d: test al, 0xf9; jmp rax; 
0x00000000004ab8c4: test al, 1; add byte ptr [rax], al; sbb byte ptr [rcx - 0xb], ah; call qword ptr [rbx + 1]; 
0x00000000004b47e8: test al, 5; std; jmp rdx; 
0x00000000004b4928: test al, 7; std; call qword ptr [rdi]; 
0x000000000047e735: test al, al; cmove rcx, rax; mov rax, rcx; ret; 
0x0000000000425e9a: test al, al; jne 0x25e80; xor eax, eax; sub eax, ecx; ret; 
0x0000000000477ee3: test al, bh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004b453c: test al, dh; cld; jmp qword ptr [rdx + 5]; 
0x0000000000460339: test al, dl; adc al, 0; add byte ptr [rcx - 0x80], al; call qword ptr [rbx + 0xf]; 
0x000000000048aee1: test bh, bh; je 0x8aeeb; cmp dil, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e081: test bh, bh; je 0x8e08b; cmp dil, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eee1: test bh, bh; je 0x8eeeb; cmp dil, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f951: test bh, bh; je 0x8f95b; cmp dil, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x000000000048adbc: test bh, bh; jns 0x8adc3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048dddc: test bh, bh; jns 0x8dde3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f9dc: test bh, bh; jns 0x8f9e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000406f41: test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a588: test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000472b5c: test bh, dh; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004100bf: test byte ptr [rax + rax - 0x76b80000], ch; ret; 
0x0000000000401552: test byte ptr [rax + rax], al; cmp eax, -1; je 0x162b; add rsp, 0x98; ret; 
0x0000000000469184: test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000040dbce: test byte ptr [rax + rdx*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xe0], eax; movaps xmmword ptr [rsp + 0xf0], xmm0; syscall; 
0x000000000040dbd6: test byte ptr [rax + riz*8], ah; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0xf0], eax; syscall; 
0x000000000047d74f: test byte ptr [rax - 0x73], 0x3d; movabs dword ptr [0x15b8000277], eax; syscall; 
0x0000000000458e51: test byte ptr [rax - 0x76b80000], ch; ret 0x2948; 
0x00000000004704ff: test byte ptr [rax - 0x77], -0x11; call qword ptr [rax + 0x38]; 
0x00000000004137c2: test byte ptr [rax - 0x77], -0x21; call qword ptr [rax + 0x40]; 
0x00000000004024a1: test byte ptr [rax - 0x77], 0x45; mov byte ptr [rcx - 0x77], al; int 0x83; ret 0x8901; 
0x000000000046ab79: test byte ptr [rax - 0x7c000019], ah; ret; 
0x00000000004b3b1d: test byte ptr [rax], al; add al, ah; lodsb al, byte ptr [rsi]; cld; jmp qword ptr [rsi + 7]; 
0x00000000004b3bbd: test byte ptr [rax], al; add byte ptr [rax - 0x49], dl; cld; jmp qword ptr [rdx]; 
0x000000000047482a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000042b35a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042b58a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000040eaca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000419caa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000048582a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; call rbx; 
0x0000000000444d4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d5a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d6a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d8a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x0000000000444cca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 1]; ret; 
0x0000000000444cda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x0000000000444cea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x0000000000444cfa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x0000000000444d0a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x0000000000444d1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x0000000000444d2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x0000000000444d3a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x0000000000444cba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi]; ret; 
0x00000000004848ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x237789]; mov qword ptr [rip + 0x23776a], rax; ret; 
0x000000000044d34a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x26cfa9]; ret; 
0x00000000004128fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], 0; mov rax, rdi; ret; 
0x000000000044471a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x00000000004440fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000044410a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000047553a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; 
0x000000000047553a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x68; syscall; ret; 
0x000000000047552a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; 
0x000000000047552a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6b; syscall; ret; 
0x000000000047554a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; 
0x000000000047554a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x6c; syscall; ret; 
0x000000000044a55a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xb; syscall; 
0x00000000004185ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000048e02a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x0000000000448f9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edi, edx; mov eax, esi; syscall; 
0x0000000000434fda: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044bfba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 0x20], rsi; ret; 
0x000000000048d1aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041751a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa0], 0xffffffffffffffff; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000045ad1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xf; syscall; 
0x000000000045abba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe0; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffe8; add rax, qword ptr fs:[0]; ret; 
0x000000000045ab7a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xfffffffffffffff0; add rax, qword ptr fs:[0]; ret; 
0x00000000004185aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 0xffffffffffffffff; ret; 
0x000000000047484a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 1; ret; 
0x000000000047485a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000047486a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x000000000047487a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x000000000047488a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x000000000047489a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004748aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000481a2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 8]; ret; 
0x000000000047c3ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000471e9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x48]; mov eax, dword ptr [rax + 0x4c]; ret; 
0x000000000041862a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000048d12a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d1ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000048d21a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000048d20a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x000000000048d1ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000044f47a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x26d4b1]; ret; 
0x000000000041860a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x2a0b09]; ret; 
0x000000000048aefa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsi + 0xa8]; ret; 
0x0000000000473b2a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000041863a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, rdi; ret; 
0x00000000004234ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbp; mov rdi, rax; call rcx; 
0x0000000000480eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movsx eax, dl; sub eax, ecx; ret; 
0x0000000000412bba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx eax, byte ptr [rdx]; ret; 
0x000000000043516a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004350ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044a5b5: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x1c; syscall; 
0x0000000000475515: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0x66; syscall; 
0x000000000044a585: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax + rax]; mov eax, 0xa; syscall; 
0x000000000041177a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000041753a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047368a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000444afa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x0000000000485288: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x27; syscall; 
0x000000000044bc98: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0x63; syscall; 
0x0000000000474db8: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov eax, 0xc9; syscall; 
0x000000000042b82a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vzeroupper; xor eax, eax; ret; 
0x00000000004abc60: test byte ptr [rax], al; add byte ptr [rax], al; add rax, -0x64f80000; cmc; call rax; 
0x000000000044ef62: test byte ptr [rbp + rcx*4 + 0x3c], cl; ret; 
0x000000000045acf6: test byte ptr [rbp - 0x6bf0bf40], 0xc6; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000046aa7c: test byte ptr [rbp - 0x7c000018], bl; ret; 
0x0000000000459394: test byte ptr [rbx + rdi*8 - 0x7cb70001], bh; rol byte ptr [rcx], 0x83; ret 0x4801; 
0x000000000046eeef: test byte ptr [rbx + rdi*8 - 1], dh; dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042f637: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000446122: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000046f58f: test byte ptr [rcx + 0x48fffffc], cl; lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000048c00b: test byte ptr [rcx + rax - 0x20], cl; jmp rax; 
0x0000000000446119: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000004732bf: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000418f5d: test byte ptr [rcx + rcx*4 - 0x19], -0x18; retf 0xfe74; dec dword ptr [rax - 0x77]; ret; 
0x000000000046fd2f: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call qword ptr [rdi + 0x38]; 
0x000000000048dba2: test byte ptr [rcx + rcx*4 - 0x19], 0x41; call rdi; 
0x00000000004619f2: test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x000000000045416d: test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x00000000004015b9: test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000422d40: test byte ptr [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; ret; 
0x0000000000487b6e: test byte ptr [rdi - 0x3b7cb701], dh; and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044b674: test byte ptr [rdi - 0x7d000000], bl; ret; 
0x000000000044a1bf: test byte ptr [rdi], -0x6c; ret 0xc221; 
0x0000000000449cd6: test byte ptr [rdi], -0x6c; ret 0xca21; 
0x0000000000423fe6: test byte ptr [rdi], -0x7c; ret; 
0x00000000004718c4: test byte ptr [rdi], 2; mov rbx, rdi; jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x0000000000472ee4: test byte ptr [rdi], bh; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000455146: test byte ptr [rdi], dh; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add cl, byte ptr [rax + 0x39]; ret; 
0x000000000041ace4: test byte ptr [rdi], dh; add eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; push rcx; adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000472efc: test byte ptr [rdi], dl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000474401: test byte ptr [rdx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000473231: test byte ptr [rdx + 0x48000001], bh; bsr eax, eax; add rax, rdi; ret; 
0x000000000041fd2e: test byte ptr [rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000472b44: test byte ptr [rdx], al; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000042182e: test byte ptr [rdx], al; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x0000000000421d2e: test byte ptr [rdx], dl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004246d9: test byte ptr [rip + 0x29771d], 2; lea rdx, [rip + 0x227d9]; lea rax, [rip + 0x22732]; cmovne rax, rdx; ret; 
0x0000000000424600: test byte ptr [rip + 0x2977f6], 2; lea rdx, [rip + 0x22bf2]; lea rax, [rip + 0x22bab]; cmovne rax, rdx; ret; 
0x00000000004245df: test byte ptr [rip + 0x297817], 2; lea rdx, [rip + 0x23053]; lea rax, [rip + 0x22ffc]; cmovne rax, rdx; ret; 
0x0000000000424439: test byte ptr [rip + 0x2979bd], 2; lea rdx, [rip + 0x22a79]; lea rax, [rip + 0x229d2]; cmovne rax, rdx; ret; 
0x0000000000424350: test byte ptr [rip + 0x297ad5], 0x10; lea rdx, [rip - 0x59e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x00000000004237c0: test byte ptr [rip + 0x29862b], 0x10; lea rdx, [rip + 0x23282]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000469604: test byte ptr [rip - 0x7c000003], dl; ret; 
0x000000000045f034: test byte ptr [rip - 0x7c000011], al; ret; 
0x000000000047373d: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x0000000000425e6a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c2e8: test byte ptr [rsi + rax], bh; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x00000000004ac1bc: test byte ptr [rsi + rsi*8], ch; call qword ptr [rdx]; 
0x00000000004531b1: test byte ptr [rsi - 0x8fffffc], cl; ret 0; 
0x000000000044096d: test byte ptr [rsi], bh; add byte ptr [rax], al; bsf rax, rdx; ret; 
0x00000000004440e8: test byte ptr [rsi], cl; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000486b7b: test byte ptr [rsp + rdx], ah; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; pop rbp; mov eax, 0x89fd8945; ret 0xe283; 
0x000000000040ac72: test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x00000000004af8e9: test cl, bh; call qword ptr [rbx]; 
0x00000000004af8c1: test cl, bh; call qword ptr [rdx]; 
0x0000000000489dfa: test cl, bl; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004465ff: test cl, cl; jne 0x465f0; ret; 
0x00000000004466af: test cl, cl; jne 0x466a0; ret; 
0x000000000044696f: test cl, cl; jne 0x46960; sub rax, 1; ret; 
0x0000000000444bc7: test dh, 0x40; jne 0x44b00; lea rax, [rdi + 0xf]; ret; 
0x0000000000446056: test dh, 0x40; jne 0x46020; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000044814a: test dh, 0xf0; je 0x48072; lea eax, [rdx + rdx]; pop rbx; and eax, 0x7ff80000; ret; 
0x0000000000444c0d: test dh, 4; jne 0x44b00; lea rax, [rdi + 0xb]; ret; 
0x00000000004acfa9: test dh, dh; call qword ptr [rdi]; 
0x0000000000450b45: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000048aee0: test dil, dil; je 0x8aeeb; cmp dil, 0x10; jne 0x8af08; xor eax, eax; ret; 
0x000000000048e080: test dil, dil; je 0x8e08b; cmp dil, 0x10; jne 0x8e09e; xor eax, eax; ret; 
0x000000000048eee0: test dil, dil; je 0x8eeeb; cmp dil, 0x10; jne 0x8eefe; xor eax, eax; ret; 
0x000000000048f950: test dil, dil; je 0x8f95b; cmp dil, 0x10; jne 0x8f978; xor eax, eax; ret; 
0x000000000048adbb: test dil, dil; jns 0x8adc3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048dddb: test dil, dil; jns 0x8dde3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x000000000048f9db: test dil, dil; jns 0x8f9e3; mov r8, qword ptr [r8]; mov qword ptr [r10], r8; ret; 
0x0000000000444b44: test dl, 0x40; jne 0x44b00; lea rax, [rdi + 7]; ret; 
0x0000000000445fa2: test dl, 0x40; jne 0x46020; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000444b72: test dl, 4; jne 0x44b00; lea rax, [rdi + 3]; ret; 
0x000000000048c114: test dl, cl; add al, 0; add al, ch; push rdx; sbb edi, eax; jmp qword ptr [rsi - 0x70]; 
0x00000000004747f7: test dl, dl; je 0x74810; mov cl, dl; and cl, 0xf; je 0x74820; ret; 
0x000000000044681f: test dl, dl; jne 0x46810; lea rax, [rcx - 1]; ret; 
0x0000000000480e27: test dl, dl; jne 0x80dfa; movsx eax, cl; neg eax; ret; 
0x0000000000484dc3: test dword ptr [rax + 0x48000000], esp; mov edx, dword ptr [rbx + 0x18]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000473a6b: test dword ptr [rax + 0x4c000000], esp; mov eax, eax; vzeroupper; ret; 
0x000000000048d16a: test dword ptr [rax + 0x7508313c], 0x10894804; ret; 
0x0000000000491af3: test dword ptr [rax + 0xf000008], ecx; xchg ebx, eax; ret 0x3d83; 
0x000000000047e996: test dword ptr [rax + 0xfffffd], esp; add byte ptr [rax], al; add byte ptr [rcx - 0x26b7b], cl; jmp qword ptr [rsi + 0x41]; 
0x0000000000444c4f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x44d20; lea rax, [rdi + 7]; ret; 
0x000000000042b777: test dword ptr [rax + rax - 0x3fcf0000], edx; vzeroupper; ret; 
0x000000000048365d: test dword ptr [rax - 0x2f], 0x48d48fb; fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], cl; ret 0x149; 
0x0000000000472b5d: test dword ptr [rax], 0x83480000; ret 0xe901; 
0x0000000000468ae6: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000402201: test dword ptr [rax], eax; add rax, r13; jmp rax; 
0x000000000044d4d1: test dword ptr [rax], eax; add rax, rbp; jmp rax; 
0x000000000045eaa9: test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x00000000004691f6: test dword ptr [rax], esi; idiv edi; dec dword ptr [rax - 0x39]; ret 0xac20; 
0x0000000000402200: test dword ptr [rax], r8d; add rax, r13; jmp rax; 
0x000000000044d4d0: test dword ptr [rax], r8d; add rax, rbp; jmp rax; 
0x000000000045fcaf: test dword ptr [rbp + 0x29], 0xfa894ce7; call qword ptr [rax + 0x38]; 
0x0000000000474c2e: test dword ptr [rbp + 0x4c000000], ebx; mov eax, eax; shr rax, 2; vzeroupper; ret; 
0x00000000004585c5: test dword ptr [rbp - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x000000000042b308: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x00000000004499e9: test dword ptr [rbx + 0x48000000], ebp; add esp, 0x78; ret; 
0x0000000000444c08: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x44b00; lea rax, [rdi + 0xb]; ret; 
0x000000000042d077: test dword ptr [rbx + 7], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042d4c6: test dword ptr [rbx + rax], eax; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042c148: test dword ptr [rbx - 0x3a000003], esp; std; xlatb; ret 0xe883; 
0x000000000042f473: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000434d63: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000041fb68: test dword ptr [rbx], edx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000041183f: test dword ptr [rcx + 0x48000000], ebp; add esp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004160b8: test dword ptr [rcx + 0x48000000], edi; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000047566b: test dword ptr [rcx + 0x48000000], edi; add esp, 0x78; ret; 
0x000000000047c278: test dword ptr [rcx + 0x48000002], ecx; mov eax, dword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000042d04d: test dword ptr [rcx + 7], esi; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042cf5d: test dword ptr [rcx + 8], esp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ce89: test dword ptr [rcx + 9], eax; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx edx, byte ptr [rsi - 1]; sub eax, edx; ret; 
0x000000000042ce6d: test dword ptr [rcx + 9], edx; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041cf62: test dword ptr [rcx + rcx*4 + 0x54], 0x93e80824; ret 0xffff; 
0x00000000004607a0: test dword ptr [rcx + rcx*4 - 0x73], 0xfffffb18; mov rdx, qword ptr [rbp - 0x518]; mov rsi, qword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x0000000000411058: test dword ptr [rcx - 0x16000002], esi; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x0000000000423863: test dword ptr [rcx], ebp; add bh, dh; ret 0; 
0x0000000000477f02: test dword ptr [rcx], esp; add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004175ba: test dword ptr [rdi + 0x48000002], esp; add esp, 0x38; pop rbx; pop rbp; ret; 
0x000000000048df84: test dword ptr [rdi + rdi*8 - 1], esi; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004647e3: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000041cefc: test dword ptr [rdi], eax; add eax, 0x39480000; ret 0xf275; 
0x000000000044f552: test dword ptr [rdx + 0x48000000], ebx; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000457b20: test dword ptr [rdx + 0x48000000], edi; add esp, 0xb8; pop rbx; pop r12; ret; 
0x000000000042d08b: test dword ptr [rdx + 7], ecx; add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; movzx ecx, byte ptr [rsi - 1]; sub eax, ecx; ret; 
0x000000000042cf89: test dword ptr [rdx + 8], esp; add byte ptr [rax], al; and eax, 0xffff; and ecx, 0xffff; sub eax, ecx; ret; 
0x000000000042cd92: test dword ptr [rdx + rcx], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000401079: test dword ptr [rdx], edx; add al, byte ptr [rax]; add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000400f29: test dword ptr [rdx], esi; add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; push rax; and byte ptr [rax + 1], cl; ret 0xb70f; 
0x0000000000473523: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x0000000000449656: test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x00000000004847e9: test dword ptr [rsi + 0x48000000], esi; add esp, 0x30; pop rbx; ret; 
0x00000000004849aa: test dword ptr [rsi + 0x48000001], eax; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000444b6d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x44b00; lea rax, [rdi + 3]; ret; 
0x0000000000446382: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000041936c: test dword ptr [rsi + rdi*8 + 0x5d5bffff], ebp; pop r12; pop r13; pop r14; ret; 
0x000000000046917d: test dword ptr [rsi + rsi*8 - 0x76b30001], esi; test byte ptr [rax + rcx*4 - 0x73], 0xb8; idiv bh; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff730; call rax; 
0x000000000045f971: test dword ptr [rsi - 0x16000007], esi; ret; 
0x000000000046dff8: test dword ptr [rsi - 0x16000022], ecx; sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x000000000040fc5d: test dword ptr [rsi - 0x77000000], esp; ret 0xe281; 
0x000000000042d298: test dword ptr [rsi], esp; add eax, 0xc0310000; ret; 
0x0000000000411840: test eax, 0x48000000; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000461073: test eax, 0x4800255a; mov eax, dword ptr [rax + rdi*8]; jmp rax; 
0x00000000004a8ba0: test eax, 0x7d4c8c5d; ret 0xd8f; 
0x0000000000432f16: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000048b902: test eax, 0x8002308; ret; 
0x00000000004a98d2: test eax, 0x80a72de5; mov dh, 0xdd; in eax, 0xe2; add ch, byte ptr [ebp + ebp*2 + 0x5b]; ret 0x6f9; 
0x000000000041025e: test eax, 0x8948002a; ret 0x8948; 
0x000000000046c3a9: test eax, 0x8b480024; add al, 0xf8; jmp rax; 
0x000000000043f232: test eax, 0xe3c4c9eb; jns 0x3f29c; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043fa12: test eax, 0xe3c4c9eb; jns 0x3fa7c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x0000000000446988: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000044bbfb: test eax, eax; cmove eax, edx; ret; 
0x000000000041965c: test eax, eax; je 0x19670; mov dword ptr [rip + 0x2a2706], 0; ret; 
0x0000000000422d31: test eax, eax; je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x000000000042b058: test eax, eax; je 0x2b05d; xchg edx, eax; sub eax, edx; ret; 
0x000000000042b426: test eax, eax; je 0x2b440; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x00000000004402ff: test eax, eax; je 0x40310; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000040040c: test eax, eax; je 0x412; call rax; 
0x000000000040040c: test eax, eax; je 0x412; call rax; add rsp, 8; ret; 
0x0000000000446b32: test eax, eax; je 0x46b10; movsxd rax, ecx; add rax, rdi; sub rax, rsi; ret; 
0x0000000000459164: test eax, eax; je 0x5916a; call rax; 
0x000000000045a569: test eax, eax; je 0x5a56f; call rax; 
0x000000000047364d: test eax, eax; je 0x73604; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000473672: test eax, eax; je 0x73690; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004848d1: test eax, eax; je 0x848e3; lea rax, [rip + 0x2377a4]; mov qword ptr [rip + 0x237785], rax; add rsp, 8; ret; 
0x0000000000484d31: test eax, eax; je 0x84d3f; lea rdx, [rip + 0x235e24]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fe0: test eax, eax; je 0x84ff0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d1f1: test eax, eax; je 0x8d200; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000048db45: test eax, eax; je 0x8db58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000490cf1: test eax, eax; je 0x90cfc; call rax; 
0x0000000000400a97: test eax, eax; je 0xaa8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400ad9: test eax, eax; je 0xae8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000458760: test eax, eax; jle 0x5876c; sub eax, 1; mov dword ptr [rbx + 8], eax; pop rbx; ret; 
0x000000000042b293: test eax, eax; jne 0x2b370; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b335: test eax, eax; jne 0x2b390; xor eax, eax; ret; 
0x000000000042b305: test eax, eax; jne 0x2b3b0; xor eax, eax; ret; 
0x000000000042b571: test eax, eax; jne 0x2b5c0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b7b1: test eax, eax; jne 0x2b7d0; xor eax, eax; vzeroupper; ret; 
0x000000000042b774: test eax, eax; jne 0x2b810; xor eax, eax; vzeroupper; ret; 
0x0000000000444af0: test eax, eax; jne 0x44b04; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004497b6: test eax, eax; jne 0x497d0; xor eax, eax; syscall; 
0x0000000000449886: test eax, eax; jne 0x498a0; mov eax, 1; syscall; 
0x00000000004499c3: test eax, eax; jne 0x49a28; mov eax, 0x48; syscall; 
0x0000000000449b56: test eax, eax; jne 0x49b70; mov eax, 3; syscall; 
0x000000000044bd30: test eax, eax; jne 0x4bd24; pop rdx; pop r10; ret; 
0x0000000000471e77: test eax, eax; jne 0x71e88; mov ecx, dword ptr [rdx + 0x48]; cmp ecx, dword ptr [rdx + 0x4c]; cmove eax, ecx; ret; 
0x0000000000473aa1: test eax, eax; jne 0x73ad0; mov rax, r8; vzeroupper; ret; 
0x0000000000473a68: test eax, eax; jne 0x73b10; mov rax, r8; vzeroupper; ret; 
0x0000000000474c61: test eax, eax; jne 0x74c90; mov rax, r8; shr rax, 2; vzeroupper; ret; 
0x0000000000475645: test eax, eax; jne 0x756a6; mov eax, 0x101; syscall; 
0x000000000048254d: test eax, eax; jne 0x825a0; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x000000000047bbf0: test eax, eax; js 0x7bc02; pop rbx; ret; 
0x00000000004244f3: test eax, eax; lea rdx, [rip + 0x23834]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x000000000045acf7: test eax, eax; sete sil; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x0000000000488353: test eax, eax; setne al; add rsp, 8; movzx eax, al; neg eax; ret; 
0x000000000042b88c: test eax, eax; tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000045dc72: test eax, ebp; idiv bh; dec dword ptr [rcx + rcx*4 - 2]; mov rdi, qword ptr [rbp - 0x8a8]; call rax; 
0x0000000000469be5: test eax, ebp; idiv bh; jmp qword ptr [rax]; 
0x000000000047051a: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000461fd7: test eax, ebx; or eax, dword ptr [rax]; add byte ptr [rbx - 0x78f0d008], al; mov esi, 0x8900000b; ret 0x349; 
0x000000000045ed22: test eax, edi; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000048ff6e: test ebp, ebp; jne 0x8ff48; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004901c1: test ebp, ebp; jne 0x901a8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490d7b: test ebp, ebp; jne 0x90d60; pop rbx; pop rbp; pop r12; ret; 
0x000000000042cf1e: test ebp, ecx; or byte ptr [rax], al; add byte ptr [rip + 0xffff], ah; and ecx, 0xffff; sub eax, ecx; ret; 
0x00000000004b56e1: test ebp, edi; call qword ptr [rbx]; 
0x000000000048950e: test ebp, edx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x83; ret 0x3901; 
0x000000000041ae68: test ebx, ebp; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000042b270: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000490eff: test ebx, ebx; jne 0x90f10; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004900ac: test ebx, ebx; mov qword ptr [rip + 0x22bc3b], rbx; jne 0x90098; pop rbx; ret; 
0x0000000000421b70: test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000421668: test ebx, esi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000454949: test ecx, eax; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000477f38: test ecx, eax; add dword ptr [rax], eax; add byte ptr [rcx], dh; fisttp dword ptr [rax - 0x7d]; ret; 
0x0000000000444b32: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000047c275: test ecx, ecx; jne 0x7c506; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047cb9d: test ecx, ecx; jne 0x7d176; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x00000000004af939: test ecx, edi; call qword ptr [rbx]; 
0x00000000004af94d: test ecx, edi; call qword ptr [rcx + 1]; 
0x000000000047f227: test ecx, edx; and eax, dword ptr [rax]; ret; 
0x0000000000410b44: test edi, eax; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fd08], al; ret; 
0x0000000000449ca1: test edi, edi; je 0x49c4d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000458748: test edi, edi; je 0x58759; call 0x81ca0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000490ce8: test edi, edi; je 0x90d01; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x000000000048aa2e: test edi, edi; jne 0x8a960; add rsp, 0x38; ret; 
0x00000000004846bd: test edi, edi; mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x0000000000494ee9: test edx, edi; call qword ptr [rax]; 
0x000000000044bd01: test edx, edx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000440922: test edx, edx; je 0x4092a; bsf eax, edx; ret; 
0x00000000004409cb: test edx, edx; je 0x409e0; bsf rax, rdx; ret; 
0x000000000044096a: test edx, edx; je 0x409f0; bsf rax, rdx; ret; 
0x000000000044c007: test edx, edx; je 0x4c030; xor esi, esi; lea rdi, [rip + 0x49b11]; mov eax, 0x15; syscall; 
0x000000000044c63a: test edx, edx; je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000004737aa: test edx, edx; je 0x737d0; bsf rax, rdx; ret; 
0x000000000047373a: test edx, edx; je 0x737e0; bsf rax, rdx; ret; 
0x000000000047446a: test edx, edx; je 0x74490; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004743fe: test edx, edx; je 0x744a0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000486c2a: test edx, edx; je 0x86c38; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x00000000004855ae: test edx, edx; jne 0x855b5; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048ab7d: test edx, edx; jne 0x8ac59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x0000000000444b25: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000459068: test esi, esi; je 0x5906e; call rsi; 
0x000000000047e6d4: test esi, esi; je 0x7e6db; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000004736a1: test esi, esi; jne 0x736a9; xor rax, rax; ret; 
0x0000000000474361: test esi, esi; jne 0x74369; xor rax, rax; ret; 
0x0000000000484453: test esi, esi; jne 0x84480; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x000000000045e834: test esp, eax; idiv bh; jmp qword ptr [rax]; 
0x0000000000444b3f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000042f472: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x000000000048ab7c: test r10d, r10d; jne 0x8ac59; add rsp, 0x38; pop rbx; pop r14; ret; 
0x000000000047e734: test r8b, r8b; cmove rcx, rax; mov rax, rcx; ret; 
0x000000000042b057: test r8d, r8d; je 0x2b05d; xchg edx, eax; sub eax, edx; ret; 
0x0000000000422d30: test rax, rax; je 0x22d40; lea rax, [rdx - 0x10]; ret; 
0x000000000040040b: test rax, rax; je 0x412; call rax; 
0x000000000040040b: test rax, rax; je 0x412; call rax; add rsp, 8; ret; 
0x0000000000459163: test rax, rax; je 0x5916a; call rax; 
0x000000000045a568: test rax, rax; je 0x5a56f; call rax; 
0x0000000000484d30: test rax, rax; je 0x84d3f; lea rdx, [rip + 0x235e24]; mov qword ptr [rax], rdx; add rsp, 8; ret; 
0x0000000000484fdf: test rax, rax; je 0x84ff0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d1f0: test rax, rax; je 0x8d200; mov rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000048db44: test rax, rax; je 0x8db58; mov rsi, rdi; mov edi, 1; jmp rax; 
0x0000000000490cf0: test rax, rax; je 0x90cfc; call rax; 
0x0000000000400a96: test rax, rax; je 0xaa8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x0000000000400ad8: test rax, rax; je 0xae8; pop rbp; mov edi, 0x6babd0; jmp rax; 
0x000000000048ff6d: test rbp, rbp; jne 0x8ff48; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004901c0: test rbp, rbp; jne 0x901a8; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490d7a: test rbp, rbp; jne 0x90d60; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490efe: test rbx, rbx; jne 0x90f10; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004900ab: test rbx, rbx; mov qword ptr [rip + 0x22bc3b], rbx; jne 0x90098; pop rbx; ret; 
0x000000000047c274: test rcx, rcx; jne 0x7c506; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047cb9c: test rcx, rcx; jne 0x7d176; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000449ca0: test rdi, rdi; je 0x49c4d; mov r12, rdi; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000458747: test rdi, rdi; je 0x58759; call 0x81ca0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000490ce7: test rdi, rdi; je 0x90d01; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x90cfc; call rax; 
0x00000000004846bc: test rdi, rdi; mov byte ptr [rsi], al; jne 0x846a8; mov rax, rsi; ret; 
0x000000000044bd00: test rdx, rdx; cmove rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x00000000004409ca: test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440969: test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x000000000044c639: test rdx, rdx; je 0x4c648; lea rdi, [rcx + rax + 0x20]; jmp rdx; 
0x00000000004737a9: test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000473739: test rdx, rdx; je 0x737e0; bsf rax, rdx; ret; 
0x0000000000474469: test rdx, rdx; je 0x74490; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004743fd: test rdx, rdx; je 0x744a0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000486c29: test rdx, rdx; je 0x86c38; mov rax, qword ptr [r12]; add rax, qword ptr [rdx + 8]; call rax; 
0x0000000000459067: test rsi, rsi; je 0x5906e; call rsi; 
0x000000000047e6d3: test rsi, rsi; je 0x7e6db; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x00000000004736a0: test rsi, rsi; jne 0x736a9; xor rax, rax; ret; 
0x0000000000474360: test rsi, rsi; jne 0x74369; xor rax, rax; ret; 
0x0000000000484452: test rsi, rsi; jne 0x84480; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000450b44: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000440ba0: tzcnt eax, eax; add rax, 0x20; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b850: tzcnt eax, eax; add rax, 0x20; add rax, rdi; vzeroupper; ret; 
0x0000000000440bc0: tzcnt eax, eax; add rax, 0x40; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b860: tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000440c0e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b88e: tzcnt eax, eax; add rax, 0x60; add rax, rdi; vzeroupper; ret; 
0x0000000000440773: tzcnt eax, eax; add rax, rcx; add rax, rdi; vzeroupper; ret; 
0x0000000000440ad5: tzcnt eax, eax; add rax, rdi; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b8e5: tzcnt eax, eax; add rax, rdi; add rax, rcx; vzeroupper; ret; 
0x00000000004749c0: tzcnt eax, eax; add rax, rdi; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b90: tzcnt eax, eax; add rax, rdi; sub rax, rdx; vzeroupper; ret; 
0x000000000042b840: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042b7c0: tzcnt eax, eax; cmp rdx, rax; jbe 0x2b830; add rax, rdi; vzeroupper; ret; 
0x000000000042c180: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x20]; movzx edx, byte ptr [rsi + rcx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042c1a0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x40]; movzx edx, byte ptr [rsi + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000042c166: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx edx, byte ptr [rsi + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042bef0: tzcnt ecx, eax; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000004154c3: vminsd xmm8, xmm4, qword ptr [rcx + 0x5c]; ret; 
0x0000000000447dd5: vmovdqa ymmword ptr [rcx + 0x60], ymm0; add rcx, 0x80; cmp rdx, rcx; jne 0x47dc7; vzeroupper; ret; 
0x00000000004384cd: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000044727e: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004384d1: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000447282: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000042c011: vmovdqu xmm2, xmmword ptr [rsi]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x00000000004384da: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000447e0b: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm0; vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x000000000044728c: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004384d6: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000447288: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446c55: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000447e11: vmovdqu xmmword ptr [rdi], xmm0; vzeroupper; ret; 
0x0000000000446c59: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x00000000004384b9: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004471e7: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004384bd: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004471eb: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000438499: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447cfb: vmovdqu ymmword ptr [edi + edx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447418: vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x00000000004474bf: vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004384c6: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x00000000004384ad: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x00000000004384a7: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447409: vmovdqu ymmword ptr [rcx - 0x20], ymm6; vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x000000000044740e: vmovdqu ymmword ptr [rcx - 0x40], ymm7; vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447413: vmovdqu ymmword ptr [rcx - 0x60], ymm8; vmovdqu ymmword ptr [r11], ymm4; vzeroupper; ret; 
0x0000000000447d70: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x00000000004384a2: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447358: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004474b0: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004474b5: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x00000000004474ba: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [r11], ymm8; vzeroupper; ret; 
0x0000000000447d75: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000447cfc: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x00000000004471f5: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000044735d: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000447323: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447d7b: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x0000000000447363: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000447329: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000044732f: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447335: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x00000000004384c2: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000447d6c: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm0; vzeroupper; ret; 
0x000000000043849e: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447354: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x00000000004471f1: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000447d02: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000446c4b: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446c4f: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000044761a: vmovdqu64 zmm0, zmmword ptr [rsi]; vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447620: vmovdqu64 zmm1, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000004478d2: vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447998: vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004478cb: vmovdqu64 zmmword ptr [rcx - 0xc0], zmm8; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x0000000000447f0f: vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000004477ea: vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447991: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm7; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004477bb: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000447f16: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x0000000000447e85: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x000000000044762e: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x00000000004477f1: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447f1e: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000004477f9: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447f09: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm0; vzeroupper; ret; 
0x00000000004477e4: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm1; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm2; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm3; vzeroupper; ret; 
0x0000000000447628: vmovdqu64 zmmword ptr [rdi], zmm0; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm1; vzeroupper; ret; 
0x0000000000447e8d: vmovdqu64 zmmword ptr [rdi], zmm0; vzeroupper; ret; 
0x0000000000446c64: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000446c68: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004387d5: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387dc: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004387e3: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x000000000043842d: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043867c: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043847e: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000438442: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438675: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438477: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000043843b: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043866e: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438434: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000438470: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446c1d: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000438930: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438937: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043893e: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000438945: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000446c38: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446dfa: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e01: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e08: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446d5d: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d64: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d6b: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446c0a: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c03: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446bfc: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042be9c: vpand ymm5, ymm5, ymm4; vptest ymm5, ymm0; jae 0x2c140; xor eax, eax; vzeroupper; ret; 
0x000000000042bfd7: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x000000000042c015: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x000000000042bfdb: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2bef0; ret; 
0x000000000042b7ad: vpmovmskb eax, ymm1; test eax, eax; jne 0x2b7d0; xor eax, eax; vzeroupper; ret; 
0x0000000000473a9d: vpmovmskb eax, ymm1; test eax, eax; jne 0x73ad0; mov rax, r8; vzeroupper; ret; 
0x000000000042bee3: vpmovmskb eax, ymm2; sub eax, -1; jne 0x2bef0; vzeroupper; ret; 
0x000000000042bea0: vptest ymm5, ymm0; jae 0x2c140; xor eax, eax; vzeroupper; ret; 
0x000000000042a6a3: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043ddcf: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a793: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a5b3: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004794d3: xchg al, bh; jmp qword ptr [rsi + 0x2e]; 
0x00000000004600e2: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004344a6: xchg bh, bh; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043fa1c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f23c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043f62c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ee4c: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047d76c: xchg bh, cl; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000494010: xchg bx, ax; stc; jmp rsi; 
0x000000000046a1ab: xchg byte ptr [rax + 0xd], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r12; mov rdi, qword ptr [rbp - 0x8d0]; call qword ptr [rbx + 0x38]; 
0x0000000000448092: xchg byte ptr [rax + 1], cl; int1; jmp rcx; 
0x000000000042affb: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000043e92f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e10f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043d8ef: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000042ab53: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x000000000043efeb: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000494494: xchg byte ptr [rax], dl; cli; call qword ptr [rsi]; 
0x000000000043e44f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a2e3: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000043dc2f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d40f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042b120: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000043e5ef: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000042ad33: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a4c3: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x000000000045e977: xchg byte ptr [rcx + 0xb], dh; add byte ptr [rax], al; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000048c90c: xchg byte ptr [rcx + rax - 0x10], cl; jmp rax; 
0x000000000042af13: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004849ab: xchg byte ptr [rcx], al; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045e633: xchg byte ptr [rcx], bl; sldt word ptr [rax]; mov rdx, rbx; mov rsi, r13; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004237c3: xchg byte ptr [rcx], ch; add byte ptr [rax], dl; lea rdx, [rip + 0x23282]; lea rax, [rip + 0x231db]; cmovne rax, rdx; ret; 
0x0000000000421b6c: xchg byte ptr [rcx], ch; add byte ptr [rdi], cl; test ebx, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x000000000043f4dc: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ecfc: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043fe0c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049498c: xchg byte ptr [rdi], dh; cli; call qword ptr [rsi]; 
0x0000000000454203: xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x000000000042ae23: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043d74f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a765: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a855: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a675: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000433ea6: xchg byte ptr [rip + 0x63490006], al; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000048ca26: xchg byte ptr [rip - 0x17000001], al; adc dil, al; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000041ac65: xchg byte ptr [rsi - 0x9fffffd], dh; ret 0xf08; 
0x000000000043d885: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e585: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045e45e: xchg byte ptr [rsi], al; adc dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x000000000043e0a5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043f3dd: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004552f5: xchg byte ptr [rsi], bl; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x000000000043fd0d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a3d3: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000413ab6: xchg ch, bh; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004a4d01: xchg ch, bh; call ptr [rax]; je 0xa4d04; call rax; 
0x00000000004a4d01: xchg ch, bh; call ptr [rax]; je 0xa4d04; call rax; ja 0xa4d08; jmp rbx; 
0x00000000004a4d25: xchg ch, bh; call qword ptr [rax]; 
0x00000000004a4d25: xchg ch, bh; call qword ptr [rax]; jbe 0xa4d28; jmp rbx; 
0x00000000004a4d3d: xchg ch, bh; dec dword ptr [rax + 0x77]; std; jmp qword ptr [rax]; 
0x00000000004a4d7d: xchg ch, bh; dec dword ptr [rax]; jbe 0xa4d80; call qword ptr [rax]; 
0x00000000004a4d7d: xchg ch, bh; dec dword ptr [rax]; jbe 0xa4d80; call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x00000000004a4d0d: xchg ch, bh; jmp rbx; 
0x0000000000494000: xchg cx, ax; stc; jmp rsi; 
0x000000000043e8c5: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dbc5: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043d6e5: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e3e5: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x0000000000413e3d: xchg dh, bl; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000043f52d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ed4d: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000049402c: xchg di, ax; stc; jmp rdi; 
0x000000000042a585: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a3a5: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a495: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000042a2b5: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000046f0b9: xchg dword ptr [rax + 1], ecx; clc; jmp rax; 
0x000000000046c780: xchg dword ptr [rax - 0x76ffffe3], edi; ret 0x349; 
0x0000000000402d23: xchg dword ptr [rax - 0x7d], ecx; ret; 
0x000000000047b606: xchg dword ptr [rax], eax; add eax, dword ptr [rax]; add bl, dh; ret; 
0x000000000047c091: xchg dword ptr [rbp + 0x13], ecx; add byte ptr [rax], al; lea rcx, [rip + 0x28c63]; movsxd rax, dword ptr [rcx + r12*4]; add rax, rcx; jmp rax; 
0x000000000044f0b4: xchg dword ptr [rbp + rcx*4 + 0x34], ecx; ret; 
0x0000000000462c1b: xchg dword ptr [rbp - 0x77000000], eax; ret 0x349; 
0x0000000000423168: xchg dword ptr [rbx + 1], esi; add byte ptr [rax], al; lea rdx, [rip + 0x70bfc]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046f22f: xchg dword ptr [rbx + rax], edi; add byte ptr [rax], al; lea rdx, [rip + 0x34b2d]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x000000000046be32: xchg dword ptr [rbx - 0x76ffffdb], edi; ret 0x349; 
0x000000000046ea7a: xchg dword ptr [rcx + 0x48000003], esi; lea ecx, [rip + 0x3509e]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004022da: xchg dword ptr [rcx + 0x48fffffb], edx; lea edx, [rip + 0x90392]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004a686c: xchg dword ptr [rcx + 0x79], ecx; xchg edx, eax; ret 0xf869; 
0x000000000045a35a: xchg dword ptr [rcx + 1], eax; add byte ptr [rax], al; movsxd rdi, dword ptr [r11 + rsi*4]; add rdi, r11; jmp rdi; 
0x000000000048afba: xchg dword ptr [rcx + rax - 8], ecx; jmp rax; 
0x000000000048c000: xchg dword ptr [rcx + rax], edx; add byte ptr [rax], al; movzx eax, al; movsxd rax, dword ptr [r12 + rax*4]; add rax, r12; jmp rax; 
0x000000000046ce2a: xchg dword ptr [rcx - 0x76ffffea], ecx; ret 0x349; 
0x000000000046da75: xchg dword ptr [rcx - 0x76fffff6], esp; ret 0x349; 
0x000000000046da4c: xchg dword ptr [rdi - 0x76fffff6], edx; ret 0x349; 
0x000000000044bd2e: xchg dword ptr [rdi], eax; test eax, eax; jne 0x4bd24; pop rdx; pop r10; ret; 
0x000000000046f2a4: xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x0000000000401f89: xchg dword ptr [rdx + 0x48fffffd], ebx; lea edx, [rip + 0x9065f]; movsxd rax, dword ptr [rdx + rax*4]; add rax, rdx; jmp rax; 
0x00000000004491d7: xchg dword ptr [rdx + rax - 0x72b80000], esi; adc eax, 0x4c399; movsxd rax, dword ptr [rdx + rbx*4]; add rax, rdx; jmp rax; 
0x000000000046993a: xchg dword ptr [rdx + rbx], esp; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004314e5: xchg dword ptr [rip + 0x63490006], ebp; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000478c50: xchg dword ptr [rip - 0x76fffffd], edx; ret 0xe8c0; 
0x000000000040d2b2: xchg dword ptr [rsi + 6], edi; add byte ptr [rax], al; lea rdi, [rip + 0x854a2]; movsxd rdx, dword ptr [rdi + rdx*4]; add rdx, rdi; jmp rdx; 
0x000000000046b8e4: xchg dword ptr [rsi - 0x76ffffd5], edi; ret 0x349; 
0x0000000000461ac8: xchg dword ptr [rsi - 0x76ffffef], eax; ret 0x349; 
0x0000000000461fe0: xchg dword ptr [rsi - 0x76fffff5], edi; ret 0x349; 
0x000000000046e563: xchg dword ptr [rsi - 0x77000000], edx; ret 0x349; 
0x00000000004a6a0b: xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000494008: xchg dx, ax; stc; jmp rsi; 
0x00000000004111b2: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000046b9a7: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000459e5b: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rbx + 0x63], cl; xor al, 0x88; add rsi, r8; jmp rsi; 
0x000000000045874e: xchg ebp, eax; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x00000000004b4ced: xchg ebp, eax; add byte ptr [rax], al; mov al, 0x2f; std; jmp qword ptr [rbp]; 
0x000000000046133e: xchg ebp, eax; call 0x4206133e; call qword ptr [rdi + 0x38]; 
0x00000000004607aa: xchg ebp, eax; call 0x490607aa; mov esi, dword ptr [rbp - 0x530]; call qword ptr [rax + 0x38]; 
0x00000000004585bf: xchg ebp, eax; push -0x17000001; test dword ptr [rbp - 1], 0x958b48ff; push 0x4cffffff; mov edi, esi; call rdx; 
0x00000000004585cb: xchg ebp, eax; push 0x4cffffff; mov edi, esi; call rdx; 
0x000000000048aba0: xchg ebp, eax; ret 0x145; 
0x0000000000477c8a: xchg ebp, eax; ret 0x2041; 
0x0000000000477d4a: xchg ebp, eax; ret 0x2044; 
0x0000000000449dcc: xchg ebp, eax; ret 0x3948; 
0x000000000041dcbb: xchg ebp, eax; ret 0x8348; 
0x0000000000479910: xchg ebp, eax; ret 0xc283; 
0x0000000000420e7d: xchg ebp, eax; ret 0xd020; 
0x000000000040df25: xchg ebp, eax; ret 0xd021; 
0x00000000004641ca: xchg ebp, eax; ret 0xd120; 
0x000000000040ff82: xchg ebp, eax; ret 0xdaf7; 
0x000000000044d3a1: xchg ebp, eax; ret 0xe1eb; 
0x000000000048c71a: xchg ebp, eax; ret 0xf45; 
0x0000000000488356: xchg ebp, eax; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rdi], cl; mov dh, 0xc0; neg eax; ret; 
0x000000000041878d: xchg ebp, eax; sal bh, 0xd8; ret; 
0x0000000000494f11: xchg ebp, eax; cli; call qword ptr [rax - 0x69]; 
0x00000000004b16ad: xchg ebp, eax; cli; call qword ptr [rax]; 
0x00000000004b1671: xchg ebp, eax; cli; call qword ptr [rcx]; 
0x00000000004b1659: xchg ebp, eax; cli; call qword ptr [rdi]; 
0x000000000044fcdf: xchg ebp, eax; ret; 
0x0000000000493fe1: xchg ebp, eax; stc; inc dword ptr [rcx - 0x6a]; stc; jmp rcx; 
0x0000000000494021: xchg ebp, eax; stc; jmp qword ptr [rsi]; 
0x0000000000493fdd: xchg ebp, eax; stc; push qword ptr [rcx + 0x41fff995]; xchg esi, eax; stc; jmp rcx; 
0x000000000048254a: xchg ebp, edi; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x00000000004b4ad1: xchg ebx, eax; add byte ptr [rax], al; sub al, 0x10; std; call qword ptr [rax]; 
0x000000000042c1e0: xchg ebx, eax; add rcx, r11; jmp rcx; 
0x000000000042c1d9: xchg ebx, eax; jge 0x2c1e2; add byte ptr [rcx + 0x63], cl; or al, 0x93; add rcx, r11; jmp rcx; 
0x0000000000443fbc: xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000042d982: xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044923c: xchg ebx, eax; mov rsi, rsp; mov edi, 1; mov eax, 0xe5; syscall; 
0x000000000045b1a8: xchg ebx, eax; ret 0x3948; 
0x0000000000411fac: xchg ebx, eax; ret 0x3949; 
0x00000000004205d0: xchg ebx, eax; ret 0x3d83; 
0x0000000000471245: xchg ebx, eax; ret 0x840; 
0x000000000045bc8d: xchg ebx, eax; ret 0x854d; 
0x000000000041cf69: xchg ebx, eax; ret 0xffff; 
0x0000000000494095: xchg ebx, eax; stc; inc dword ptr [rax - 0x6c]; stc; call rax; 
0x0000000000494011: xchg ebx, eax; stc; jmp rsi; 
0x0000000000494091: xchg ebx, eax; stc; push qword ptr [rax + 0x40fff993]; xchg esp, eax; stc; call rax; 
0x000000000043e9d1: xchg ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x00000000004613fb: xchg ecx, eax; ret 0xffff; 
0x0000000000438a76: xchg ecx, eax; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000043d0ff: xchg ecx, eax; sub eax, edx; ret; 
0x0000000000493fd8: xchg ecx, eax; xchg esp, eax; stc; jmp qword ptr [rcx]; 
0x0000000000493f75: xchg ecx, eax; stc; dec dword ptr [rsi]; nop; stc; call qword ptr [rax]; 
0x0000000000493f7d: xchg ecx, eax; stc; inc dword ptr [rcx - 0x72]; stc; call qword ptr [rax]; 
0x0000000000494005: xchg ecx, eax; stc; jmp qword ptr [rsi - 0x6e]; 
0x0000000000494001: xchg ecx, eax; stc; jmp rsi; 
0x00000000004147e4: xchg edi, eax; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004b4e51: xchg edi, eax; add byte ptr [rax], al; cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x00000000004b4ee9: xchg edi, eax; add byte ptr [rax], al; movsb byte ptr [rdi], byte ptr [rsi]; std; jmp rsp; 
0x000000000043ec27: xchg edi, eax; add eax, 0x81048b00; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040d2c1: xchg edi, eax; add rdx, rdi; jmp rdx; 
0x00000000004a7cbf: xchg edi, eax; call qword ptr [rbx + 0x7c]; 
0x0000000000481766: xchg edi, eax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000048996e: xchg edi, eax; mov eax, 0x89000003; fmul dword ptr [rbx + rcx*4 + 0x34]; ret 0xf41; 
0x000000000041edfb: xchg edi, eax; ret 0x394c; 
0x000000000040058e: xchg edi, eax; ret 0xda80; 
0x000000000041f2e1: xchg edi, eax; ret 0xfae9; 
0x000000000041f8c9: xchg edi, eax; ret 0xfbe9; 
0x00000000004318d5: xchg edi, eax; sub dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a6eb8: xchg edi, eax; xchg esp, eax; ret; 
0x000000000049406d: xchg edi, eax; stc; call rax; 
0x000000000049406d: xchg edi, eax; stc; call rax; xchg edi, eax; stc; jmp qword ptr [rax - 0x72]; 
0x00000000004940ad: xchg edi, eax; stc; dec dword ptr [rax]; mov dl, 0xf9; call rax; 
0x0000000000494071: xchg edi, eax; stc; jmp qword ptr [rax - 0x72]; 
0x00000000004afd01: xchg edi, eax; stc; jmp qword ptr [rcx]; 
0x000000000049402d: xchg edi, eax; stc; jmp rdi; 
0x000000000041ad34: xchg edi, esp; add al, byte ptr [rax]; add dh, dh; ret; 
0x000000000047aeff: xchg edx, eax; add al, byte ptr [rax]; add byte ptr [rax + 0x39], cl; ret 0xed75; 
0x00000000004b4975: xchg edx, eax; add byte ptr [rax], al; sub byte ptr [rcx], cl; std; call qword ptr [rax]; 
0x00000000004b4925: xchg edx, eax; add byte ptr [rax], al; test al, 7; std; call qword ptr [rdi]; 
0x00000000004022e2: xchg edx, eax; add ecx, dword ptr [rcx]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x000000000049472c: xchg edx, eax; add edi, edx; jmp qword ptr [rdx]; 
0x00000000004a877d: xchg edx, eax; jae 0xa8753; push rsi; pop rdx; je 0xa8748; ret 0xacfc; 
0x0000000000440037: xchg edx, eax; lea rcx, [rip + 0x58341]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043e9c7: xchg edx, eax; lea rcx, [rip + 0x599b1]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000405c58: xchg edx, eax; ret 0x8548; 
0x0000000000483055: xchg edx, eax; ret 0x8949; 
0x00000000004a686f: xchg edx, eax; ret 0xf869; 
0x0000000000446b2d: xchg edx, eax; ror byte ptr [rdi], 0x94; ret 0xc085; 
0x000000000047f21a: xchg edx, eax; shl dword ptr [rbx], 1; add byte ptr [rbp + 0x10], dh; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000042b05c: xchg edx, eax; sub eax, edx; ret; 
0x0000000000494f09: xchg edx, eax; cli; call qword ptr [rax]; 
0x0000000000494a14: xchg edx, eax; cli; jmp qword ptr [rdx]; 
0x000000000049400d: xchg edx, eax; stc; jmp qword ptr [rsi - 0x6d]; 
0x0000000000494009: xchg edx, eax; stc; jmp rsi; 
0x0000000000494478: xchg esi, eax; adc edi, edx; jmp qword ptr [rsi]; 
0x000000000042c4e0: xchg esi, eax; add byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000434713: xchg esi, eax; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004b4e19: xchg esi, eax; add byte ptr [rax], al; and al, 0x35; std; jmp qword ptr [rdx]; 
0x0000000000456011: xchg esi, eax; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4804; 
0x0000000000448124: xchg esi, eax; add rax, rsi; jmp rax; 
0x0000000000485486: xchg esi, eax; call 0x4be30; nop dword ptr [rax]; mov eax, dword ptr [rip + 0x23742a]; ret; 
0x000000000047281e: xchg esi, eax; fdiv st(0), st(0); dec dword ptr [rax + 1]; ret; 
0x0000000000458dc6: xchg esi, eax; jb 0x58dc5; jmp qword ptr [rsi + 0xf]; 
0x0000000000458ec6: xchg esi, eax; jno 0x58ec5; jmp qword ptr [rsi + 0xf]; 
0x000000000042c59d: xchg esi, eax; lock add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000448d81: xchg esi, eax; ret 0xc085; 
0x00000000004a910c: xchg esi, eax; ret 0xcd11; 
0x0000000000448ddf: xchg esi, eax; ret 0xd284; 
0x000000000042c54c: xchg esi, eax; rol byte ptr [rax], 0; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000494020: xchg esi, eax; xchg ebp, eax; stc; jmp qword ptr [rsi]; 
0x00000000004af4a1: xchg esi, eax; clc; call qword ptr [rax]; 
0x00000000004af4b5: xchg esi, eax; clc; jmp qword ptr [rsi]; 
0x000000000042c4fb: xchg esi, eax; nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x0000000000494069: xchg esi, eax; stc; dec dword ptr [rbx - 0x69]; stc; call rax; 
0x0000000000494025: xchg esi, eax; stc; inc esi; xchg esi, eax; stc; jmp qword ptr [rsi - 0x69]; 
0x0000000000494029: xchg esi, eax; stc; jmp qword ptr [rsi - 0x69]; 
0x0000000000493fe5: xchg esi, eax; stc; jmp rcx; 
0x0000000000472793: xchg esi, eax; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000046c7c7: xchg esp, eax; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8948; 
0x0000000000413528: xchg esp, eax; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0xfffffffffffd0d1e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004572c8: xchg esp, eax; and al, 0x84; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add dword ptr [rax + 0x39], r9d; ret; 
0x00000000004572e6: xchg esp, eax; and al, 0x85; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9b, byte ptr [rax + 0x39]; ret; 
0x0000000000457304: xchg esp, eax; and al, 0x86; add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add r9d, dword ptr [rax + 0x39]; ret; 
0x00000000004af4b0: xchg esp, eax; cmp eax, 0x964c0000; clc; jmp qword ptr [rsi]; 
0x00000000004b00ac: xchg esp, eax; cmpsb byte ptr [rsi], byte ptr [rdi]; stc; call rsi; 
0x00000000004a78da: xchg esp, eax; mov ah, 0x5e; sar byte ptr [rip + 0x733db8a1], 0xd7; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x00000000004a931f: xchg esp, eax; push rsi; cli; push 0x6e; ja 0xa92a9; ret 0x48f; 
0x0000000000450ddb: xchg esp, eax; ret 0x1f0f; 
0x0000000000449e9b: xchg esp, eax; ret 0x2044; 
0x0000000000480fbc: xchg esp, eax; ret 0x3d; 
0x000000000041c92e: xchg esp, eax; ret 0x3de9; 
0x000000000046d957: xchg esp, eax; ret 0x7f3c; 
0x0000000000484c21: xchg esp, eax; ret 0x950f; 
0x0000000000402c74: xchg esp, eax; ret 0xb60f; 
0x0000000000446b30: xchg esp, eax; ret 0xc085; 
0x000000000044a1c1: xchg esp, eax; ret 0xc221; 
0x00000000004767e5: xchg esp, eax; ret 0xc283; 
0x0000000000449cd8: xchg esp, eax; ret 0xca21; 
0x0000000000401253: xchg esp, eax; ret 0xd284; 
0x000000000044f806: xchg esp, eax; ret 0xd5e9; 
0x00000000004105ed: xchg esp, eax; ret 0xdaf7; 
0x000000000048c6bb: xchg esp, eax; ret 0xf45; 
0x0000000000422d7a: xchg esp, eax; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x73], 0x44; ret 0xfff; 
0x00000000004674a7: xchg esp, eax; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000494adc: xchg esp, eax; xor eax, 0x3524fffa; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x00000000004abbc9: xchg esp, eax; cmc; call qword ptr [rdx]; 
0x00000000004abbdd: xchg esp, eax; cmc; call rsp; 
0x0000000000466622: xchg esp, eax; ret; 
0x0000000000494099: xchg esp, eax; stc; call rax; 
0x0000000000494099: xchg esp, eax; stc; call rax; xchg esp, eax; stc; jmp qword ptr [rax - 0x6b]; 
0x000000000049409d: xchg esp, eax; stc; jmp qword ptr [rax - 0x6b]; 
0x0000000000493fd9: xchg esp, eax; stc; jmp qword ptr [rcx]; 
0x00000000004a9537: xchg esp, edi; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x000000000045874d: xchg r13, rax; add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000493fe4: xchg r14d, eax; stc; jmp rcx; 
0x000000000049406c: xchg r15, rax; stc; call rax; 
0x000000000049406c: xchg r15, rax; stc; call rax; xchg edi, eax; stc; jmp qword ptr [rax - 0x72]; 
0x0000000000480fb0: xchg r8d, eax; mov eax, 0x15; syscall; 
0x00000000004af4b4: xchg rsi, rax; clc; jmp qword ptr [rsi]; 
0x0000000000497359: xor ah, bh; call qword ptr [rsi + rbp]; cld; call rsp; 
0x0000000000497355: xor ah, bh; jmp rsp; 
0x00000000004246ea: xor ah, byte ptr [rdi]; add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x00000000004945cc: xor al, 0x11; cli; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000401804: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov qword ptr [rsi], rsi; mov eax, 0x9e; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004a686a: xor al, 0x19; xchg dword ptr [rcx + 0x79], ecx; xchg edx, eax; ret 0xf869; 
0x00000000004244f8: xor al, 0x38; add al, byte ptr [rax]; lea rax, [rip + 0x237dd]; cmovne rax, rdx; ret; 
0x0000000000470d0b: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004178bb: xor al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000459e62: xor al, 0x88; add rsi, r8; jmp rsi; 
0x00000000004b16ac: xor al, 0x95; cli; call qword ptr [rax]; 
0x00000000004b4e50: xor al, 0x97; add byte ptr [rax], al; cmp al, 0x35; std; jmp qword ptr [rcx]; 
0x000000000046eefb: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004a7a4a: xor al, 0xd8; ret; 
0x0000000000459065: xor al, 0xf0; test rsi, rsi; je 0x5906e; call rsi; 
0x0000000000459061: xor al, 0xf3; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x0000000000452bde: xor al, 0xf6; ret; 
0x0000000000494ae9: xor al, 0xfa; call rsp; 
0x0000000000494b29: xor al, 0xfa; dec edx; xor edi, edx; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x0000000000494ae5: xor al, 0xfa; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000494b69: xor al, 0xfa; inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x0000000000494969: xor al, 0xfa; jmp qword ptr [rax]; 
0x0000000000494a25: xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494b65: xor al, 0xfa; push qword ptr [rax]; xor al, 0xfa; inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x000000000049496d: xor al, 0xfa; push qword ptr [rsi + 0x26fffa33]; cmp bh, dl; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000476309: xor al, 0xfd; dec dword ptr [rax + 0x39]; ret; 
0x0000000000430da4: xor al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000495020: xor al, bh; cli; call qword ptr [rax - 8]; 
0x00000000004237cb: xor al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x231db; cmovne rax, rdx; ret; 
0x0000000000430fa6: xor al, byte ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044e861: xor bh, bl; jmp qword ptr [rsi + 0x2e]; 
0x00000000004949fc: xor bh, byte ptr [rcx]; cli; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x00000000004b4d79: xor bh, ch; call qword ptr [rbx]; 
0x0000000000494ff0: xor bh, dh; cli; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x00000000004950e9: xor bl, bh; call ptr [rax]; xor bl, bh; push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x00000000004950f1: xor bl, bh; call qword ptr [rax + 0x30]; 
0x0000000000495141: xor bl, bh; jmp qword ptr [rcx + 0x30]; 
0x00000000004950ed: xor bl, bh; push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x0000000000494314: xor bl, bl; stc; call qword ptr [rax]; 
0x000000000042b2ff: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042b28d: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x0000000000411412: xor byte ptr [r8 + 1], r9b; ret 0x8b49; 
0x000000000045b908: xor byte ptr [rax + 0x39], cl; ret 0x8d48; 
0x0000000000411413: xor byte ptr [rax + 1], cl; ret 0x8b49; 
0x00000000004b134c: xor byte ptr [rax + rax], bl; jo 0xb1344; std; jmp qword ptr [rdi]; 
0x0000000000481b20: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x48; jmp qword ptr [rax]; 
0x0000000000481aae: xor byte ptr [rax - 0x75], cl; push rsp; and al, 0x38; mov rcx, qword ptr [rsp + 0x40]; add rsp, 0x58; jmp qword ptr [rax]; 
0x0000000000470517: xor byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000440caf: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000449ad2: xor byte ptr [rax - 0x77], cl; and al, 0x20; je 0x49b00; mov eax, 0x48; syscall; 
0x000000000041348d: xor byte ptr [rax - 0x77], cl; call 0xfffffffffffdac7e; jmp qword ptr [rsi + 0x2e]; 
0x00000000004740df: xor byte ptr [rax - 0x77], cl; out dx, eax; call rbx; 
0x000000000048ab08: xor byte ptr [rax - 0x77], cl; ret 0x2148; 
0x0000000000471982: xor byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000044d16f: xor byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000402f58: xor byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004718ce: xor byte ptr [rax], 1; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x00000000004719d7: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000470eac: xor byte ptr [rax], 1; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x000000000041176b: xor byte ptr [rax], 1; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000040e9d9: xor byte ptr [rax], al; add byte ptr [rax], al; call rax; 
0x000000000040e913: xor byte ptr [rax], al; add byte ptr [rax], al; call rdx; 
0x000000000047e43c: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x7dd70; add rsp, 0xd8; ret; 
0x000000000040e9ff: xor byte ptr [rax], al; add byte ptr [rax], al; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x0000000000448173: xor byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000493e88: xor byte ptr [rax], ch; stc; call qword ptr [rax + 0x29]; 
0x00000000004950f0: xor byte ptr [rax], dh; sti; call qword ptr [rax + 0x30]; 
0x000000000048e06e: xor byte ptr [rbp + 0x27], dh; mov rax, qword ptr [rsi + 0x10]; ret; 
0x000000000048aed0: xor byte ptr [rbp + 0x35], dh; mov rax, qword ptr [rsi + 0xb0]; ret; 
0x00000000004499ba: xor byte ptr [rbp + 0x3b], dh; mov eax, dword ptr [rip + 0x272e49]; test eax, eax; jne 0x49a28; mov eax, 0x48; syscall; 
0x00000000004470e5: xor byte ptr [rbp + 0xf], al; adc dword ptr [rbx], eax; ret; 
0x0000000000443fb1: xor byte ptr [rbp + rcx*4 + 0x1d], cl; mov bh, 0xf; add eax, 0xc634900; xchg ebx, eax; lea rcx, [r11 + rcx]; jmp rcx; 
0x0000000000494238: xor byte ptr [rbp - 0x617f0007], bl; stc; call rax; 
0x0000000000494238: xor byte ptr [rbp - 0x617f0007], bl; stc; call rax; lahf; stc; jmp qword ptr [rax]; 
0x00000000004b51f0: xor byte ptr [rbp - 3], bl; jmp qword ptr [rcx + 9]; 
0x00000000004b044c: xor byte ptr [rbp], cl; add byte ptr [rax - 0x46], dh; stc; call qword ptr [rcx]; 
0x0000000000466829: xor byte ptr [rbx + 0x291c2454], cl; ret 0xe683; 
0x0000000000414af6: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000044f55a: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041795d: xor byte ptr [rbx - 0x438a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000494114: xor byte ptr [rbx - 0x4a9f0007], 0xf9; inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x0000000000494224: xor byte ptr [rbx - 0x537f0007], ch; stc; call rax; 
0x0000000000494224: xor byte ptr [rbx - 0x537f0007], ch; stc; call rax; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x0000000000494090: xor byte ptr [rbx - 0x6c4f0007], dl; stc; inc dword ptr [rax - 0x6c]; stc; call rax; 
0x000000000046d88b: xor byte ptr [rbx - 0x78f0f608], al; ret; 
0x000000000044973f: xor byte ptr [rcx + 0x101b8f2], cl; add byte ptr [rax], al; mov rsi, rdi; mov edi, 0xffffff9c; syscall; 
0x000000000048a925: xor byte ptr [rcx + 0x21], cl; ror byte ptr [rax + 0x21], cl; ret 0xc148; 
0x0000000000478563: xor byte ptr [rcx + 0x29], cl; ret; 
0x000000000047190c: xor byte ptr [rcx + rcx*4 + 0x60], cl; cmp byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x00000000004718cf: xor byte ptr [rcx], al; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x00000000004719d8: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000470ead: xor byte ptr [rcx], al; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rax + 0x18]; 
0x0000000000417507: xor byte ptr [rcx], al; add byte ptr [rax], al; mov qword ptr [rdi + 0xa8], 0; ret; 
0x000000000041176c: xor byte ptr [rcx], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000412a57: xor byte ptr [rcx], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000493ea8: xor byte ptr [rcx], dh; stc; call rax; 
0x0000000000493ea8: xor byte ptr [rcx], dh; stc; call rax; and cl, bh; jmp rax; 
0x00000000004940dc: xor byte ptr [rdi - 0x469f0007], 0xf9; call qword ptr [rax - 0x45]; 
0x00000000004940ac: xor byte ptr [rdi - 0x4df70007], dl; stc; call rax; 
0x0000000000493f64: xor byte ptr [rdi - 7], ch; jmp qword ptr [rax]; 
0x0000000000494e60: xor byte ptr [rdi], bh; cli; inc dword ptr [rax + 0x41]; cli; call qword ptr [rax + 0x43]; 
0x0000000000446f96: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x000000000045416b: xor byte ptr [rdi], cl; test byte ptr [rdi + rdi*8 - 1], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000494950: xor byte ptr [rdi], dh; cli; inc eax; cli; call qword ptr [rax + 0x36]; 
0x0000000000494b68: xor byte ptr [rdx + rdi*8], dh; inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x0000000000494f58: xor byte ptr [rdx - 0x547f0006], ch; cli; call rax; 
0x0000000000494f58: xor byte ptr [rdx - 0x547f0006], ch; cli; call rax; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000494ee0: xor byte ptr [rdx - 0x7c2f0006], al; cli; push qword ptr [rax - 0x7b]; cli; call qword ptr [rax]; 
0x00000000004245ea: xor byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x22ffc; cmovne rax, rdx; ret; 
0x00000000004b0527: xor byte ptr [rsi + 0x380e4106], al; add dword ptr [rdi], 3; ret 0xa01; 
0x00000000004a98d6: xor byte ptr [rsi + 0x4ce2e5dd], 0x67; add ch, byte ptr [rbp + rbp*2 + 0x5b]; ret 0x6f9; 
0x000000000042c28f: xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000042c28a: xor byte ptr [rsi + 0xf], ah; out dx, eax; push rsi; xor byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x000000000047330c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000042b300: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042b28e: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000493fa0: xor byte ptr [rsi - 0x711f0007], cl; stc; call rax; 
0x0000000000431194: xor byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000049574c: xor byte ptr [rsi], bh; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000497304: xor byte ptr [rsp + rdi*8], ch; push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x00000000004942e0: xor cl, ah; stc; call qword ptr [rax]; 
0x0000000000493ea5: xor cl, bh; push qword ptr [rax]; xor ecx, edi; call rax; 
0x0000000000493ea5: xor cl, bh; push qword ptr [rax]; xor ecx, edi; call rax; and cl, bh; jmp rax; 
0x0000000000495044: xor cl, bh; cli; call qword ptr [rax - 7]; 
0x000000000046f1c5: xor cl, byte ptr [rax - 0x73]; cmp eax, 0x34adf; movsxd rax, dword ptr [rdi + rax*4]; add rax, rdi; jmp rax; 
0x000000000041219d: xor cl, byte ptr [rax - 0x77]; ret 0x2948; 
0x000000000047dc63: xor cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x000000000045b477: xor cl, byte ptr [rax - 0x7d]; ret 0x4901; 
0x000000000048d0fe: xor cl, byte ptr [rax]; jne 0x8d11c; mov rax, qword ptr [rax]; ret; 
0x0000000000405c80: xor cl, ch; ret; 
0x0000000000494404: xor cl, cl; stc; inc dword ptr [rax - 0x2f000636]; retf; stc; jmp qword ptr [rax]; 
0x00000000004ac235: xor dh, dh; jmp qword ptr [rcx + 2]; 
0x000000000045a2c9: xor dh, dh; ret 0x4002; 
0x0000000000494fac: xor dl, 0xfa; call qword ptr [rax - 0x5f00050e]; cli; inc eax; cli; call rax; 
0x0000000000494b79: xor dl, bh; call qword ptr [rax]; 
0x000000000045d47d: xor dl, bh; dec dword ptr [rax + 0x29]; ret; 
0x000000000045ea5f: xor dl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000494bf9: xor dl, bh; jmp rdx; 
0x0000000000494bf5: xor dl, bh; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x0000000000495064: xor dl, bh; cli; call qword ptr [rax - 6]; 
0x0000000000494504: xor dl, byte ptr [rdx]; cli; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494f98: xor dl, dh; cli; inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; 
0x0000000000480130: xor dl, dh; ret; 
0x000000000045d47c: xor dl, dil; dec dword ptr [rax + 0x29]; ret; 
0x0000000000465dfd: xor dword ptr [rax - 0x77], ecx; ror dword ptr [rax - 0x77], 1; ret 0xe7e9; 
0x000000000044c13f: xor dword ptr [rax - 0x7d], ecx; ret 0xf01; 
0x0000000000417506: xor dword ptr [rax], 0x48000001; mov dword ptr [rdi + 0xa8], 0; ret; 
0x000000000048d16d: xor dword ptr [rax], ecx; jne 0x8d175; mov qword ptr [rax], rdx; ret; 
0x000000000041be49: xor dword ptr [rbx - 0x76b7f020], eax; ret 0x8948; 
0x0000000000468973: xor dword ptr [rbx - 7], edi; dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x00000000004495a6: xor dword ptr [rcx - 0x2976b739], ecx; mov eax, 5; syscall; 
0x000000000042d97b: xor dword ptr [rdi + 6], esp; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042448a: xor dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x2316c; cmovne rax, rdx; ret; 
0x00000000004310fb: xor dword ptr [rsi], eax; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000047f219: xor eax, 0x23d192; jne 0x7f230; lea rax, [rsi + 1]; mov qword ptr [rip + 0x23d185], rax; ret; 
0x000000000046b77e: xor eax, 0x24b69d; jmp rax; 
0x00000000004614b3: xor eax, 0x255268; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e5b: xor eax, 0x2558c0; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000494965: xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000494ae1: xor eax, 0x34b4fffa; cli; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000494a21: xor eax, 0x34d2fffa; cli; jmp qword ptr [rdx + 0x34]; 
0x0000000000494add: xor eax, 0x3524fffa; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x0000000000494a1d: xor eax, 0x3542fffa; cli; call rdx; 
0x0000000000494a1d: xor eax, 0x3542fffa; cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x000000000049499d: xor eax, 0x3556fffa; cli; jmp rsi; 
0x0000000000494b59: xor eax, 0x3580fffa; cli; call qword ptr [rax]; 
0x0000000000493eb5: xor eax, 0x36e0fff9; stc; jmp qword ptr [rax + 0x38]; 
0x00000000004a79fa: xor eax, 0x444be0a8; sar byte ptr [rsi + rax*2], 0xf8; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004476a3: xor eax, 0x48000002; mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000448062: xor eax, 0x4d079; movsxd rax, dword ptr [rsi + rdi*4]; add rax, rsi; jmp rax; 
0x0000000000430d06: xor eax, 0x63490006; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000447fc5: xor eax, 0x7701fa80; cmp dh, byte ptr [rdx + 2]; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x000000000046570a: xor eax, 0x89ffffe6; ret; 
0x000000000041ae60: xor eax, 0x8b490108; or byte ptr [r15], r9b; test ebx, ebp; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000045ac68: xor eax, dword ptr [0x28]; jne 0x5ac76; add rsp, 0x18; ret; 
0x000000000048421a: xor eax, dword ptr [0x28]; jne 0x8425e; leave; ret; 
0x000000000040e9d6: xor eax, dword ptr [0x30]; call rax; 
0x0000000000447270: xor eax, dword ptr [rax + 0x3b7701fa]; jb 0x4727d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000482549: xor eax, dword ptr [rdi - 0x3f7a0003]; jne 0x825a0; mov ebx, eax; mov rdi, qword ptr [rsp + 0x18]; mov rdx, qword ptr [rsp + 0x10]; call rdx; 
0x0000000000430ef4: xor eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000415710: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004164f4: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045c9b9: xor eax, eax; add rsp, 8; ret; 
0x000000000047c591: xor eax, eax; call 0x7e510; mov r11, qword ptr [rbp - 0xd8]; mov rax, qword ptr [rbp - 0xb8]; add rax, r11; call rax; 
0x000000000047d1fd: xor eax, eax; call 0x7e510; mov rax, qword ptr [rbp - 0xb0]; add rax, qword ptr [rbp - 0xb8]; call rax; 
0x0000000000418787: xor eax, eax; cmp esi, -1; setne al; neg eax; ret; 
0x000000000044bd07: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000471f21: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004720fd: xor eax, eax; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000410763: xor eax, eax; mov rdi, rbp; call qword ptr [rbp + 0x20]; 
0x00000000004740d6: xor eax, eax; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x000000000047582a: xor eax, eax; mov rdx, rsp; mov esi, 0x5401; mov eax, ecx; syscall; 
0x0000000000473dbc: xor eax, eax; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046cd89: xor eax, eax; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004730f2: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000405e1f: xor eax, eax; pop rbp; pop r12; ret; 
0x000000000041474b: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040ece5: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000042381c: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000412dc2: xor eax, eax; pop rbx; ret; 
0x0000000000473f61: xor eax, eax; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000425e9e: xor eax, eax; sub eax, ecx; ret; 
0x000000000048aa2c: xor eax, eax; test edi, edi; jne 0x8a960; add rsp, 0x38; ret; 
0x0000000000473ee7: xor eax, eax; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000475cd8: xor eax, eax; leave; ret; 
0x000000000040ec2d: xor eax, eax; ret; 
0x00000000004497ba: xor eax, eax; syscall; 
0x000000000042b77c: xor eax, eax; vzeroupper; ret; 
0x000000000047322b: xor eax, edx; and rax, rcx; je 0x733f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004734af: xor eax, edx; and rsi, rax; je 0x733f0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000047d74c: xor ebp, ebp; xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x0000000000458c28: xor ebp, ecx; ret 0xfffd; 
0x0000000000485b53: xor ebx, ebx; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret; 
0x0000000000458926: xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x000000000044964e: xor ecx, dword ptr [0x28]; jne 0x49709; add rsp, 0x68; ret; 
0x0000000000449760: xor ecx, dword ptr [0x28]; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499e1: xor ecx, dword ptr [0x28]; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449af0: xor ecx, dword ptr [0x28]; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000045aeb0: xor ecx, dword ptr [0x28]; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688ab: xor ecx, dword ptr [0x28]; jne 0x688bc; add rsp, 0xd8; ret; 
0x0000000000475663: xor ecx, dword ptr [0x28]; jne 0x75729; add rsp, 0x78; ret; 
0x0000000000475775: xor ecx, dword ptr [0x28]; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004758a7: xor ecx, dword ptr [0x28]; jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000481cee: xor ecx, dword ptr [0x28]; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481dae: xor ecx, dword ptr [0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f0f: xor ecx, dword ptr [0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821de: xor ecx, dword ptr [0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000488304: xor ecx, dword ptr [0x28]; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000040f7ab: xor ecx, dword ptr [0x28]; jne 0xf7bc; add rsp, 0xd8; ret; 
0x000000000044a79f: xor ecx, dword ptr [rax - 0x75]; jl 0x4a7c8; or byte ptr [rax - 0x75], cl; and al, 0x10; call rax; 
0x00000000004732b9: xor ecx, eax; and rsi, rcx; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000044e7ce: xor ecx, ecx; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000046bc95: xor ecx, ecx; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x000000000047e6d1: xor ecx, ecx; test rsi, rsi; je 0x7e6db; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000473ee9: xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000493ea9: xor ecx, edi; call rax; 
0x0000000000493ea9: xor ecx, edi; call rax; and cl, bh; jmp rax; 
0x000000000044c11c: xor edi, dword ptr [rax]; ret 0x2f75; 
0x0000000000493eb1: xor edi, ecx; jmp qword ptr [rax + 0x35]; 
0x0000000000493eed: xor edi, ecx; push rax; stc; jmp qword ptr [rax + 0x4d]; 
0x0000000000401288: xor edi, edi; mov eax, edx; syscall; 
0x000000000044a516: xor edi, edi; or r10d, 0x40; mov eax, ecx; syscall; 
0x000000000041ab11: xor edi, edi; pop rbx; mov rax, rdi; pop rbp; pop r12; ret; 
0x000000000048aa2a: xor edi, edi; xor eax, eax; test edi, edi; jne 0x8a960; add rsp, 0x38; ret; 
0x000000000047d749: xor edi, edi; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x000000000044a32c: xor edi, edi; syscall; 
0x00000000004949f1: xor edi, edx; call qword ptr [rdx]; 
0x0000000000494931: xor edi, edx; inc dword ptr [rax + 0x3a]; cli; call rax; 
0x0000000000494931: xor edi, edx; inc dword ptr [rax + 0x3a]; cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494b6d: xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x0000000000494971: xor edi, edx; jmp qword ptr [rsi]; 
0x0000000000494b31: xor edi, edx; jmp rax; 
0x0000000000494b2d: xor edi, edx; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x0000000000449530: xor edx, dword ptr [0x28]; jne 0x49549; add rsp, 0x28; ret; 
0x000000000044a45f: xor edx, dword ptr [0x28]; jne 0x4a477; add rsp, 0x28; ret; 
0x0000000000484ec6: xor edx, dword ptr [0x28]; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fa9: xor edx, dword ptr [0x28]; jne 0x84fc4; add rsp, 0x38; ret; 
0x000000000040e910: xor edx, dword ptr [0x30]; call rdx; 
0x000000000040e9fc: xor edx, dword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000044e7d3: xor edx, edx; add eax, 1; push rax; call rbx; 
0x000000000047b51a: xor edx, edx; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000044bdff: xor edx, edx; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000047e5e0: xor edx, edx; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret; 
0x0000000000448198: xor edx, edx; and eax, 0x3fffc00; div ecx; pop rbx; mov eax, eax; ret; 
0x0000000000475751: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x0000000000465e53: xor edx, edx; div r8d; add r9d, eax; mov eax, r9d; ret; 
0x00000000004170c3: xor edx, edx; jmp rax; 
0x0000000000473eeb: xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000440684: xor edx, edx; lea rax, [rdi + rax + 0x20]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406a4: xor edx, edx; lea rax, [rdi + rax + 0x40]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x00000000004406e2: xor edx, edx; lea rax, [rdi + rax + 0x60]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044054a: xor edx, edx; lea rax, [rdi + rax]; cmp sil, byte ptr [rax]; cmovne rax, rdx; vzeroupper; ret; 
0x000000000044a323: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000041f3cc: xor edx, edx; mov rax, rdx; pop rbx; pop rbp; ret; 
0x000000000040dc16: xor edx, edx; mov rsi, r9; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000424769: xor esi, dword ptr [rcx]; add byte ptr [rip + 0x20c00], ah; cmp eax, 0xc00; lea rax, [rip + 0x6c52]; cmove rax, rdx; ret; 
0x00000000004a7cbd: xor esi, dword ptr [rcx]; xchg edi, eax; call qword ptr [rbx + 0x7c]; 
0x00000000004614bc: xor esi, esi; jmp rax; 
0x0000000000480fa5: xor esi, esi; lea rdi, [rip + 0x23f4c]; mov qword ptr [rbp - 0x70], rax; mov eax, 0x15; syscall; 
0x000000000047d74e: xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x000000000044c00b: xor esi, esi; lea rdi, [rip + 0x49b11]; mov eax, 0x15; syscall; 
0x000000000041dc07: xor esi, esi; mov dword ptr fs:[rax], 0xc; mov rax, rsi; ret; 
0x000000000044bdfe: xor r10, r10; add rdi, 0x308; mov esi, 0x80; syscall; 
0x000000000047b519: xor r10d, r10d; add rdi, 0x1c; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000475750: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x75788; mov eax, 0x101; syscall; 
0x000000000047d74b: xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x000000000047d748: xor r15d, r15d; xor r13d, r13d; xor esi, esi; lea rdi, [rip + 0x277a3]; mov eax, 0x15; syscall; 
0x0000000000471f20: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004720fc: xor r8d, r8d; mov rcx, r15; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x00000000004740d5: xor r8d, r8d; mov rdx, r14; lea r9, [rsp + 0x30]; mov rdi, rbp; call rbx; 
0x0000000000473dbb: xor r8d, r8d; mov rsi, rbp; mov rdi, qword ptr [r12]; lea r9, [rsp + 0x38]; lea rcx, [rax + 1]; call rbx; 
0x000000000046cd88: xor r8d, r8d; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x0000000000473f60: xor r8d, r8d; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000473ee6: xor r8d, r8d; xor ecx, ecx; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045ac67: xor rax, qword ptr [0x28]; jne 0x5ac76; add rsp, 0x18; ret; 
0x0000000000484219: xor rax, qword ptr [0x28]; jne 0x8425e; leave; ret; 
0x000000000040e9d5: xor rax, qword ptr [0x30]; call rax; 
0x000000000045ac66: xor rax, qword ptr fs:[0x28]; jne 0x5ac76; add rsp, 0x18; ret; 
0x0000000000484218: xor rax, qword ptr fs:[0x28]; jne 0x8425e; leave; ret; 
0x000000000040e9d4: xor rax, qword ptr fs:[0x30]; call rax; 
0x0000000000444b00: xor rax, rax; ret; 
0x000000000047322a: xor rax, rdx; and rax, rcx; je 0x733f0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004734ae: xor rax, rdx; and rsi, rax; je 0x733f0; bsr rax, rsi; add rax, rdi; ret; 
0x000000000044964d: xor rcx, qword ptr [0x28]; jne 0x49709; add rsp, 0x68; ret; 
0x000000000044975f: xor rcx, qword ptr [0x28]; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499e0: xor rcx, qword ptr [0x28]; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449aef: xor rcx, qword ptr [0x28]; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000045aeaf: xor rcx, qword ptr [0x28]; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688aa: xor rcx, qword ptr [0x28]; jne 0x688bc; add rsp, 0xd8; ret; 
0x0000000000475662: xor rcx, qword ptr [0x28]; jne 0x75729; add rsp, 0x78; ret; 
0x0000000000475774: xor rcx, qword ptr [0x28]; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004758a6: xor rcx, qword ptr [0x28]; jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000481ced: xor rcx, qword ptr [0x28]; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481dad: xor rcx, qword ptr [0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f0e: xor rcx, qword ptr [0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821dd: xor rcx, qword ptr [0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000488303: xor rcx, qword ptr [0x28]; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000040f7aa: xor rcx, qword ptr [0x28]; jne 0xf7bc; add rsp, 0xd8; ret; 
0x000000000044964c: xor rcx, qword ptr fs:[0x28]; jne 0x49709; add rsp, 0x68; ret; 
0x000000000044975e: xor rcx, qword ptr fs:[0x28]; jne 0x497ab; add rsp, 0x58; ret; 
0x00000000004499df: xor rcx, qword ptr fs:[0x28]; jne 0x49a99; add rsp, 0x78; ret; 
0x0000000000449aee: xor rcx, qword ptr fs:[0x28]; jne 0x49b43; add rsp, 0x68; ret; 
0x000000000045aeae: xor rcx, qword ptr fs:[0x28]; jne 0x5af03; add rsp, 0x148; ret; 
0x00000000004688a9: xor rcx, qword ptr fs:[0x28]; jne 0x688bc; add rsp, 0xd8; ret; 
0x0000000000475661: xor rcx, qword ptr fs:[0x28]; jne 0x75729; add rsp, 0x78; ret; 
0x0000000000475773: xor rcx, qword ptr fs:[0x28]; jne 0x757c3; add rsp, 0x58; ret; 
0x00000000004758a5: xor rcx, qword ptr fs:[0x28]; jne 0x758cb; add rsp, 0x38; ret; 
0x0000000000481cec: xor rcx, qword ptr fs:[0x28]; jne 0x81d23; add rsp, 0x38; ret; 
0x0000000000481dac: xor rcx, qword ptr fs:[0x28]; jne 0x81dde; add rsp, 0x68; ret; 
0x0000000000481f0d: xor rcx, qword ptr fs:[0x28]; jne 0x81f4e; add rsp, 0x78; ret; 
0x00000000004821dc: xor rcx, qword ptr fs:[0x28]; jne 0x8220e; add rsp, 0x68; ret; 
0x0000000000488302: xor rcx, qword ptr fs:[0x28]; jne 0x8831c; add rsp, 0x38; ret; 
0x000000000040f7a9: xor rcx, qword ptr fs:[0x28]; jne 0xf7bc; add rsp, 0xd8; ret; 
0x00000000004732b8: xor rcx, rax; and rsi, rcx; je 0x733f0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000044952f: xor rdx, qword ptr [0x28]; jne 0x49549; add rsp, 0x28; ret; 
0x000000000044a45e: xor rdx, qword ptr [0x28]; jne 0x4a477; add rsp, 0x28; ret; 
0x0000000000484ec5: xor rdx, qword ptr [0x28]; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fa8: xor rdx, qword ptr [0x28]; jne 0x84fc4; add rsp, 0x38; ret; 
0x000000000040e90f: xor rdx, qword ptr [0x30]; call rdx; 
0x000000000040e9fb: xor rdx, qword ptr [0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x000000000044952e: xor rdx, qword ptr fs:[0x28]; jne 0x49549; add rsp, 0x28; ret; 
0x000000000044a45d: xor rdx, qword ptr fs:[0x28]; jne 0x4a477; add rsp, 0x28; ret; 
0x0000000000484ec4: xor rdx, qword ptr fs:[0x28]; jne 0x84ed4; add rsp, 0x38; ret; 
0x0000000000484fa7: xor rdx, qword ptr fs:[0x28]; jne 0x84fc4; add rsp, 0x38; ret; 
0x000000000040e90e: xor rdx, qword ptr fs:[0x30]; call rdx; 
0x000000000040e9fa: xor rdx, qword ptr fs:[0x30]; mov rdi, qword ptr [rax + 0x20]; call rdx; 
0x00000000004ac234: xor sil, r14b; jmp qword ptr [rcx + 2]; 
0x000000000041f66d: xsaves ptr [rcx]; add byte ptr [rax - 0x7f], cl; in al, dx; add byte ptr [rax], 0; add al, ch; ret; 
0x00000000004114a3: cdq; add byte ptr [rax], al; add byte ptr [rcx + 0x2b], cl; and byte ptr [r8 + 1], r9b; ret; 
0x000000000043ea00: cdq; add eax, 0x8a0c8b00; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e9cc: cdq; add eax, 0x91148b00; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000048c544: cdq; add rax, r9; jmp rax; 
0x0000000000459a23: cdq; and eax, 0x358d4800; ret; 
0x00000000004a8da0: cdq; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004a8d9b: cdq; mov edi, 0x99b51319; in eax, 0xff; lahf; mov dh, 0xc7; ret 0xe71f; 
0x00000000004316d3: cdq; sub eax, dword ptr [rsi]; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004491df: cdq; ret; 
0x00000000004afd85: cdq; stc; jmp qword ptr [rax]; 
0x0000000000494231: cdq; stc; jmp rax; 
0x00000000004b5a69: cdq; std; call qword ptr [rdx]; 
0x0000000000460e09: cdqe; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x00000000004614ab: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e53: cdqe; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460db8: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461167: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461119: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046106a: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046100e: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d6e: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d20: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608bf: cdqe; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000477ee4: clc; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004ae064: clc; add byte ptr [rax], al; add byte ptr [rcx + rbp], cl; add ah, al; sal esi, cl; call qword ptr [rax]; 
0x00000000004b0014: clc; add byte ptr [rax], al; js 0xaffbf; stc; jmp qword ptr [rcx]; 
0x0000000000469cf1: clc; add cl, byte ptr [rax + 0x29]; ret 0xb8; 
0x000000000047e633: clc; add cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x000000000040ac6f: clc; add cl, byte ptr [rdi]; test ch, dl; add al, 0; add byte ptr [rbx - 0x7bf0fc08], al; ret; 
0x0000000000422d43: clc; add dword ptr [rax - 0x73], ecx; clc; cmovne rax, rcx; ret; 
0x000000000040d51d: clc; add dword ptr [rbx - 0x7cb70030], eax; ret; 
0x00000000004885ef: clc; add ebx, dword ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x000000000044fcc2: clc; add ecx, dword ptr [rax - 0x77]; or byte ptr [r15], 0x8e; ret 1; 
0x000000000047490b: clc; add rax, rcx; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440adb: clc; add rax, rcx; sub rax, rdx; vzeroupper; ret; 
0x000000000042b127: clc; add rax, rcx; ret; 
0x000000000042b654: clc; add rax, rcx; vzeroupper; ret; 
0x0000000000493d86: clc; call qword ptr [rax - 0xb]; 
0x0000000000493d86: clc; call qword ptr [rax - 0xb]; clc; jmp qword ptr [rax]; 
0x00000000004af4a2: clc; call qword ptr [rax]; 
0x000000000047b62e: clc; call qword ptr [rbp + 0x53]; 
0x00000000004af52e: clc; call qword ptr [rsi + 0x16]; 
0x0000000000422d48: clc; cmovne rax, rcx; ret; 
0x00000000004af514: clc; cmp eax, 0xf5180000; clc; call qword ptr [rax]; 
0x000000000042cd8d: clc; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x0000000000476906: clc; dec dword ptr [rax + 0x39]; ret; 
0x0000000000472820: clc; dec dword ptr [rax + 1]; ret; 
0x000000000047fad4: clc; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 0x39], ecx; ret 0x1272; 
0x000000000048ca2e: clc; dec dword ptr [rax - 0x75]; push rbp; add byte ptr [rax + 0x63], cl; ret 0xbc80; 
0x000000000046fd39: clc; dec dword ptr [rax - 0x77]; ret 0xf41; 
0x0000000000401acc: clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000478a0b: clc; dec dword ptr [rax - 0x7d]; ret; 
0x00000000004619c6: clc; dec dword ptr [rcx - 0x77]; ret; 
0x00000000004619ef: clc; dec dword ptr [rdi]; test byte ptr [rcx - 0x7a000007], al; ror byte ptr [rdi], 0x84; ret; 
0x000000000045f96e: clc; dec dword ptr [rdi]; test dword ptr [rsi - 0x16000007], esi; ret; 
0x00000000004674a4: clc; dec dword ptr [rdi]; xchg esp, eax; shr cl, 0xfd; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000045ed23: clc; idiv bh; inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret 0xfffa; 
0x000000000046a393: clc; idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000493d7e: clc; inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x0000000000459792: clc; inc dword ptr [rcx - 0x77]; ret 0x840f; 
0x0000000000474db1: clc; ja 0x74d77; nop word ptr cs:[rax + rax]; nop; mov eax, 0xc9; syscall; 
0x0000000000410682: clc; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000413ab4: clc; jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000045deb6: clc; jbe 0x5f4d5; mov rdx, r13; mov rsi, r9; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rbx + 0x38]; 
0x000000000045e45c: clc; jbe 0x5f569; mov rdx, r13; mov rsi, qword ptr [rbp - 0x950]; mov rdi, qword ptr [rbp - 0x8a8]; call qword ptr [rcx + 0x38]; 
0x00000000004481b6: clc; jg 0x481b0; int1; mov eax, eax; ret; 
0x0000000000454037: clc; jg 0x53fc3; ret 0xdb76; 
0x0000000000493d82: clc; jmp qword ptr [rax]; 
0x00000000004af3c6: clc; jmp qword ptr [rdi + 0x2b]; 
0x0000000000472430: clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004725e5: clc; jmp qword ptr [rsi + 0xf]; 
0x000000000048c11c: clc; jmp qword ptr [rsi - 0x70]; 
0x00000000004af4b6: clc; jmp qword ptr [rsi]; 
0x00000000004608cf: clc; jmp rax; 
0x00000000004b3114: clc; jns 0xb3117; add al, bl; and edi, esp; jmp qword ptr [rcx]; 
0x0000000000432c96: clc; lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ae0: clc; lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301d2: clc; lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f8: clc; lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a7a02: clc; mov ch, 0x36; push rcx; call qword ptr [rsi]; 
0x00000000004128d4: clc; mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000042f297: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fbeb: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fdeb: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffeb: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f27b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fbbf: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fdbf: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042ffbf: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042f24f: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042fc07: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434b57: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fe07: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434ac7: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430007: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434a37: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042f2b3: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000447c9e: clc; mov qword ptr [rdi], rcx; ret; 
0x0000000000447e1d: clc; mov qword ptr [rdi], rcx; vzeroupper; ret; 
0x00000000004384ec: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000446f2a: clc; mov qword ptr [rdi], rsi; ret; 
0x000000000048add7: clc; mov r8, qword ptr [rax]; lea rax, [rax + 8]; mov qword ptr [r10], r8; ret; 
0x000000000042d30f: clc; mov rax, qword ptr [rdi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x000000000048d651: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; ret; 
0x000000000042cd89: clc; mov rcx, qword ptr [rsi - 8]; cmp rcx, rax; jne 0x2d7c3; xor eax, eax; ret; 
0x0000000000446f22: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi + rdx - 8], rcx; mov qword ptr [rdi], rsi; ret; 
0x000000000042bad2: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000046f2a1: clc; or dword ptr [rdi], ecx; xchg dword ptr [rdi], esi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x8b08; 
0x000000000041ab16: clc; pop rbp; pop r12; ret; 
0x00000000004b1114: clc; pop rcx; add byte ptr [rax], al; sub byte ptr [rcx - 6], bl; jmp qword ptr [rsi + 0xa]; 
0x00000000004718d7: clc; push qword ptr [rbp + rax + 0x5b]; pop rbp; pop r12; ret; 
0x000000000041795f: clc; push qword ptr [rbp - 0x44]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475483: clc; push qword ptr [rdi + rax*2 - 0x77]; ret 0xe283; 
0x0000000000490ee8: clc; push rbx; ret; 
0x000000000041050f: clc; ret 0x2a; 
0x0000000000482d8a: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000047451f: clc; shr rax, 2; ret; 
0x0000000000485221: clc; sub rax, r8; ret; 
0x00000000004749c6: clc; sub rax, rdx; shr rax, 2; vzeroupper; ret; 
0x0000000000440b96: clc; sub rax, rdx; vzeroupper; ret; 
0x0000000000446b3b: clc; sub rax, rsi; ret; 
0x0000000000484217: clc; xor rax, qword ptr fs:[0x28]; jne 0x8425e; leave; ret; 
0x00000000004b5a68: clc; cdq; std; call qword ptr [rdx]; 
0x0000000000495021: clc; cli; call qword ptr [rax - 8]; 
0x000000000049503d: clc; cli; call qword ptr [rax]; 
0x0000000000495035: clc; cli; call rax; 
0x000000000049501d: clc; cli; push qword ptr [rax]; clc; cli; call qword ptr [rax - 8]; 
0x0000000000495039: clc; cli; push rax; clc; cli; call qword ptr [rax]; 
0x000000000048d4d3: clc; leave; ret; 
0x0000000000412905: clc; ret; 
0x000000000042b7cb: clc; vzeroupper; ret; 
0x00000000004a9538: cld; adc ch, byte ptr [rip + 0x8acc8c6]; and dword ptr cs:[rax], edx; jmp qword ptr [rdi]; 
0x0000000000400b8e: cld; adc dword ptr [rsi - 0x24], edi; nop; pop rbp; ret; 
0x00000000004480da: cld; add eax, dword ptr [rax]; cmp edx, 0xff; cmove rax, rcx; pop rbx; ret; 
0x00000000004480bf: cld; add eax, dword ptr [rax]; pop rbx; ret; 
0x00000000004adc18: cld; and al, 0; add byte ptr [rbp + rsi*4 - 0xa], dl; call qword ptr [rsi]; 
0x00000000004b3372: cld; call qword ptr [rax + 5]; 
0x00000000004a39da: cld; call qword ptr [rax - 0x50]; 
0x00000000004b467a: cld; call qword ptr [rax]; 
0x00000000004b4622: cld; call qword ptr [rbx]; 
0x00000000004b42d6: cld; call qword ptr [rdi + 1]; 
0x00000000004b3d42: cld; call qword ptr [rdx + 1]; 
0x00000000004b43da: cld; call qword ptr [rdx]; 
0x000000000049735a: cld; call qword ptr [rsi + rbp]; cld; call rsp; 
0x00000000004b3f26: cld; call rdx; 
0x000000000049735e: cld; call rsp; 
0x0000000000495718: cld; cmp eax, 0x3d84fffb; sti; jmp rsp; 
0x00000000004462d1: cld; cmp eax, ecx; jne 0x464e0; xor eax, eax; ret; 
0x000000000042cdb6: cld; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x000000000044cf73: cld; dec dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x73], 0x3d; adc byte ptr [rcx + 0xf480004], 0x44; ret; 
0x0000000000492689: cld; idiv bh; ret; 
0x00000000004a39d2: cld; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; call qword ptr [rax - 0x50]; 
0x00000000004a39c2: cld; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax - 0x50]; 
0x00000000004a39f6: cld; inc dword ptr [rax - 0x7f000351]; scasd eax, dword ptr [rdi]; cld; jmp qword ptr [rax]; 
0x000000000047bbee: cld; inc dword ptr [rbp + 0x5b0e78c0]; ret; 
0x000000000044819c: cld; inc dword ptr [rbx]; div ecx; pop rbx; mov eax, eax; ret; 
0x000000000044810a: cld; inc dword ptr [rbx]; pop rbx; ret; 
0x0000000000486fd7: cld; inc edi; sbb byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004a39ca: cld; jmp qword ptr [rax - 0x50]; 
0x000000000049730a: cld; jmp qword ptr [rax]; 
0x00000000004b41ce: cld; jmp qword ptr [rbx + 1]; 
0x00000000004b2d1a: cld; jmp qword ptr [rbx]; 
0x00000000004b3742: cld; jmp qword ptr [rcx + 0xe]; 
0x00000000004b311a: cld; jmp qword ptr [rcx]; 
0x00000000004b453e: cld; jmp qword ptr [rdx + 5]; 
0x00000000004b3a6e: cld; jmp qword ptr [rdx]; 
0x00000000004505a4: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000458dc8: cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004b3a02: cld; jmp qword ptr [rsi + 5]; 
0x00000000004b3b22: cld; jmp qword ptr [rsi + 7]; 
0x000000000047d35c: cld; jmp qword ptr [rsi - 0x70]; 
0x00000000004b3ff2: cld; jmp qword ptr [rsi]; 
0x00000000004a3d6e: cld; jmp rax; 
0x00000000004b2cba: cld; jmp rdx; 
0x0000000000497356: cld; jmp rsp; 
0x000000000042fa22: cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fc25: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fe25: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430025: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000447ca6: cld; mov dword ptr [rdi], ecx; ret; 
0x0000000000447e28: cld; mov dword ptr [rdi], ecx; vzeroupper; ret; 
0x00000000004384fe: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000446f38: cld; mov dword ptr [rdi], esi; ret; 
0x000000000042cdb3: cld; mov eax, dword ptr [rdi - 4]; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x00000000004462ce: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x464e0; xor eax, eax; ret; 
0x000000000042d015: cld; mov ecx, dword ptr [rsi - 4]; cmp ecx, eax; jne 0x2d7cf; xor eax, eax; ret; 
0x0000000000446f32: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000042f45a: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f63a: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f81a: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9fa: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f61e: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f7fe: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f9de: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f656: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434ce6: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f836: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434c66: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fa16: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434be6: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f476: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434d66: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000449ca7: cld; mov rdi, r12; mov eax, 0x4f; syscall; 
0x0000000000423170: cld; or eax, dword ptr [rdi]; add byte ptr [rax + 0x63], cl; add al, 0x82; add rax, rdx; jmp rax; 
0x0000000000497306: cld; push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x0000000000497302: cld; push qword ptr [rax]; sub al, 0xfc; push qword ptr [rax + 0x2b]; cld; jmp qword ptr [rax]; 
0x00000000004a6eb6: cld; test al, 0x97; xchg esp, eax; ret; 
0x000000000043866d: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000438433: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x000000000043892f: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000446bfb: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004b4e18: cld; xchg esi, eax; add byte ptr [rax], al; and al, 0x35; std; jmp qword ptr [rdx]; 
0x0000000000497354: cld; xor ah, bh; jmp rsp; 
0x00000000004b0869: cld; hlt; jmp qword ptr [rbx]; 
0x0000000000400ff0: cld; ret; 
0x00000000004948ed: cld; stc; call qword ptr [rax - 0x1a]; 
0x00000000004b2b09: cld; sti; jmp qword ptr [rbx]; 
0x00000000004b2b39: cld; sti; jmp qword ptr [rsi]; 
0x00000000004477c2: cld; vzeroupper; ret; 
0x00000000004ab668: cli; adc dh, bh; call rcx; 
0x0000000000447c8c: cli; add al, 0x73; adc eax, dword ptr [rax + 0x157701fa]; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x0000000000473c5e: cli; add byte ptr [rax], dl; add byte ptr [rax], al; lea rdx, [rip - 0x2be2a]; cmove rax, rdx; ret; 
0x00000000004155a1: cli; add ch, al; pop rax; ret; 
0x00000000004156a8: cli; add ch, al; push rcx; ret 0xffff; 
0x0000000000469245: cli; add cl, byte ptr [rax + 0x39]; ret 0x850f; 
0x0000000000411562: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000406f3e: cli; add cl, byte ptr [rdi]; test bh, bl; sbb al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x000000000040a585: cli; add cl, byte ptr [rdi]; test bh, bl; sbb byte ptr [rax], al; add byte ptr [rbx - 0x7bf0fc06], al; ret; 
0x0000000000446c7e: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000447c91: cli; add dword ptr [rdi + 0x15], esi; jb 0x47c99; mov byte ptr [rdi], cl; ret; 
0x0000000000446f12: cli; add dword ptr [rdi + 0x26], esi; jb 0x46f1d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000447dff: cli; add dword ptr [rdi + 0x2c], esi; jb 0x47e07; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447fc7: cli; add dword ptr [rdi + 0x3a], esi; jb 0x47fcf; mov byte ptr [rdi], cl; vzeroupper; ret; 
0x0000000000447272: cli; add dword ptr [rdi + 0x3b], esi; jb 0x4727d; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x00000000004476c2: cli; add dword ptr [rdi + 0x53], esi; jb 0x476cd; movzx ecx, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000446c8b: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000043851c: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000434951: cli; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000448d7e: cli; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xc085; 
0x0000000000448ddc: cli; add ecx, dword ptr [rdi]; xchg esi, eax; ret 0xd284; 
0x0000000000447ba0: cli; and byte ptr [rdi + 0x64], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000447bf0: cli; and byte ptr [rdi + 0xb], dh; movdqu xmmword ptr [rdi + rdx - 0x10], xmm0; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000446c47: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x00000000004946ea: cli; call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; 
0x00000000004946ea: cli; call ptr [rbx + rax + 0x32cfffa]; cli; call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x0000000000494caa: cli; call ptr [rsi + 0x2efffa29]; sub edx, edi; call rsp; 
0x0000000000494636: cli; call qword ptr [rax + 0x13]; 
0x0000000000494636: cli; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x0000000000494646: cli; call qword ptr [rax + 0x20fffa11]; adc edx, edi; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494956: cli; call qword ptr [rax + 0x36]; 
0x0000000000494956: cli; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x000000000045fcb5: cli; call qword ptr [rax + 0x38]; 
0x0000000000494e66: cli; call qword ptr [rax + 0x43]; 
0x0000000000494e66: cli; call qword ptr [rax + 0x43]; cli; jmp qword ptr [rax + 0x45]; 
0x000000000049462e: cli; call qword ptr [rax + 0xd]; 
0x000000000049445e: cli; call qword ptr [rax + 0xf]; 
0x000000000049445e: cli; call qword ptr [rax + 0xf]; cli; jmp rax; 
0x00000000004948aa: cli; call qword ptr [rax + 3]; 
0x00000000004948aa: cli; call qword ptr [rax + 3]; cli; push rax; in eax, 0xf9; call qword ptr [rax]; 
0x00000000004946a6: cli; call qword ptr [rax + 4]; 
0x00000000004945d2: cli; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x000000000049504e: cli; call qword ptr [rax - 0x4f000507]; stc; cli; call rax; 
0x0000000000494f3e: cli; call qword ptr [rax - 0x5e]; 
0x0000000000494fae: cli; call qword ptr [rax - 0x5f00050e]; cli; inc eax; cli; call rax; 
0x0000000000494f12: cli; call qword ptr [rax - 0x69]; 
0x0000000000494ef2: cli; call qword ptr [rax - 0x76]; 
0x0000000000494f9e: cli; call qword ptr [rax - 0xe]; 
0x0000000000494f9e: cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x0000000000495066: cli; call qword ptr [rax - 6]; 
0x0000000000495046: cli; call qword ptr [rax - 7]; 
0x0000000000495022: cli; call qword ptr [rax - 8]; 
0x0000000000494ff6: cli; call qword ptr [rax - 9]; 
0x0000000000494ff6: cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x000000000049444e: cli; call qword ptr [rax]; 
0x0000000000494f8e: cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000494ada: cli; call qword ptr [rbp + rsi + 0x3524fffa]; cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x00000000004b1972: cli; call qword ptr [rbx]; 
0x00000000004b1672: cli; call qword ptr [rcx]; 
0x0000000000494aca: cli; call qword ptr [rdi + rsi - 6]; jmp rsp; 
0x00000000004b0e8a: cli; call qword ptr [rdi]; 
0x000000000049450a: cli; call qword ptr [rdx + 0x11]; 
0x000000000049450a: cli; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x0000000000494a02: cli; call qword ptr [rdx + 0x38]; 
0x0000000000494a02: cli; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x00000000004946f6: cli; call qword ptr [rdx + 0xa]; 
0x00000000004944fa: cli; call qword ptr [rdx]; 
0x0000000000494476: cli; call qword ptr [rsi + 0x26fffa13]; adc edi, edx; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494bae: cli; call qword ptr [rsi + 0x29]; 
0x000000000049499e: cli; call qword ptr [rsi + 0x35]; 
0x000000000049499e: cli; call qword ptr [rsi + 0x35]; cli; jmp rsi; 
0x00000000004944a6: cli; call qword ptr [rsi + 0xe]; 
0x00000000004944a6: cli; call qword ptr [rsi + 0xe]; cli; jmp rsi; 
0x0000000000494496: cli; call qword ptr [rsi]; 
0x000000000049443e: cli; call rax; 
0x000000000049443e: cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494ee2: cli; call rax; cmp edx, -1; jo 0x94e6f; cli; call qword ptr [rax]; 
0x0000000000494936: cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000495012: cli; call rax; idiv edx; push rax; idiv edx; call qword ptr [rax]; 
0x0000000000494f5e: cli; call rax; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000494e86: cli; call rax; push rbx; cli; jmp rax; 
0x0000000000494b4e: cli; call rax; cli; jmp qword ptr [rax + 0x36]; 
0x0000000000494fba: cli; call rax; cli; jmp rax; 
0x0000000000494f7e: cli; call rax; int1; cli; jmp rax; 
0x00000000004b0df6: cli; call rcx; 
0x000000000049452a: cli; call rdx; 
0x00000000004946f2: cli; call rdx; or bh, dl; call qword ptr [rdx + 0xa]; 
0x0000000000494a22: cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494486: cli; call rsi; 
0x0000000000494486: cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000049497e: cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x00000000004945b2: cli; call rsp; 
0x000000000044c255: cli; cmp eax, 0x83497174; ret; 
0x000000000045d47e: cli; dec dword ptr [rax + 0x29]; ret; 
0x000000000047f450: cli; dec dword ptr [rax - 0x77]; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000045c435: cli; dec dword ptr [rbp - 0x7b]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000471b27: cli; dec dword ptr [rbx - 0x14f3db8c]; ret 0x5590; 
0x0000000000494b2a: cli; dec edx; xor edi, edx; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x000000000046741a: cli; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x0000000000494652: cli; inc dword ptr [rax + 0x10]; cli; call rax; 
0x000000000049443a: cli; inc dword ptr [rax + 0x13]; cli; call rax; 
0x000000000049443a: cli; inc dword ptr [rax + 0x13]; cli; call rax; adc bh, dl; jmp qword ptr [rax + 0x12]; 
0x0000000000494b4a: cli; inc dword ptr [rax + 0x37]; cli; call rax; 
0x0000000000494b4a: cli; inc dword ptr [rax + 0x37]; cli; call rax; cli; jmp qword ptr [rax + 0x36]; 
0x0000000000494932: cli; inc dword ptr [rax + 0x3a]; cli; call rax; 
0x0000000000494932: cli; inc dword ptr [rax + 0x3a]; cli; call rax; cmp edx, edi; jmp qword ptr [rax + 0x39]; 
0x0000000000494e62: cli; inc dword ptr [rax + 0x41]; cli; call qword ptr [rax + 0x43]; 
0x0000000000494e62: cli; inc dword ptr [rax + 0x41]; cli; call qword ptr [rax + 0x43]; cli; jmp qword ptr [rax + 0x45]; 
0x000000000049489a: cli; inc dword ptr [rax + 0xfffa05]; add eax, 0x470fffa; cli; jmp rax; 
0x0000000000494f5a: cli; inc dword ptr [rax - 0x2f000555]; lodsb al, byte ptr [rsi]; cli; jmp qword ptr [rax]; 
0x0000000000495002: cli; inc dword ptr [rax - 0x5f000509]; idiv edx; push qword ptr [rax - 0x3f000509]; idiv edx; call rax; 
0x0000000000494fd2: cli; inc dword ptr [rax - 0x5f00050d]; cli; inc eax; cli; jmp rax; 
0x0000000000494fca: cli; inc dword ptr [rax - 0xd]; cli; jmp qword ptr [rax - 0xd]; 
0x0000000000494f9a: cli; inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; 
0x0000000000494f9a: cli; inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; cli; jmp qword ptr [rax - 0xe]; 
0x0000000000494862: cli; inc dword ptr [rax - 0xf0005fc]; add edi, edx; jmp qword ptr [rax + 3]; 
0x0000000000494ff2: cli; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x0000000000494ff2: cli; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; cli; jmp qword ptr [rax - 9]; 
0x00000000004480de: cli; inc dword ptr [rax]; add byte ptr [rax], al; cmove rax, rcx; pop rbx; ret; 
0x000000000049489e: cli; inc dword ptr [rax]; add eax, 0x470fffa; cli; jmp rax; 
0x0000000000494e92: cli; inc dword ptr [rax]; pop rdx; cli; call qword ptr [rax]; 
0x0000000000494da6: cli; inc dword ptr [rax]; sub bh, dl; push qword ptr [rax + 0x29]; cli; call rax; 
0x0000000000494ba2: cli; inc dword ptr [rax]; sub edi, edx; push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x0000000000494962: cli; inc dword ptr [rax]; xor eax, 0x3490fffa; cli; jmp qword ptr [rax]; 
0x0000000000494f8a: cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x0000000000494f8a: cli; inc dword ptr [rax]; cli; call qword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000494fc2: cli; inc dword ptr [rax]; cli; jmp qword ptr [rax]; 
0x0000000000494fe2: cli; inc dword ptr [rax]; hlt; cli; jmp qword ptr [rax]; 
0x000000000045978f: cli; inc dword ptr [rbx - 0x76be0008]; ret 0x840f; 
0x00000000004557d5: cli; inc dword ptr [rcx - 0x77]; ret 0x5be9; 
0x00000000004524ed: cli; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000494a1e: cli; inc dword ptr [rdx + 0x35]; cli; call rdx; 
0x0000000000494a1e: cli; inc dword ptr [rdx + 0x35]; cli; call rdx; xor al, 0xfa; jmp qword ptr [rdx + 0x34]; 
0x0000000000494526: cli; inc dword ptr [rdx + 0xe]; cli; call rdx; 
0x0000000000494482: cli; inc dword ptr [rsi + 0x12]; cli; call rsi; 
0x0000000000494482: cli; inc dword ptr [rsi + 0x12]; cli; call rsi; adc edx, edi; jmp qword ptr [rsi + 0x11]; 
0x000000000049497a: cli; inc dword ptr [rsi + 0x39]; cli; call rsi; 
0x000000000049497a: cli; inc dword ptr [rsi + 0x39]; cli; call rsi; cmp dl, bh; jmp qword ptr [rsi + 0x38]; 
0x0000000000494ae6: cli; inc dword ptr [rsp + rsi - 6]; call rsp; 
0x0000000000494632: cli; inc eax; adc edi, edx; call qword ptr [rax + 0x13]; 
0x0000000000494632: cli; inc eax; adc edi, edx; call qword ptr [rax + 0x13]; cli; jmp rax; 
0x000000000049500e: cli; inc eax; idiv edx; call rax; 
0x0000000000494e82: cli; inc eax; push rcx; cli; call rax; 
0x0000000000494b6a: cli; inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x0000000000494952: cli; inc eax; cli; call qword ptr [rax + 0x36]; 
0x0000000000494952: cli; inc eax; cli; call qword ptr [rax + 0x36]; cli; jmp rax; 
0x0000000000494fb6: cli; inc eax; cli; call rax; 
0x0000000000494fb6: cli; inc eax; cli; call rax; cli; jmp rax; 
0x0000000000494fda: cli; inc eax; cli; jmp rax; 
0x0000000000494f7a: cli; inc eax; int1; cli; call rax; 
0x0000000000494506: cli; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x0000000000494506: cli; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; cli; jmp rdx; 
0x00000000004949fe: cli; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x00000000004949fe: cli; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; cli; jmp rdx; 
0x000000000049499a: cli; inc esi; xor eax, 0x3556fffa; cli; jmp rsi; 
0x00000000004945ce: cli; inc esp; adc dl, bh; call qword ptr [rax + rdx - 6]; jmp rsp; 
0x0000000000447d48: cli; ja 0x47d5a; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447cf8: cli; ja 0x47d63; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000446c34: cli; jb 0x46c46; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004384d7: cli; jg 0x384e1; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446c56: cli; jg 0x46c60; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000447289: cli; jg 0x47293; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004476f1: cli; jg 0x476fb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447e12: cli; jg 0x47e1c; vzeroupper; ret; 
0x0000000000447fe8: cli; jg 0x47ff2; vzeroupper; ret; 
0x0000000000494442: cli; jmp qword ptr [rax + 0x12]; 
0x0000000000494b6e: cli; jmp qword ptr [rax + 0x29]; 
0x0000000000494b52: cli; jmp qword ptr [rax + 0x36]; 
0x000000000049493a: cli; jmp qword ptr [rax + 0x39]; 
0x0000000000494e6a: cli; jmp qword ptr [rax + 0x45]; 
0x000000000049465a: cli; jmp qword ptr [rax + 0xf]; 
0x000000000049486a: cli; jmp qword ptr [rax + 3]; 
0x0000000000494f32: cli; jmp qword ptr [rax - 0x62]; 
0x0000000000494fce: cli; jmp qword ptr [rax - 0xd]; 
0x0000000000494fa2: cli; jmp qword ptr [rax - 0xe]; 
0x0000000000494ffa: cli; jmp qword ptr [rax - 9]; 
0x0000000000494432: cli; jmp qword ptr [rax]; 
0x00000000004b0f32: cli; jmp qword ptr [rdi + 0x11]; 
0x0000000000494c1e: cli; jmp qword ptr [rdx + 0x2b]; 
0x0000000000494c16: cli; jmp qword ptr [rdx + 0x2c]; 
0x0000000000494c0e: cli; jmp qword ptr [rdx + 0x2d]; 
0x0000000000494c06: cli; jmp qword ptr [rdx + 0x2e]; 
0x0000000000494bfe: cli; jmp qword ptr [rdx + 0x2f]; 
0x0000000000494a26: cli; jmp qword ptr [rdx + 0x34]; 
0x000000000049451e: cli; jmp qword ptr [rdx]; 
0x000000000049448a: cli; jmp qword ptr [rsi + 0x11]; 
0x000000000045aad0: cli; jmp qword ptr [rsi + 0x2e]; 
0x0000000000494982: cli; jmp qword ptr [rsi + 0x38]; 
0x00000000004b111a: cli; jmp qword ptr [rsi + 0xa]; 
0x0000000000453cf5: cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004557fc: cli; jmp qword ptr [rsi - 0x70]; 
0x000000000049447a: cli; jmp qword ptr [rsi]; 
0x0000000000494462: cli; jmp rax; 
0x000000000040d2c4: cli; jmp rdx; 
0x00000000004944aa: cli; jmp rsi; 
0x00000000004945d6: cli; jmp rsp; 
0x000000000041ec87: cli; lea ecx, [rdx + 0x240]; shr ecx, 3; rep stosq qword ptr [rdi], rax; pop rbx; ret; 
0x000000000046251f: cli; mov dword ptr [rbx], 0x8e0f0000; pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000042fe28: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004004ca: cli; mov ebp, dword ptr [rbx]; add byte ptr [rsi - 0x70], ah; ret; 
0x000000000042fe22: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004137bf: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000040d5a6: cli; movsxd rdi, dword ptr [r10 + rdi*4]; add rdi, r10; jmp rdi; 
0x000000000042bad8: cli; movzx edx, dl; sub eax, edx; ret; 
0x000000000042a586: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000446c60: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000461122: cli; pop rcx; and eax, 0x48b4800; clc; jmp rax; 
0x00000000004a9321: cli; push 0x6e; ja 0xa92a9; ret 0x48f; 
0x0000000000494daa: cli; push qword ptr [rax + 0x29]; cli; call rax; 
0x0000000000494ba6: cli; push qword ptr [rax + 0x2a]; cli; jmp rax; 
0x0000000000494b2e: cli; push qword ptr [rax + 0x33]; cli; jmp rax; 
0x000000000049464e: cli; push qword ptr [rax + 0x40fffa10]; adc dl, bh; call rax; 
0x0000000000494436: cli; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x00000000004948a2: cli; push qword ptr [rax + 4]; cli; jmp rax; 
0x000000000049469e: cli; push qword ptr [rax + 5]; cli; jmp rax; 
0x000000000049500a: cli; push qword ptr [rax - 0x3f000509]; idiv edx; call rax; 
0x0000000000494f76: cli; push qword ptr [rax - 0x3f00050f]; int1; cli; call rax; 
0x0000000000494e7e: cli; push qword ptr [rax - 0x3f0005b1]; push rcx; cli; call rax; 
0x0000000000494f06: cli; push qword ptr [rax - 0x6e]; cli; call qword ptr [rax]; 
0x0000000000494ee6: cli; push qword ptr [rax - 0x7b]; cli; call qword ptr [rax]; 
0x0000000000494fee: cli; push qword ptr [rax]; idiv edx; inc dword ptr [rax - 9]; cli; call qword ptr [rax - 9]; 
0x0000000000494b66: cli; push qword ptr [rax]; xor al, 0xfa; inc eax; xor edi, edx; jmp qword ptr [rax + 0x29]; 
0x000000000049501e: cli; push qword ptr [rax]; clc; cli; call qword ptr [rax - 8]; 
0x0000000000494f96: cli; push qword ptr [rax]; cli; inc dword ptr [rax - 0xe]; cli; call qword ptr [rax - 0xe]; 
0x0000000000495062: cli; push qword ptr [rax]; cli; cli; call qword ptr [rax - 6]; 
0x0000000000495042: cli; push qword ptr [rax]; stc; cli; call qword ptr [rax - 7]; 
0x0000000000494bf6: cli; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x0000000000494502: cli; push qword ptr [rdx]; adc bh, dl; inc edx; adc edx, edi; call qword ptr [rdx + 0x11]; 
0x00000000004949fa: cli; push qword ptr [rdx]; cmp edx, edi; inc edx; cmp dl, bh; call qword ptr [rdx + 0x38]; 
0x000000000049496e: cli; push qword ptr [rsi + 0x26fffa33]; cmp bh, dl; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x000000000049447e: cli; push qword ptr [rsi + 0x46fffa12]; adc bh, dl; call rsi; 
0x0000000000494976: cli; push qword ptr [rsi + 0x46fffa39]; cmp edx, edi; call rsi; 
0x0000000000494ae2: cli; push qword ptr [rsp + rsi + 0x3444fffa]; cli; call rsp; 
0x000000000049469a: cli; push rax; add eax, 0x570fffa; cli; jmp rax; 
0x0000000000494866: cli; push rax; add edi, edx; jmp qword ptr [rax + 3]; 
0x0000000000495016: cli; push rax; idiv edx; call qword ptr [rax]; 
0x00000000004948ae: cli; push rax; in eax, 0xf9; call qword ptr [rax]; 
0x0000000000494b56: cli; push rax; xor eax, 0x3580fffa; cli; call qword ptr [rax]; 
0x000000000049503a: cli; push rax; clc; cli; call qword ptr [rax]; 
0x000000000049505a: cli; push rax; stc; cli; call qword ptr [rax]; 
0x0000000000494bf2: cli; push rdx; xor dl, bh; push qword ptr [rdx + 0x30]; cli; jmp rdx; 
0x0000000000447bc9: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x000000000044bd0b: cli; setae al; ret; 
0x00000000004409c9: cli; test rdx, rdx; je 0x409e0; bsf rax, rdx; ret; 
0x0000000000440968: cli; test rdx, rdx; je 0x409f0; bsf rax, rdx; ret; 
0x00000000004737a8: cli; test rdx, rdx; je 0x737d0; bsf rax, rdx; ret; 
0x0000000000473738: cli; test rdx, rdx; je 0x737e0; bsf rax, rdx; ret; 
0x0000000000474468: cli; test rdx, rdx; je 0x74490; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004743fc: cli; test rdx, rdx; je 0x744a0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000043893d: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004a6a0a: cli; xchg dword ptr [rsp + rax + 0x6fa9ce9d], esp; ret; 
0x0000000000490592: cli; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004505a3: cli; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000495065: cli; cli; call qword ptr [rax - 6]; 
0x0000000000495061: cli; cli; push qword ptr [rax]; cli; cli; call qword ptr [rax - 6]; 
0x00000000004948e9: cli; stc; call qword ptr [rax]; 
0x00000000004948e9: cli; stc; call qword ptr [rax]; cld; stc; call qword ptr [rax - 0x1a]; 
0x00000000004b0a71: cli; std; jmp qword ptr [rdx]; 
0x000000000044ffaf: cmc; add al, 0xfb; jmp qword ptr [rsi + 0xf]; 
0x000000000044d363: cmc; add byte ptr es:[rbp - 0xcf98b40], al; ret; 
0x0000000000474811: cmc; and ch, 0xf; je 0x74830; add rax, 2; ret; 
0x00000000004ab8ca: cmc; call qword ptr [rbx + 1]; 
0x00000000004abbca: cmc; call qword ptr [rdx]; 
0x00000000004addde: cmc; call qword ptr [rsi]; 
0x00000000004abc6a: cmc; call rax; 
0x00000000004abbde: cmc; call rsp; 
0x00000000004abd82: cmc; jmp qword ptr [rax]; 
0x00000000004ab792: cmc; jmp qword ptr [rbp + 2]; 
0x00000000004abdd6: cmc; jmp qword ptr [rdx + 0x36]; 
0x00000000004a9749: cmc; mov ch, 0xab; ret; 
0x0000000000434c6a: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f6ae: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434c63: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f817: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042f833: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000446013: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004a65f7: cmc; pop rbx; and dword ptr [rsi + rbp*2 - 0x7a], edi; lahf; ret 0x871e; 
0x0000000000446017: cmc; sub eax, edx; ret; 
0x0000000000493d85: cmc; clc; call qword ptr [rax - 0xb]; 
0x0000000000493d85: cmc; clc; call qword ptr [rax - 0xb]; clc; jmp qword ptr [rax]; 
0x00000000004af519: cmc; clc; call qword ptr [rax]; 
0x00000000004af52d: cmc; clc; call qword ptr [rsi + 0x16]; 
0x0000000000493d7d: cmc; clc; inc dword ptr [rax]; cmc; clc; jmp qword ptr [rax]; 
0x0000000000493d81: cmc; clc; jmp qword ptr [rax]; 
0x00000000004adddc: cmc; cmc; call qword ptr [rsi]; 
0x00000000004b1849: cmc; std; call rdx; 
0x00000000004b2831: cmc; sti; jmp qword ptr [rdx]; 
0x00000000004a8d85: cmc; xlatb; ret 0x4e27; 
0x000000000048af60: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x830f; 
0x000000000041a03c: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x840f; 
0x000000000048aff5: cwde; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x9272; 
0x000000000041106b: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; call qword ptr [rbp + 0x20]; 
0x0000000000491ffc: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x11], cl; call rax; 
0x000000000049175c: cwde; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x00000000004af5b4: cwde; add byte ptr ds:[rax], al; fcom dword ptr [rcx + rdi*8]; call qword ptr [rax + 1]; 
0x000000000048cc75: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000495728: cwde; cmp eax, 0x3ddefffb; sti; call qword ptr [rdx]; 
0x00000000004b2ab4: cwde; jae 0xb2ab7; add byte ptr [rax - 5], cl; sti; call qword ptr [rsi + 1]; 
0x0000000000460e0a: cwde; movzx eax, byte ptr [rdi + rax]; lea rdi, [rip + 0x25590a]; mov rax, qword ptr [rdi + rax*8]; jmp rax; 
0x00000000004614ac: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x255268]; mov rax, qword ptr [rsi + rax*8]; xor esi, esi; jmp rax; 
0x0000000000460e54: cwde; movzx eax, byte ptr [rsi + rax]; lea rsi, [rip + 0x2558c0]; mov rax, qword ptr [rsi + rax*8]; mov esi, 1; jmp rax; 
0x0000000000460db9: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x25585b]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000461168: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559ac]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046111a: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x2559fa]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046106b: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255aa9]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x000000000046100f: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255b05]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d6f: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255da5]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x0000000000460d21: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255df3]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004608c0: cwde; movzx edi, byte ptr [rdi + rax]; lea rax, [rip + 0x255f54]; mov rax, qword ptr [rax + rdi*8]; jmp rax; 
0x00000000004b2548: cwde; out 0xfb, eax; jmp qword ptr [rdi]; 
0x0000000000482623: cwde; cld; jmp qword ptr [rsi + 0x2e]; 
0x00000000004825b7: cwde; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004b2b08: cwde; cld; sti; jmp qword ptr [rbx]; 
0x00000000004b4678: cwde; std; cld; call qword ptr [rax]; 
0x0000000000488276: fcos; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000484c12: fcos; dec dword ptr [rcx + 0x438b4803]; sbb byte ptr [rcx], dh; ror byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret 0x950f; 
0x00000000004880dd: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004842bd: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000046863c: fldpi; stosd dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000040db49: fpatan; ret; 
0x00000000004af4f1: fprem; call qword ptr [rax]; 
0x00000000004942f1: fyl2xp1; jmp qword ptr [rax - 0x25]; 
0x000000000045e86e: hlt; add al, 0; add byte ptr [rcx - 0x7d], al; in al, dx; add dword ptr [rax - 0x93b43], eax; jmp qword ptr [rax]; 
0x00000000004b086a: hlt; jmp qword ptr [rbx]; 
0x00000000004b3b92: hlt; jmp qword ptr [rcx]; 
0x0000000000434bea: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042f89e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000434be3: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000448fae: hlt; mov edi, edx; mov eax, r8d; syscall; 
0x000000000042f9f7: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042fa13: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004137bc: hlt; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rax + 0x40]; 
0x000000000048521b: hlt; movsxd rax, ecx; add rax, rdi; sub rax, r8; ret; 
0x0000000000446003: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x0000000000495ea8: hlt; push 0x68f4fffb; sti; jmp qword ptr [rax + 0x6a]; 
0x0000000000495eb4: hlt; push 0x6a38fffb; sti; call qword ptr [rax]; 
0x0000000000495e7c: hlt; push 0x6b90fffb; sti; push qword ptr [rax + 0x6b]; sti; call qword ptr [rax + 0x6b]; 
0x0000000000495e64: hlt; push 0x6bb0fffb; sti; jmp rax; 
0x0000000000446007: hlt; sub eax, edx; ret; 
0x000000000046c928: hlt; test al, 0x24; add byte ptr [rax - 0x75], cl; add al, 0xf8; jmp rax; 
0x0000000000494fe5: hlt; cli; jmp qword ptr [rax]; 
0x0000000000400b86: hlt; ret; 
0x00000000004948d9: hlt; stc; call qword ptr [rax]; 
0x0000000000435a0d: int1; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000425da8: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000474236: int1; call rbx; 
0x0000000000438a91: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000447992: int1; dec byte ptr [rax + 0x7f]; jg 0x4799b; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x0000000000447b38: int1; dec byte ptr [rax + 0x7f]; jg 0x47b41; vmovdqu64 zmmword ptr [r11], zmm8; vzeroupper; ret; 
0x00000000004477bc: int1; dec byte ptr [rax + 0x7f]; jl 0x477d9; cld; vzeroupper; ret; 
0x0000000000438471: int1; jl 0x384bc; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446bfd: int1; jl 0x46c48; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c04: int1; jl 0x46c4f; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c0b: int1; jl 0x46c56; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446c1e: int1; jl 0x46c69; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c25: int1; jl 0x46c70; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c2c: int1; jl 0x46c77; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446c39: int1; jl 0x46c84; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446c3f: int1; jl 0x46c8a; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d06: int1; jl 0x46d51; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d0d: int1; jl 0x46d58; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446d14: int1; jl 0x46d5f; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446d5e: int1; jl 0x46da9; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d65: int1; jl 0x46db0; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446d6c: int1; jl 0x46db7; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446dfb: int1; jl 0x46e46; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e02: int1; jl 0x46e4d; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446e09: int1; jl 0x46e54; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000448095: int1; jmp rcx; 
0x0000000000471beb: int1; jne 0x71be0; lea eax, [rdx + rdi]; ret; 
0x00000000004481b9: int1; mov eax, eax; ret; 
0x0000000000434a3b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042fe6f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000434a33: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042ffe7: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430003: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000445fd3: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004481a0: int1; pop rbx; mov eax, eax; ret; 
0x0000000000445fd7: int1; sub eax, edx; ret; 
0x000000000042bf31: int1; sub rax, rcx; je 0x2bf40; sbb eax, eax; or eax, 1; ret; 
0x000000000048806b: int1; sub rcx, qword ptr [rdx + 0x10]; cmp rcx, qword ptr [rdx + 0x28]; jae 0x88050; mov eax, 1; ret; 
0x0000000000490ee7: int1; clc; push rbx; ret; 
0x0000000000494f7d: int1; cli; call rax; 
0x0000000000494f7d: int1; cli; call rax; int1; cli; jmp rax; 
0x0000000000494f89: int1; cli; inc dword ptr [rax]; cli; call qword ptr [rax]; 
0x0000000000494f79: int1; cli; inc eax; int1; cli; call rax; 
0x0000000000494f81: int1; cli; jmp rax; 
0x0000000000494f75: int1; cli; push qword ptr [rax - 0x3f00050f]; int1; cli; call rax; 
0x00000000004948d1: int1; stc; call qword ptr [rax]; 
0x000000000043ee4d: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047d76d: iretd; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000048f453: iretd; and al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000047bbea: iretd; call 0x4a590; test eax, eax; js 0x7bc02; pop rbx; ret; 
0x00000000004733c3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000413ab1: iretd; cmp rax, rdi; jbe 0x13bb8; mov rsi, r13; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000400936: iretd; inc dword ptr [rbx + 0x438d01c1]; call rbx; 
0x0000000000446efa: iretd; jb 0x47064; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447255: iretd; jb 0x47421; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004476a0: iretd; jb 0x478dc; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004a7a21: iretd; movsb byte ptr [rdi], byte ptr [rsi]; in eax, 0x24; outsd dx, dword ptr es:[rsi]; ret 0x5ae4; 
0x0000000000480e2a: iretd; movsx eax, cl; neg eax; ret; 
0x0000000000425e72: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004234b6: iretd; nop word ptr [rax + rax]; mov rsi, rbp; mov rdi, rax; call rcx; 
0x00000000004a8e2d: iretd; ret 0x8b36; 
0x0000000000494419: iretd; stc; call qword ptr [rax]; 
0x0000000000494419: iretd; stc; call qword ptr [rax]; sar ecx, 1; jmp qword ptr [rax - 0x2e]; 
0x00000000004b2101: iretd; sti; jmp qword ptr [rbx + 8]; 
0x000000000046b203: lahf; add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret; 
0x000000000045578b: lahf; add dword ptr [rax], eax; add al, ch; lodsb al, byte ptr [rsi]; ret; 
0x00000000004563b5: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xb2eb; 
0x000000000041efef: lahf; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; jmp qword ptr [rax]; 
0x00000000004a8da3: lahf; mov dh, 0xc7; ret 0xe71f; 
0x000000000047e68b: lahf; mov eax, dword ptr [rdx + 4]; ret; 
0x000000000043f77d: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000045eacf: lahf; or dword ptr [rax], eax; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000435a8d: lahf; out dx, al; add eax, 0x14634900; xchg ebx, eax; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000418c6f: lahf; ret 0x3949; 
0x0000000000418d22: lahf; ret 0x48e9; 
0x000000000044a831: lahf; ret 0x8545; 
0x00000000004a65fd: lahf; ret 0x871e; 
0x0000000000448039: lahf; ret 0xea81; 
0x000000000048c6e1: lahf; ret 0xf45; 
0x00000000004a9001: lahf; sub edi, esi; int 0x6b; ret; 
0x000000000044a97b: lahf; ret; 
0x0000000000494241: lahf; stc; jmp qword ptr [rax]; 
0x000000000049057f: lahf; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000415658: leave; and byte ptr [rcx + 0xc7640f], cl; or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000446b74: leave; cmp cl, byte ptr [rax + 0x63]; leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x0000000000446600: leave; jne 0x465f0; ret; 
0x00000000004466b0: leave; jne 0x466a0; ret; 
0x0000000000446970: leave; jne 0x46960; sub rax, 1; ret; 
0x000000000047c276: leave; jne 0x7c506; mov rax, qword ptr [rbx + 0x10]; add rbx, 0x18; add rax, qword ptr [r14]; call rax; 
0x000000000047cb9e: leave; jne 0x7d176; mov rax, qword ptr [r15 + 0x10]; add rax, qword ptr [r14]; call rax; 
0x0000000000446b78: leave; lea rax, [rdi + rcx]; sub rax, rsi; ret; 
0x000000000042bf5f: leave; mov al, byte ptr [rdi + rdx - 1]; mov cl, byte ptr [rsi + rdx - 1]; sub eax, ecx; ret; 
0x000000000048ad90: leave; movsxd rax, dword ptr [r8 + rcx*4]; add rax, r8; jmp rax; 
0x000000000044e7cf: leave; movzx eax, al; xor edx, edx; add eax, 1; push rax; call rbx; 
0x0000000000425dac: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000046bc96: leave; movzx eax, byte ptr [rdi + rax]; mov rax, qword ptr [rsi + rax*8]; jmp rax; 
0x00000000004a7061: leave; retf 0x6ee8; sahf; ret 0x38ae; 
0x000000000047e6d2: leave; test rsi, rsi; je 0x7e6db; mov qword ptr [rsi], rdi; mov rax, rcx; ret; 
0x0000000000430da3: leave; xor al, 6; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000473eea: leave; xor edx, edx; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004b3b91: leave; hlt; jmp qword ptr [rcx]; 
0x0000000000400c13: leave; ret; 
0x0000000000494405: leave; stc; inc dword ptr [rax - 0x2f000636]; retf; stc; jmp qword ptr [rax]; 
0x0000000000494648: nop; adc edx, edi; jmp qword ptr [rax]; 
0x00000000004b4739: nop; add byte ptr [rax], al; add al, 4; std; jmp qword ptr [rdx]; 
0x0000000000413ce2: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; call 0x5c429a48; ret; 
0x00000000004348a7: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000047200b: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x10; mov rdi, r12; call rbx; 
0x0000000000472105: nop; add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x4c], cl; and al, 0x18; mov rdi, r12; call rbx; 
0x000000000042c4fc: nop; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rdi], dl; ret 0x830f; 
0x00000000004b47e5: nop; add byte ptr [rax], al; test al, 5; std; jmp rdx; 
0x0000000000475a3c: nop; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044e90f: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000487cff: nop; add rsp, 8; ret; 
0x000000000042b39f: nop; bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042b3af: nop; bsf eax, eax; sub rdx, rax; jbe 0x2b3c0; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044469f: nop; bsf rdx, rdx; lea r11, [rip + 0x50945]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044407f: nop; bsf rdx, rdx; lea r11, [rip + 0x50ee5]; movsxd rcx, dword ptr [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx; 
0x000000000044f044: nop; call 0x4d3c0; mov rdi, r15; mov rsi, qword ptr [rbp - 0x70]; call rsi; 
0x000000000048560f: nop; call rax; 
0x000000000044f050: nop; call rsi; 
0x0000000000494b40: nop; cmp dl, bh; jmp qword ptr [rax]; 
0x0000000000494f50: nop; cmpsd dword ptr [rsi], dword ptr [rdi]; cli; jmp rax; 
0x0000000000494358: nop; fdiv st(1), st(0); push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x000000000049491c: nop; idiv cl; call qword ptr [rax]; 
0x00000000004948e0: nop; idiv ecx; call qword ptr [rax]; 
0x0000000000495e80: nop; imul edi, ebx, -1; jo 0x95ef1; sti; call qword ptr [rax + 0x6b]; 
0x0000000000493f4c: nop; imul edi, ecx, 0xf96a80ff; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x0000000000494904: nop; in eax, dx; stc; call qword ptr [rax]; 
0x000000000048267f: nop; jmp rdx; 
0x0000000000449aff: nop; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004b58b0: nop; mov bh, ch; jmp qword ptr [rbx]; 
0x0000000000494130: nop; mov cl, 0xf9; call qword ptr [rax - 0x4d]; 
0x000000000042f47f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000047b5cf: nop; mov dword ptr [rdi + 0x2f4], ecx; mov qword ptr [rdi + 0x308], rax; ret; 
0x000000000048465f: nop; mov dword ptr [rdx], 0; mov eax, 2; ret; 
0x000000000048f55f: nop; mov dword ptr [rip + 0x22ce1e], 1; ret; 
0x000000000048f44f: nop; mov dword ptr [rip + 0x22cf2e], 1; ret; 
0x00000000004191b3: nop; mov dword ptr [rip + 0x2a0656], 1; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x0000000000419173: nop; mov dword ptr [rip + 0x2a0696], 1; mov qword ptr [rip + 0x2a0663], rax; ret; 
0x0000000000419153: nop; mov dword ptr [rip + 0x2a06b6], 1; mov qword ptr [rip + 0x2a067b], rax; ret; 
0x00000000004191d3: nop; mov dword ptr [rip + 0x2a2bba], eax; ret; 
0x000000000042f65f: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042f83f: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000480fb1: nop; mov eax, 0x15; syscall; 
0x000000000048528f: nop; mov eax, 0x27; syscall; 
0x000000000048528f: nop; mov eax, 0x27; syscall; ret; 
0x00000000004754ef: nop; mov eax, 0x3f; syscall; 
0x00000000004754ef: nop; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x75500; ret; 
0x000000000044bc9f: nop; mov eax, 0x63; syscall; 
0x000000000044bc9f: nop; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x4bcb0; ret; 
0x0000000000474dbf: nop; mov eax, 0xc9; syscall; 
0x0000000000474dbf: nop; mov eax, 0xc9; syscall; ret; 
0x000000000044bd24: nop; mov eax, 0xca; syscall; 
0x0000000000416aef: nop; mov eax, 0xffffffff; ret; 
0x000000000047fc9f: nop; mov eax, 1; pop rbx; ret; 
0x000000000044987f: nop; mov eax, dword ptr [rip + 0x272f86]; test eax, eax; jne 0x498a0; mov eax, 1; syscall; 
0x0000000000494164: nop; mov edx, 0xbc90fff9; stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x000000000042fa1f: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044474f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000049416c: nop; mov esi, 0xb120fff9; stc; jmp rax; 
0x0000000000494168: nop; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x0000000000419053: nop; mov qword ptr [rip + 0x2a07ed], rax; ret; 
0x0000000000419043: nop; mov qword ptr [rip + 0x2a07f5], rax; ret; 
0x0000000000418ff3: nop; mov qword ptr [rip + 0x2a07fd], rax; ret; 
0x0000000000418fe3: nop; mov qword ptr [rip + 0x2a0815], rax; ret; 
0x000000000045af3f: nop; mov r10d, 8; mov eax, 0xe; syscall; 
0x000000000048d17f: nop; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004191af: nop; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0x2a0656], 1; mov dword ptr [rip + 0x2a0648], eax; ret; 
0x000000000048aeef: nop; mov rax, qword ptr [rsi + 0xb8]; ret; 
0x000000000048e08f: nop; mov rax, qword ptr [rsi + 8]; ret; 
0x000000000044419f: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x00000000004441cf: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x00000000004441df: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044956f: nop; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000044985f: nop; mov rdx, 0xffffffffffffffc0; neg eax; mov dword ptr fs:[rdx], eax; mov rax, 0xffffffffffffffff; ret; 
0x000000000044479f: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000044423f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004441ef: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x00000000004b5bac: nop; movsb byte ptr [rdi], byte ptr [rsi]; add byte ptr [rax], al; jo 0xb5b4f; std; jmp qword ptr [rcx]; 
0x00000000004b0030: nop; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rcx]; 
0x000000000045ad10: nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x0000000000474825: nop; nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000444d45: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444d55: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444d65: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444d75: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444d85: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x0000000000444cc5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 1]; ret; 
0x0000000000444cd5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x0000000000444ce5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x0000000000444cf5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444d05: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444d15: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444d25: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444d35: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000444cb5: nop; nop word ptr cs:[rax + rax]; lea rax, [rdi]; ret; 
0x000000000044d345: nop; nop word ptr cs:[rax + rax]; lea rax, [rip + 0x26cfa9]; ret; 
0x0000000000474845: nop; nop word ptr cs:[rax + rax]; mov rax, 1; ret; 
0x000000000048d125: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0x90]; ret; 
0x000000000048d205: nop; nop word ptr cs:[rax + rax]; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x0000000000418635: nop; nop word ptr cs:[rax + rax]; mov rax, rdi; ret; 
0x0000000000444af5: nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000042b825: nop; nop word ptr cs:[rax + rax]; vzeroupper; xor eax, eax; ret; 
0x0000000000494874: nop; or bh, dl; call qword ptr [rax]; 
0x0000000000494844: nop; or dl, bh; call qword ptr [rax]; 
0x000000000049483c: nop; or edx, edi; call qword ptr [rax]; 
0x00000000004948f4: nop; out 0xf9, eax; call qword ptr [rax]; 
0x00000000004948c8: nop; out dx, al; stc; call qword ptr [rax]; 
0x0000000000400b92: nop; pop rbp; ret; 
0x00000000004ab790: nop; push rsp; cmc; jmp qword ptr [rbp + 2]; 
0x00000000004ac1d0: nop; sub al, 0xf6; jmp qword ptr [rax]; 
0x0000000000494b98: nop; sub al, 0xfa; call qword ptr [rax]; 
0x0000000000493e94: nop; sub edi, ecx; push qword ptr [rax - 0x2f0006d4]; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x000000000041830f: nop; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000049421c: nop; test al, 0xf9; jmp rax; 
0x000000000042434f: nop; test byte ptr [rip + 0x297ad5], 0x10; lea rdx, [rip - 0x59e]; lea rax, [rip + 0x221ab]; cmove rax, rdx; ret; 
0x000000000042b85f: nop; tzcnt eax, eax; add rax, 0x40; add rax, rdi; vzeroupper; ret; 
0x0000000000494968: nop; xor al, 0xfa; jmp qword ptr [rax]; 
0x000000000041475f: nop; xor eax, eax; ret; 
0x0000000000494b88: nop; cli; call qword ptr [rax]; 
0x0000000000494f05: nop; cli; push qword ptr [rax - 0x6e]; cli; call qword ptr [rax]; 
0x00000000004948e8: nop; cli; stc; call qword ptr [rax]; 
0x00000000004af4f0: nop; fprem; call qword ptr [rax]; 
0x00000000004948d8: nop; hlt; stc; call qword ptr [rax]; 
0x00000000004948d0: nop; int1; stc; call qword ptr [rax]; 
0x000000000045ad0f: nop; nop; nop dword ptr [rax + rax]; nop word ptr cs:[rax + rax]; mov rax, 0xf; syscall; 
0x00000000004004cf: nop; ret; 
0x0000000000493f79: nop; stc; call qword ptr [rax]; 
0x0000000000493f8d: nop; stc; call qword ptr [rsi]; 
0x0000000000493ffd: nop; stc; jmp qword ptr [rsi - 0x6f]; 
0x0000000000493f89: nop; stc; push rax; nop; stc; call qword ptr [rsi]; 
0x0000000000494924: nop; stc; stc; call qword ptr [rax]; 
0x000000000040f844: popfq; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000474c2f: popfq; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; shr rax, 2; vzeroupper; ret; 
0x000000000047f384: popfq; and eax, dword ptr [rax]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x23d017]; mov qword ptr [rsi], rax; ret; 
0x0000000000480d07: popfq; div edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000046a7bf: popfq; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x000000000048c6ce: popfq; ret 0xf45; 
0x0000000000494f31: popfq; cli; jmp qword ptr [rax - 0x62]; 
0x00000000004afed1: popfq; stc; call qword ptr [rbx]; 
0x0000000000494239: popfq; stc; inc dword ptr [rax - 0x2f000662]; lahf; stc; jmp qword ptr [rax]; 
0x00000000004b5bb1: popfq; std; jmp qword ptr [rcx]; 
0x000000000043d410: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x0000000000462526: pushfq; add byte ptr [rax], al; add byte ptr [rcx + 0x63], cl; ret 0x8944; 
0x000000000045212a: pushfq; and al, 0xa0; add byte ptr [rax], al; add dh, dh; ret 0x4801; 
0x0000000000479c7f: pushfq; and al, 0xc0; add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x848b; 
0x0000000000416b9b: pushfq; and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xac20; 
0x000000000043e110: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a2e4: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x000000000048c707: pushfq; ret 0xf45; 
0x0000000000477e82: pushfq; ret 2; 
0x0000000000482151: pushfq; cld; jmp qword ptr [rsi - 0x70]; 
0x00000000004941f9: pushfq; stc; call qword ptr [rax]; 
0x00000000004941f9: pushfq; stc; call qword ptr [rax]; sahf; stc; jmp qword ptr [rax - 0x61]; 
0x0000000000400416: ret; 
0x000000000044bd6d: retf; add al, byte ptr [rcx + 0x39]; ret; 
0x00000000004a6feb: retf; ret 0x5508; 
0x0000000000490591: retf; cli; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000455771: retf; ret; 
0x000000000049440d: retf; stc; jmp qword ptr [rax]; 
0x000000000040180e: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; jbe 0x1826; syscall; 
0x000000000046dffe: sahf; fdivr st(7); jmp qword ptr [rsi + 0xf]; 
0x00000000004a6eb2: sahf; int 0xe0; fdivr st(4); test al, 0x97; xchg esp, eax; ret; 
0x0000000000496434: sahf; jb 0x96432; call qword ptr [rdi + 0x72]; 
0x000000000043f67e: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000494430: sahf; or eax, 0x1420fffa; cli; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x000000000046ea82: sahf; push rax; add eax, dword ptr [rax]; movsxd rax, dword ptr [rcx + rax*4]; add rax, rcx; jmp rax; 
0x00000000004a7065: sahf; ret 0x38ae; 
0x0000000000483751: sahf; ret 0x3948; 
0x000000000045bf8c: sahf; ret 0x894c; 
0x000000000048c6f4: sahf; ret 0xf45; 
0x000000000049423d: sahf; stc; call rax; 
0x000000000049423d: sahf; stc; call rax; lahf; stc; jmp qword ptr [rax]; 
0x00000000004941fd: sahf; stc; jmp qword ptr [rax - 0x61]; 
0x0000000000432c94: sfence; lea r11, [rip + 0x615d2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432ade: sfence; lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004301d0: sfence; lea r11, [rip + 0x63ed6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f6: sfence; lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000044611f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000473c46: stc; add byte ptr [rax + rax], cl; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x0000000000454200: stc; add dword ptr [rdi], ecx; xchg byte ptr [rdi], dl; or eax, 0xea810000; ret 0; 
0x000000000049442e: stc; call ptr [rsi + 0x20fffa0d]; adc al, 0xfa; push qword ptr [rax + 0x40fffa13]; adc edi, edx; call rax; 
0x000000000049416a: stc; call qword ptr [rax + 0x20fff9be]; mov cl, 0xf9; jmp rax; 
0x0000000000493e8a: stc; call qword ptr [rax + 0x29]; 
0x00000000004943aa: stc; call qword ptr [rax + 0x40fff9e5]; mov edi, 0xc380fff9; stc; call rax; 
0x0000000000493f16: stc; call qword ptr [rax + 0x5a]; 
0x0000000000493f6a: stc; call qword ptr [rax + 0x62]; 
0x0000000000493f6a: stc; call qword ptr [rax + 0x62]; stc; dec dword ptr [rdi - 0x72]; stc; jmp qword ptr [rax]; 
0x0000000000493f5a: stc; call qword ptr [rax + 0x6d]; 
0x0000000000494356: stc; call qword ptr [rax + 0x70fff9dc]; fdivp st(1); call qword ptr [rax - 0x20]; 
0x000000000049429a: stc; call qword ptr [rax + 0x70fff9df]; loope 0x9429c; jmp qword ptr [rax - 0x1d]; 
0x00000000004af5ba: stc; call qword ptr [rax + 1]; 
0x00000000004948ee: stc; call qword ptr [rax - 0x1a]; 
0x00000000004942be: stc; call qword ptr [rax - 0x1f]; 
0x000000000049435e: stc; call qword ptr [rax - 0x20]; 
0x000000000049435e: stc; call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x00000000004942da: stc; call qword ptr [rax - 0x21]; 
0x00000000004942da: stc; call qword ptr [rax - 0x21]; stc; push qword ptr [rax]; loope 0x942dc; call qword ptr [rax]; 
0x000000000049442a: stc; call qword ptr [rax - 0x2a]; 
0x00000000004943d6: stc; call qword ptr [rax - 0x31]; 
0x000000000049492a: stc; call qword ptr [rax - 0x41000604]; xor edi, edx; inc dword ptr [rax + 0x3a]; cli; call rax; 
0x00000000004940ea: stc; call qword ptr [rax - 0x41]; 
0x00000000004940ea: stc; call qword ptr [rax - 0x41]; stc; jmp rax; 
0x000000000049418a: stc; call qword ptr [rax - 0x42]; 
0x000000000049418a: stc; call qword ptr [rax - 0x42]; stc; jmp rax; 
0x00000000004940e6: stc; call qword ptr [rax - 0x43]; 
0x00000000004940e6: stc; call qword ptr [rax - 0x43]; stc; call qword ptr [rax - 0x41]; stc; jmp rax; 
0x0000000000494186: stc; call qword ptr [rax - 0x44]; 
0x0000000000494186: stc; call qword ptr [rax - 0x44]; stc; call qword ptr [rax - 0x42]; stc; jmp rax; 
0x00000000004940e2: stc; call qword ptr [rax - 0x45]; 
0x0000000000494182: stc; call qword ptr [rax - 0x46]; 
0x0000000000494132: stc; call qword ptr [rax - 0x4d]; 
0x0000000000494132: stc; call qword ptr [rax - 0x4d]; stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000493e92: stc; call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000493e72: stc; call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x000000000049425e: stc; call qword ptr [rax - 0x56]; 
0x000000000049420a: stc; call qword ptr [rax - 0x5d]; 
0x0000000000494166: stc; call qword ptr [rax - 0x6f000644]; mov esi, 0xb120fff9; stc; jmp rax; 
0x0000000000494162: stc; call qword ptr [rax - 0x6f000646]; mov esp, 0xbe90fff9; stc; jmp qword ptr [rax]; 
0x0000000000493f4a: stc; call qword ptr [rax - 0x7f000697]; push -7; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x0000000000493e82: stc; call qword ptr [rax]; 
0x00000000004941d2: stc; call qword ptr [rax]; mov dl, 0xf9; jmp rax; 
0x00000000004941aa: stc; call qword ptr [rax]; mov esi, 0xb0a0fff9; stc; jmp qword ptr [rax - 0x4e]; 
0x000000000049424e: stc; call qword ptr [rax]; movsd dword ptr [rdi], dword ptr [rsi]; stc; jmp qword ptr [rax - 0x5a]; 
0x000000000049441a: stc; call qword ptr [rax]; sar ecx, 1; jmp qword ptr [rax - 0x2e]; 
0x0000000000493ea2: stc; call qword ptr [rax]; xor cl, bh; push qword ptr [rax]; xor ecx, edi; call rax; 
0x0000000000493eea: stc; call qword ptr [rax]; xor edi, ecx; push rax; stc; jmp qword ptr [rax + 0x4d]; 
0x000000000049422e: stc; call qword ptr [rax]; cdq; stc; jmp rax; 
0x00000000004948ea: stc; call qword ptr [rax]; cld; stc; call qword ptr [rax - 0x1a]; 
0x00000000004941fa: stc; call qword ptr [rax]; sahf; stc; jmp qword ptr [rax - 0x61]; 
0x00000000004afa36: stc; call qword ptr [rbp + 1]; 
0x00000000004af692: stc; call qword ptr [rbx + 4]; 
0x00000000004af8ea: stc; call qword ptr [rbx]; 
0x00000000004af94e: stc; call qword ptr [rcx + 1]; 
0x00000000004b0302: stc; call qword ptr [rcx]; 
0x00000000004b00fa: stc; call qword ptr [rdi]; 
0x00000000004af85e: stc; call qword ptr [rdx]; 
0x0000000000493f8e: stc; call qword ptr [rsi]; 
0x0000000000493e7a: stc; call rax; 
0x0000000000493eaa: stc; call rax; and cl, bh; jmp rax; 
0x000000000049422a: stc; call rax; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x00000000004941ca: stc; call rax; mov ebp, 0xb060fff9; stc; call qword ptr [rax]; 
0x00000000004941c6: stc; call rax; mov ebx, 0xbdd0fff9; stc; jmp qword ptr [rax - 0x50]; 
0x000000000049414a: stc; call rax; mov esi, 0xb160fff9; stc; jmp qword ptr [rax]; 
0x0000000000494146: stc; call rax; mov esp, 0xbed0fff9; stc; jmp qword ptr [rax - 0x4f]; 
0x0000000000493e9a: stc; call rax; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x000000000049406e: stc; call rax; xchg edi, eax; stc; jmp qword ptr [rax - 0x72]; 
0x000000000049409a: stc; call rax; xchg esp, eax; stc; jmp qword ptr [rax - 0x6b]; 
0x000000000049423e: stc; call rax; lahf; stc; jmp qword ptr [rax]; 
0x000000000049440a: stc; call rax; retf; stc; jmp qword ptr [rax]; 
0x00000000004b00ae: stc; call rsi; 
0x00000000004af7e6: stc; call rsp; 
0x00000000004631be: stc; dec dword ptr [rax + 0x29]; ret; 
0x0000000000468975: stc; dec dword ptr [rax - 0x39]; ret 0xffa0; 
0x00000000004940ae: stc; dec dword ptr [rax]; mov dl, 0xf9; call rax; 
0x000000000049406a: stc; dec dword ptr [rbx - 0x69]; stc; call rax; 
0x0000000000493f6e: stc; dec dword ptr [rdi - 0x72]; stc; jmp qword ptr [rax]; 
0x0000000000493f76: stc; dec dword ptr [rsi]; nop; stc; call qword ptr [rax]; 
0x0000000000493e66: stc; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x0000000000494112: stc; inc dword ptr [rax + 0x60fff9b3]; mov ch, 0xf9; inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x0000000000494196: stc; inc dword ptr [rax + 0x60fff9b4]; mov dh, 0xf9; inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x00000000004942ca: stc; inc dword ptr [rax - 0x19]; stc; call rax; 
0x00000000004942c6: stc; inc dword ptr [rax - 0x1b]; stc; inc dword ptr [rax - 0x19]; stc; call rax; 
0x00000000004942f6: stc; inc dword ptr [rax - 0x23]; stc; jmp qword ptr [rax]; 
0x0000000000494376: stc; inc dword ptr [rax - 0x24]; stc; jmp qword ptr [rax]; 
0x0000000000494406: stc; inc dword ptr [rax - 0x2f000636]; retf; stc; jmp qword ptr [rax]; 
0x0000000000494226: stc; inc dword ptr [rax - 0x2f000654]; lodsd eax, dword ptr [rsi]; stc; call qword ptr [rax]; 
0x000000000049423a: stc; inc dword ptr [rax - 0x2f000662]; lahf; stc; jmp qword ptr [rax]; 
0x000000000049419e: stc; inc dword ptr [rax - 0x48]; stc; call qword ptr [rax]; 
0x000000000049411a: stc; inc dword ptr [rax - 0x49]; stc; jmp qword ptr [rax]; 
0x0000000000494096: stc; inc dword ptr [rax - 0x6c]; stc; call rax; 
0x0000000000494286: stc; inc dword ptr [rax - 0x7f00061b]; out 0xf9, eax; call qword ptr [rax]; 
0x00000000004942fe: stc; inc dword ptr [rax]; loope 0x942fc; jmp rax; 
0x0000000000494156: stc; inc dword ptr [rax]; mov ch, 0xf9; jmp rax; 
0x000000000049412a: stc; inc dword ptr [rax]; mov edi, 0xb190fff9; stc; call qword ptr [rax - 0x4d]; 
0x0000000000493e62: stc; inc dword ptr [rax]; sbb edi, ecx; inc dword ptr [rax + 0x1c]; stc; jmp qword ptr [rax]; 
0x000000000046a7bb: stc; inc dword ptr [rbx + rcx*4 - 0x63]; idiv edi; dec dword ptr [rax - 0x77]; ret; 
0x0000000000493fe2: stc; inc dword ptr [rcx - 0x6a]; stc; jmp rcx; 
0x0000000000493f7e: stc; inc dword ptr [rcx - 0x72]; stc; call qword ptr [rax]; 
0x0000000000494416: stc; inc eax; iretd; stc; call qword ptr [rax]; 
0x00000000004941f6: stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x0000000000494026: stc; inc esi; xchg esi, eax; stc; jmp qword ptr [rsi - 0x69]; 
0x0000000000493eb2: stc; jmp qword ptr [rax + 0x35]; 
0x0000000000493eba: stc; jmp qword ptr [rax + 0x38]; 
0x0000000000493ec2: stc; jmp qword ptr [rax + 0x3b]; 
0x0000000000493eca: stc; jmp qword ptr [rax + 0x3e]; 
0x0000000000493ed2: stc; jmp qword ptr [rax + 0x41]; 
0x0000000000493eda: stc; jmp qword ptr [rax + 0x44]; 
0x0000000000493ee2: stc; jmp qword ptr [rax + 0x47]; 
0x0000000000493ef2: stc; jmp qword ptr [rax + 0x4d]; 
0x0000000000493f56: stc; jmp qword ptr [rax + 0x6c]; 
0x00000000004942aa: stc; jmp qword ptr [rax - 0x19]; 
0x000000000049434a: stc; jmp qword ptr [rax - 0x1a]; 
0x00000000004942a6: stc; jmp qword ptr [rax - 0x1b]; 
0x0000000000494346: stc; jmp qword ptr [rax - 0x1c]; 
0x00000000004942a2: stc; jmp qword ptr [rax - 0x1d]; 
0x0000000000494342: stc; jmp qword ptr [rax - 0x1e]; 
0x00000000004942f2: stc; jmp qword ptr [rax - 0x25]; 
0x000000000049441e: stc; jmp qword ptr [rax - 0x2e]; 
0x00000000004943ca: stc; jmp qword ptr [rax - 0x35]; 
0x00000000004940de: stc; jmp qword ptr [rax - 0x47]; 
0x00000000004940fa: stc; jmp qword ptr [rax - 0x49]; 
0x000000000049419a: stc; jmp qword ptr [rax - 0x4a]; 
0x0000000000494116: stc; jmp qword ptr [rax - 0x4b]; 
0x00000000004941b2: stc; jmp qword ptr [rax - 0x4e]; 
0x000000000049414e: stc; jmp qword ptr [rax - 0x4f]; 
0x00000000004941ce: stc; jmp qword ptr [rax - 0x50]; 
0x0000000000494252: stc; jmp qword ptr [rax - 0x5a]; 
0x00000000004941fe: stc; jmp qword ptr [rax - 0x61]; 
0x000000000049409e: stc; jmp qword ptr [rax - 0x6b]; 
0x0000000000494072: stc; jmp qword ptr [rax - 0x72]; 
0x0000000000493e6a: stc; jmp qword ptr [rax]; 
0x00000000004af67a: stc; jmp qword ptr [rbx + 0x17]; 
0x00000000004af632: stc; jmp qword ptr [rbx]; 
0x0000000000493fda: stc; jmp qword ptr [rcx]; 
0x00000000004af64a: stc; jmp qword ptr [rdi + 6]; 
0x00000000004b0606: stc; jmp qword ptr [rdx]; 
0x0000000000469f15: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000049402a: stc; jmp qword ptr [rsi - 0x69]; 
0x000000000049400e: stc; jmp qword ptr [rsi - 0x6d]; 
0x0000000000494006: stc; jmp qword ptr [rsi - 0x6e]; 
0x0000000000493ffe: stc; jmp qword ptr [rsi - 0x6f]; 
0x0000000000493ffa: stc; jmp qword ptr [rsi - 0x70]; 
0x0000000000493ff6: stc; jmp qword ptr [rsi - 0x71]; 
0x0000000000494022: stc; jmp qword ptr [rsi]; 
0x0000000000493eae: stc; jmp rax; 
0x00000000004af8ae: stc; jmp rbx; 
0x0000000000493fe6: stc; jmp rcx; 
0x000000000049402e: stc; jmp rdi; 
0x0000000000494002: stc; jmp rsi; 
0x00000000004a7764: stc; jnp 0xa7720; ret; 
0x0000000000471f25: stc; lea rsi, [rbp + 0x50]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000472101: stc; lea rsi, [rbp + 0x90]; lea r9, [rsp + 0x18]; mov rdi, r12; call rbx; 
0x0000000000430028: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000430022: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000474226: stc; mov rdx, qword ptr [rsp + 0x10]; mov rsi, qword ptr [rsp + 0x18]; mov rdi, rbp; mov r9, r14; call rbx; 
0x0000000000454946: stc; or byte ptr [rdi], 0x85; rol dword ptr [rdx], 0; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000480ea6: stc; or dword ptr [rsi - 0x1a], esi; cmp r8d, eax; je 0x80df6; sub eax, r8d; ret; 
0x0000000000493e6e: stc; push qword ptr [rax + 0x21]; stc; call qword ptr [rax - 0x4f0006de]; and edi, ecx; call rax; 
0x0000000000493e8e: stc; push qword ptr [rax + 0x2a]; stc; call qword ptr [rax - 0x4f0006d5]; sub al, 0xf9; call rax; 
0x0000000000494092: stc; push qword ptr [rax + 0x40fff993]; xchg esp, eax; stc; call rax; 
0x0000000000493f0e: stc; push qword ptr [rax + 0x57]; stc; jmp rax; 
0x0000000000493f52: stc; push qword ptr [rax + 0x6b]; stc; jmp qword ptr [rax + 0x6c]; 
0x000000000049429e: stc; push qword ptr [rax - 0x1f]; stc; jmp qword ptr [rax - 0x1d]; 
0x00000000004942ba: stc; push qword ptr [rax - 0x21]; stc; call qword ptr [rax - 0x1f]; 
0x000000000049435a: stc; push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x000000000049435a: stc; push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; stc; jmp qword ptr [rax]; 
0x00000000004942d6: stc; push qword ptr [rax - 0x23]; stc; call qword ptr [rax - 0x21]; 
0x0000000000494372: stc; push qword ptr [rax - 0x26]; stc; inc dword ptr [rax - 0x24]; stc; jmp qword ptr [rax]; 
0x000000000049438e: stc; push qword ptr [rax - 0x28]; stc; jmp qword ptr [rax]; 
0x0000000000493e96: stc; push qword ptr [rax - 0x2f0006d4]; sub eax, 0x2ef0fff9; stc; call qword ptr [rax]; 
0x0000000000494352: stc; push qword ptr [rax - 0x6f000626]; fdiv st(1), st(0); push qword ptr [rax - 0x22]; stc; call qword ptr [rax - 0x20]; 
0x00000000004942de: stc; push qword ptr [rax]; loope 0x942dc; call qword ptr [rax]; 
0x00000000004941b6: stc; push qword ptr [rax]; mov ah, 0xf9; call qword ptr [rax]; 
0x0000000000494136: stc; push qword ptr [rax]; mov ch, 0xf9; call qword ptr [rax]; 
0x0000000000493f62: stc; push qword ptr [rax]; outsd dx, dword ptr [rsi]; stc; jmp qword ptr [rax]; 
0x0000000000493e86: stc; push qword ptr [rax]; sub cl, bh; call qword ptr [rax + 0x29]; 
0x0000000000493ea6: stc; push qword ptr [rax]; xor ecx, edi; call rax; 
0x0000000000493ea6: stc; push qword ptr [rax]; xor ecx, edi; call rax; and cl, bh; jmp rax; 
0x0000000000493fde: stc; push qword ptr [rcx + 0x41fff995]; xchg esi, eax; stc; jmp rcx; 
0x000000000049431a: stc; push rax; fdivp st(1); call rax; 
0x0000000000493f8a: stc; push rax; nop; stc; call qword ptr [rsi]; 
0x00000000004943f2: stc; push rax; ret; 
0x0000000000493e9e: stc; push rax; stc; call qword ptr [rax]; 
0x0000000000493eee: stc; push rax; stc; jmp qword ptr [rax + 0x4d]; 
0x000000000048afab: stc; sal byte ptr [rcx + riz*2 + 0x3c], 0x2f; ja 0x8b861; movsxd rax, dword ptr [r15 + rax*4]; add rax, r15; jmp rax; 
0x0000000000431973: stc; sub byte ptr [rsi], al; add byte ptr [rcx + 0x63], cl; adc al, 0x93; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000438944: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000049504d: stc; cli; call qword ptr [rax - 0x4f000507]; stc; cli; call rax; 
0x0000000000495045: stc; cli; call qword ptr [rax - 7]; 
0x000000000049505d: stc; cli; call qword ptr [rax]; 
0x0000000000495055: stc; cli; call rax; 
0x0000000000495041: stc; cli; push qword ptr [rax]; stc; cli; call qword ptr [rax - 7]; 
0x0000000000495059: stc; cli; push rax; stc; cli; call qword ptr [rax]; 
0x0000000000494925: stc; stc; call qword ptr [rax]; 
0x0000000000472233: stc; wait; std; jmp qword ptr [rsi + 0xf]; 
0x000000000042bfb7: stc; xlatb; ret 0xff2d; 
0x0000000000413ab7: std; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x12], cl; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004a4d02: std; call ptr [rax]; je 0xa4d04; call rax; 
0x00000000004a4d02: std; call ptr [rax]; je 0xa4d04; call rax; ja 0xa4d08; jmp rbx; 
0x00000000004a4d16: std; call ptr [rax]; je 0xa4d18; call ptr [rax]; je 0xa4d1c; jmp rbx; 
0x00000000004a4d1a: std; call ptr [rax]; je 0xa4d1c; jmp rbx; 
0x00000000004a4d26: std; call qword ptr [rax]; 
0x00000000004a4d26: std; call qword ptr [rax]; jbe 0xa4d28; jmp rbx; 
0x00000000004a4d82: std; call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x00000000004b49ea: std; call qword ptr [rbx + 1]; 
0x00000000004b56e2: std; call qword ptr [rbx]; 
0x00000000004b492a: std; call qword ptr [rdi]; 
0x00000000004b5602: std; call qword ptr [rdx + 1]; 
0x00000000004b5172: std; call qword ptr [rdx]; 
0x00000000004a4d06: std; call rax; 
0x00000000004a4d06: std; call rax; ja 0xa4d08; jmp rbx; 
0x00000000004b184a: std; call rdx; 
0x000000000047630a: std; dec dword ptr [rax + 0x39]; ret; 
0x00000000004a4d3e: std; dec dword ptr [rax + 0x77]; std; jmp qword ptr [rax]; 
0x000000000044a20e: std; dec dword ptr [rax - 0x77]; ret; 
0x0000000000469982: std; dec dword ptr [rax - 0x7d]; clc; dec dword ptr [rax - 0x77]; ret; 
0x00000000004a4d7e: std; dec dword ptr [rax]; jbe 0xa4d80; call qword ptr [rax]; 
0x00000000004a4d7e: std; dec dword ptr [rax]; jbe 0xa4d80; call qword ptr [rax]; je 0xa4d84; jmp rbx; 
0x0000000000423fe2: std; dec dword ptr [rbp - 0x7b]; test byte ptr [rdi], -0x7c; ret; 
0x0000000000473c3b: std; dec dword ptr [rcx + 0xe181d1]; or al, 2; add byte ptr [rcx + 0xc00f9], al; add byte ptr [rbx + rax - 0xd], dh; ret; 
0x00000000004674aa: std; idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000048254b: std; inc dword ptr [rbp - 0x76b08a40]; ret; 
0x0000000000473c5b: std; inc dword ptr [rcx + 0x1000fa]; add byte ptr [rax - 0x73], cl; adc eax, 0xfffd41d6; cmove rax, rdx; ret; 
0x000000000044795a: std; jg 0x479a7; jmp qword ptr [rdx - 0x2f]; 
0x00000000004a4e2a: std; jmp qword ptr [rax + 0x7e]; 
0x00000000004b4ca2: std; jmp qword ptr [rax + 1]; 
0x00000000004a4d42: std; jmp qword ptr [rax]; 
0x00000000004b484a: std; jmp qword ptr [rbp]; 
0x00000000004b58b2: std; jmp qword ptr [rbx]; 
0x00000000004b51f2: std; jmp qword ptr [rcx + 9]; 
0x00000000004b4eba: std; jmp qword ptr [rcx]; 
0x00000000004b1352: std; jmp qword ptr [rdi]; 
0x00000000004b566a: std; jmp qword ptr [rdx + 1]; 
0x00000000004b0a72: std; jmp qword ptr [rdx]; 
0x0000000000472794: std; jmp qword ptr [rsi + 0x2e]; 
0x0000000000422868: std; jmp qword ptr [rsi + 0xf]; 
0x000000000047572c: std; jmp qword ptr [rsi - 0x70]; 
0x00000000004b53e2: std; jmp qword ptr [rsi]; 
0x00000000004a4d46: std; jmp rax; 
0x00000000004a4d0a: std; jmp rbx; 
0x00000000004b47ea: std; jmp rdx; 
0x00000000004b4eee: std; jmp rsp; 
0x000000000042f843: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042f84b: std; mov word ptr [rdi - 2], cx; ret; 
0x000000000044b21e: std; push rbx; ret; 
0x0000000000446ea3: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004478d1: std; vmovdqu64 zmmword ptr [r11], zmm4; vzeroupper; ret; 
0x00000000004477ba: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm7; vzeroupper; ret; 
0x0000000000438674: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x000000000043843a: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000446c02: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004b4679: std; cld; call qword ptr [rax]; 
0x000000000042b879: std; xlatb; ret 0xc085; 
0x000000000042bdf3: std; xlatb; ret 0xe883; 
0x00000000004734f4: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000473554: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000042b7ae: std; xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000042b871: std; xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004406c1: std; xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042b881: std; xlatb; ret; 
0x0000000000421b71: sti; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; call qword ptr [rax]; 
0x0000000000411643: sti; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret; 
0x000000000045905c: sti; and eax, 0x34894a00; mov rsi, qword ptr [rax + r14*8]; test rsi, rsi; je 0x5906e; call rsi; 
0x00000000004950ea: sti; call ptr [rax]; xor bl, bh; push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x00000000004963fa: sti; call ptr [rsi + 0x73]; sti; jmp qword ptr [rsi]; 
0x000000000049584a: sti; call ptr [rsi + rdi]; sti; call qword ptr [rcx + 0x3d]; 
0x00000000004950f2: sti; call qword ptr [rax + 0x30]; 
0x0000000000495e86: sti; call qword ptr [rax + 0x6b]; 
0x00000000004950e6: sti; call qword ptr [rax]; 
0x000000000048fe6e: sti; call qword ptr [rbp + 0x53]; 
0x0000000000495592: sti; call qword ptr [rcx + 0x3d]; 
0x00000000004955d6: sti; call qword ptr [rcx + 0x3d]; sti; call qword ptr [rcx + 0x3d]; sti; call qword ptr [rdx]; 
0x00000000004955da: sti; call qword ptr [rcx + 0x3d]; sti; call qword ptr [rdx]; 
0x0000000000496436: sti; call qword ptr [rdi + 0x72]; 
0x000000000049593e: sti; call qword ptr [rdi + rdi]; sti; call qword ptr [rcx + 0x3d]; 
0x000000000049642e: sti; call qword ptr [rdx + 0x71]; 
0x00000000004955de: sti; call qword ptr [rdx]; 
0x00000000004b2aba: sti; call qword ptr [rsi + 1]; 
0x000000000049647e: sti; call rax; 
0x00000000004955f2: sti; call rdi; 
0x00000000004964aa: sti; dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x000000000044902f: sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000495742: sti; dec dword ptr [rcx + 0x26fffb3e]; sti; push qword ptr [rax]; sti; call qword ptr [rcx + 0x3d]; 
0x000000000049645a: sti; dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x00000000004964a6: sti; dec dword ptr [rdi]; jo 0x964a6; dec dword ptr [rax + rsi*2 - 5]; jmp qword ptr [rax + 0x74]; 
0x000000000049560e: sti; dec dword ptr [rsi - 0x170004c3]; cmp eax, 0x3e44fffb; sti; jmp qword ptr [rsi]; 
0x00000000004956a6: sti; dec ebp; sti; call qword ptr [rcx + 0x3d]; 
0x000000000049576e: sti; dec edx; cmp eax, 0x3db6fffb; sti; push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x0000000000496456: sti; inc dword ptr [rax + 0x75]; sti; dec dword ptr [rdi]; jae 0x9645a; call rdi; 
0x0000000000495616: sti; inc dword ptr [rsi + rdi - 5]; jmp qword ptr [rsi]; 
0x000000000049511a: sti; jmp qword ptr [rax + 0x30]; 
0x0000000000495eae: sti; jmp qword ptr [rax + 0x6a]; 
0x00000000004964ae: sti; jmp qword ptr [rax + 0x74]; 
0x000000000049515a: sti; jmp qword ptr [rax]; 
0x00000000004b2102: sti; jmp qword ptr [rbx + 8]; 
0x00000000004b2b0a: sti; jmp qword ptr [rbx]; 
0x0000000000495142: sti; jmp qword ptr [rcx + 0x30]; 
0x0000000000495122: sti; jmp qword ptr [rdi + 0x30]; 
0x0000000000495162: sti; jmp qword ptr [rdi]; 
0x00000000004b2832: sti; jmp qword ptr [rdx]; 
0x000000000044a41f: sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000448ef0: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000044e90c: sti; jmp qword ptr [rsi - 0x70]; 
0x000000000049561a: sti; jmp qword ptr [rsi]; 
0x0000000000495e6a: sti; jmp rax; 
0x000000000049571e: sti; jmp rsp; 
0x00000000004718c9: sti; jne 0x71938; mov rax, qword ptr [rax + 0x130]; call qword ptr [rax + 0x68]; 
0x000000000042fc28: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042fc22: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000495e82: sti; push qword ptr [rax + 0x6b]; sti; call qword ptr [rax + 0x6b]; 
0x0000000000495e8a: sti; push qword ptr [rax]; imul edi, ebx, -1; or byte ptr [rbx - 5], ch; jmp rax; 
0x00000000004950ee: sti; push qword ptr [rax]; xor bl, bh; call qword ptr [rax + 0x30]; 
0x000000000049574a: sti; push qword ptr [rax]; sti; call qword ptr [rcx + 0x3d]; 
0x0000000000495776: sti; push qword ptr [rbp + rdi - 5]; call qword ptr [rcx + 0x3d]; 
0x0000000000495ea6: sti; push rsp; push 0x68f4fffb; sti; jmp qword ptr [rax + 0x6a]; 
0x0000000000495eb2: sti; push rsp; push 0x6a38fffb; sti; call qword ptr [rax]; 
0x0000000000495e62: sti; push rsp; push 0x6bb0fffb; sti; jmp rax; 
0x000000000045a567: sti; test rax, rax; je 0x5a56f; call rax; 
0x0000000000438936: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x00000000004b4621: sti; cld; call qword ptr [rbx]; 
0x00000000004a78ea: sti; ret; 
0x0000000000475351: sti; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004b2ab9: sti; sti; call qword ptr [rsi + 1]; 
0x000000000040128c: syscall; 
0x0000000000443fb6: syscall; add byte ptr [rcx + 0x63], cl; or al, 0x93; lea rcx, [r11 + rcx]; jmp rcx; 
0x00000000004494d5: syscall; cmp rax, -0xfff; jae 0x494e0; ret; 
0x000000000044a565: syscall; cmp rax, -0xfff; jae 0x4a570; ret; 
0x000000000044a595: syscall; cmp rax, -0xfff; jae 0x4a5a0; ret; 
0x000000000044a5c5: syscall; cmp rax, -0xfff; jae 0x4a5d0; ret; 
0x000000000044bc78: syscall; cmp rax, -0xfff; jae 0x4bc83; ret; 
0x000000000044bca5: syscall; cmp rax, -0xfff; jae 0x4bcb0; ret; 
0x00000000004754f5: syscall; cmp rax, -0xfff; jae 0x75500; ret; 
0x0000000000488525: syscall; cmp rax, -0xfff; jae 0x88530; ret; 
0x000000000044bd57: syscall; pop rdx; pop rsi; ret; 
0x0000000000474dc5: syscall; ret; 
0x0000000000446e9c: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000432dc8: ud2; lea r11, [rip + 0x6165f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042b830: vzeroupper; xor eax, eax; ret; 
0x000000000042b658: vzeroupper; ret; 
0x000000000044c011: wait; add al, 0; mov eax, 0x15; syscall; 
0x000000000042b121: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000046753c: wait; ret 3; 
0x0000000000476905: wait; clc; dec dword ptr [rax + 0x39]; ret; 
0x00000000004abc69: wait; cmc; call rax; 
0x00000000004941f5: wait; stc; inc eax; pushfq; stc; call qword ptr [rax]; 
0x0000000000472234: wait; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004a1ef9: xlatb; add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax], al; call rdi; 
0x0000000000437042: xlatb; add rsi, rdx; lea r11, [rip + 0x5db23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436ec2: xlatb; add rsi, rdx; lea r11, [rip + 0x5dca3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436d42: xlatb; add rsi, rdx; lea r11, [rip + 0x5de23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436bc3: xlatb; add rsi, rdx; lea r11, [rip + 0x5dfa2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436a42: xlatb; add rsi, rdx; lea r11, [rip + 0x5e123]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004368c2: xlatb; add rsi, rdx; lea r11, [rip + 0x5e2a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436742: xlatb; add rsi, rdx; lea r11, [rip + 0x5e423]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004365c2: xlatb; add rsi, rdx; lea r11, [rip + 0x5e5a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436442: xlatb; add rsi, rdx; lea r11, [rip + 0x5e723]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004362c2: xlatb; add rsi, rdx; lea r11, [rip + 0x5e8a3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436142: xlatb; add rsi, rdx; lea r11, [rip + 0x5ea23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435fc2: xlatb; add rsi, rdx; lea r11, [rip + 0x5eba3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435e42: xlatb; add rsi, rdx; lea r11, [rip + 0x5ed23]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435cc2: xlatb; add rsi, rdx; lea r11, [rip + 0x5eea3]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435b42: xlatb; add rsi, rdx; lea r11, [rip + 0x5f023]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434562: xlatb; add rsi, rdx; lea r11, [rip + 0x60103]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004343e2: xlatb; add rsi, rdx; lea r11, [rip + 0x60283]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000434262: xlatb; add rsi, rdx; lea r11, [rip + 0x60403]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004340e3: xlatb; add rsi, rdx; lea r11, [rip + 0x60582]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433f62: xlatb; add rsi, rdx; lea r11, [rip + 0x60703]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433de2: xlatb; add rsi, rdx; lea r11, [rip + 0x60883]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433c62: xlatb; add rsi, rdx; lea r11, [rip + 0x60a03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433ae2: xlatb; add rsi, rdx; lea r11, [rip + 0x60b83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433962: xlatb; add rsi, rdx; lea r11, [rip + 0x60d03]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004337e2: xlatb; add rsi, rdx; lea r11, [rip + 0x60e83]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433662: xlatb; add rsi, rdx; lea r11, [rip + 0x61003]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004334e2: xlatb; add rsi, rdx; lea r11, [rip + 0x61183]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433362: xlatb; add rsi, rdx; lea r11, [rip + 0x61303]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004331e2: xlatb; add rsi, rdx; lea r11, [rip + 0x61483]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433062: xlatb; add rsi, rdx; lea r11, [rip + 0x61603]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004304f8: xlatb; add rsi, rdx; lea r11, [rip + 0x63d6d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042db28: xlatb; add rsi, rdx; lea r11, [rip + 0x6657d]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000041067f: xlatb; cmp rax, rdi; jbe 0x106da; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000446e93: xlatb; jb 0x46e99; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040d5ad: xlatb; jmp rdi; 
0x00000000004a78e3: xlatb; jo 0xa7957; mov ebp, 0xfb67d10d; ret; 
0x0000000000434d3b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000437460: xlatb; lea r11, [rip + 0x5d4c8]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004372ad: xlatb; lea r11, [rip + 0x5d8bb]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a08: xlatb; lea r11, [rip + 0x5f160]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004358ac: xlatb; lea r11, [rip + 0x5f2bc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043494c: xlatb; lea r11, [rip + 0x5fadc]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004347b9: xlatb; lea r11, [rip + 0x5feaf]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432bab: xlatb; lea r11, [rip + 0x616bd]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432f28: xlatb; lea r11, [rip + 0x61740]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432db6: xlatb; lea r11, [rip + 0x618b2]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043040c: xlatb; lea r11, [rip + 0x63e5c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000430347: xlatb; lea r11, [rip + 0x63f21]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042da3c: xlatb; lea r11, [rip + 0x6666c]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042d977: xlatb; lea r11, [rip + 0x66731]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042cc32: xlatb; lea r11, [rip + 0x67336]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cbb8: xlatb; lea r11, [rip + 0x673b0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042cb29: xlatb; lea r11, [rip + 0x6743f]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c91e: xlatb; lea r11, [rip + 0x6764a]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c7ec: xlatb; lea r11, [rip + 0x6777c]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c726: xlatb; lea r11, [rip + 0x67842]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c6a8: xlatb; lea r11, [rip + 0x678c0]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c611: xlatb; lea r11, [rip + 0x67957]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c415: xlatb; lea r11, [rip + 0x67b53]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c2e4: xlatb; lea r11, [rip + 0x67c84]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x000000000042c1d5: xlatb; lea r11, [rip + 0x67d93]; movsxd rcx, dword ptr [r11 + rdx*4]; add rcx, r11; jmp rcx; 
0x0000000000484742: xlatb; mov byte ptr [rsi], al; jne 0x84720; mov rax, rsi; ret; 
0x0000000000448fa1: xlatb; mov eax, esi; syscall; 
0x0000000000448fb0: xlatb; mov eax, r8d; syscall; 
0x00000000004585bc: xlatb; mov qword ptr [rbp - 0x98], rdx; call 0x4d3c0; mov rdx, qword ptr [rbp - 0x98]; mov rdi, r14; call rdx; 
0x00000000004310f1: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x63172]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042e721: xlatb; movdqu xmmword ptr [r8], xmm0; lea r11, [rip + 0x65982]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004a8d86: xlatb; ret 0x4e27; 
0x00000000004733a7: xlatb; ret 0x94c; 
0x000000000042b16f: xlatb; ret 0xc085; 
0x0000000000425c90: xlatb; ret 0xc148; 
0x000000000042bdf4: xlatb; ret 0xe883; 
0x0000000000440944: xlatb; ret 0xf66; 
0x000000000042bfb8: xlatb; ret 0xff2d; 
0x0000000000467531: xlatb; ret 3; 
0x00000000004734f5: xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000042b551: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000473555: xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000042b7af: xlatb; rol dword ptr [rbp + 0x311b75c0], 0xc0; vzeroupper; ret; 
0x000000000042b333: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000444aee: xlatb; rol dword ptr [rbp + 0x661075c0], cl; nop; nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x000000000042b872: xlatb; rol dword ptr [rbp - 0x3a378a40], 0xfd; xlatb; ret 0xc085; 
0x00000000004406c2: xlatb; rol dword ptr [rbp - 0x3a678a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042b303: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000473a66: xlatb; rol dword ptr [rbp - 0x5f7af040], 0; add byte ptr [rax], al; mov rax, r8; vzeroupper; ret; 
0x000000000042b772: xlatb; rol dword ptr [rbp - 0x6b7af040], 0; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000440fb2: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; call qword ptr [rbx]; 
0x0000000000440fee: xlatb; ror byte ptr [rax - 0x73], 0x76; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x85; ret; 
0x0000000000444ae6: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000425b76: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000425a36: xlatb; sal bh, 1; ret 0xc000; 
0x00000000004258f6: xlatb; sal bh, 1; ret 0xe000; 
0x00000000004257b6: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000425676: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000425536: xlatb; sal bh, 1; ret 0xfc00; 
0x00000000004253f6: xlatb; sal bh, 1; ret 0xfe00; 
0x00000000004252b6: xlatb; sal bh, 1; ret 0xff00; 
0x0000000000425176: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000425036: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000424ef6: xlatb; sal bh, 1; ret 0xffe0; 
0x0000000000424db6: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000424c76: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000424b36: xlatb; sal bh, 1; ret 0xfffc; 
0x00000000004249f6: xlatb; sal bh, 1; ret 0xfffe; 
0x0000000000444ae2: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000473356: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000473345: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x00000000004370ff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5d826]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436f7f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5d9a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436dff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5db26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436c7f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5dca6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000436aff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5de26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043697f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5dfa6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004367ff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e126]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043667f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e2a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004364ff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e426]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043637f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e5a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004361ff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e726]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043607f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5e8a6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435eff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ea26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435d7f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5eba6]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435bff: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ed26]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000435a86: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ee9f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043461f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5fe06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043449f: xlatb; sub rsi, rdx; lea r11, [rip + 0x5ff86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043431f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60106]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043419f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60286]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043401f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60406]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433e9f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60586]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433d1f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60706]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433b9f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60886]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000433a1f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60a06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043389f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60b86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043371f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60d06]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043359f: xlatb; sub rsi, rdx; lea r11, [rip + 0x60e86]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043341f: xlatb; sub rsi, rdx; lea r11, [rip + 0x61006]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043329f: xlatb; sub rsi, rdx; lea r11, [rip + 0x61186]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000043311f: xlatb; sub rsi, rdx; lea r11, [rip + 0x61306]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x0000000000432fa6: xlatb; sub rsi, rdx; lea r11, [rip + 0x6147f]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x000000000042b184: xlatb; ret; 
0x0000000000432add: xlatb; sfence; lea r11, [rip + 0x61788]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 
0x00000000004300f5: xlatb; sfence; lea r11, [rip + 0x63fb0]; movsxd rdx, dword ptr [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx; 

18938 gadgets found
